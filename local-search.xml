<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>高性能并发通信服务器</title>
    <link href="/2024/07/18/HighEfficientCS/"/>
    <url>/2024/07/18/HighEfficientCS/</url>
    
    <content type="html"><![CDATA[<p>对ClientServer进行性能分析和高性能改造</p><p>包含：select模型，多线程异步收发，服务器操作代理，客户端心跳检测，日志管理器，内存池和对象池</p><p>项目代码地址：<a href="https://gitee.com/zhi_Q/CPro/tree/master/">https://gitee.com/zhi_Q/CPro/tree/master/</a></p><span id="more"></span><h1 id="性能瓶颈1：select-模型绑定"><a href="#性能瓶颈1：select-模型绑定" class="headerlink" title="性能瓶颈1：select 模型绑定"></a>性能瓶颈1：select 模型绑定</h1><p>问题1：循环绑定可读缓冲区循环绑定耗费大量资源</p><p>问题2：在接收消息时循环查询数组是否有消息，且删除无效连接时需再次循环查找并删除客户端</p><p><img src="/./HighEfficientCS/image-20240718193024825.png"></p><p>修改: 使用一个fd_set缓存和修改标志来重复绑定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tServer::mainRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// select 可读缓冲区备份</span><br>fd_set fdRead_buf = &#123;&#125;;<br><span class="hljs-comment">// fd_set fdWrite_buf = &#123;&#125;;</span><br><span class="hljs-comment">// client是否改变标识</span><br><span class="hljs-type">bool</span> c_change = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 最大sockfd</span><br><span class="hljs-type">int</span> maxfd = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 进入主循环程序</span><br>_run = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isRun</span>())<br>&#123;<br><span class="hljs-comment">// 拷贝客户端缓冲队列到正式队列</span><br><span class="hljs-keyword">if</span> (!_tClientBuf.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">autolock</span><span class="hljs-params">(_mutex)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; client : _tClientBuf)<br>&#123;<br>_tClients.<span class="hljs-built_in">emplace</span>(client-&gt;<span class="hljs-built_in">getSock</span>(), client);<br>&#125;<br>_tClientBuf.<span class="hljs-built_in">clear</span>();<br>c_change = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 客户端队列没有则循环等待，否则无客户端绑定select会报错</span><br><span class="hljs-keyword">if</span> (_tClients.<span class="hljs-built_in">empty</span>())<br>&#123;<br>std::<span class="hljs-function">chrono::milliseconds <span class="hljs-title">tim</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br>std::this_thread::<span class="hljs-built_in">sleep_for</span>(tim);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-comment">// 创建select变量</span><br>fd_set fdRead = &#123;&#125;;<br><span class="hljs-comment">//fd_set fdWrite = &#123;&#125;;</span><br><span class="hljs-comment">// fd_set fdExp = &#123;&#125;;</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-comment">//FD_ZERO(&amp;fdWrite);</span><br><span class="hljs-comment">//FD_ZERO(&amp;fdExp);</span><br>timeval tval = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">50000</span> &#125;;<br><br><span class="hljs-comment">// 将所有客户端绑定到select</span><br><span class="hljs-keyword">if</span> (c_change)<br>&#123;<br><span class="hljs-comment">// 有客户端变动，重新绑定</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; client : _tClients)<br>&#123;<br><span class="hljs-built_in">FD_SET</span>(client.first, &amp;fdRead);<br><span class="hljs-comment">//FD_SET(client.first, &amp;fdWrite);</span><br>maxfd = <span class="hljs-built_in">max</span>(maxfd, (<span class="hljs-type">int</span>)client.first);<br>&#125;<br><span class="hljs-comment">// 将最新的客户端拷贝到缓冲区</span><br><span class="hljs-built_in">memcpy</span>(&amp;fdRead_buf, &amp;fdRead, <span class="hljs-built_in">sizeof</span>(fd_set));<br><span class="hljs-comment">//memcpy(&amp;fdWrite_buf, &amp;fdWrite, sizeof(fd_set));</span><br>c_change = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 无客户端变动，直接拷贝</span><br><span class="hljs-built_in">memcpy</span>(&amp;fdRead, &amp;fdRead_buf, <span class="hljs-built_in">sizeof</span>(fd_set));<br><span class="hljs-comment">//memcpy(&amp;fdWrite, &amp;fdWrite_buf, sizeof(fd_set));</span><br>&#125;<br><br><span class="hljs-comment">// select 模型检测</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; <span class="hljs-built_in">select</span>(maxfd + <span class="hljs-number">1</span>, &amp;fdRead, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tval))<br>&#123;<br>LogMgr::<span class="hljs-built_in">addTask</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">LogInfo</span>(LEVEL_ERROR, <span class="hljs-string">&quot;tServer select error.&quot;</span>));<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 解析可读的客户端信息</span><br><span class="hljs-built_in">NetRequest</span>(fdRead, c_change);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结果：FD-SET性能消耗剧减，循环查询和删除消耗减少，剩余消耗均为select查询"><a href="#结果：FD-SET性能消耗剧减，循环查询和删除消耗减少，剩余消耗均为select查询" class="headerlink" title="结果：FD_SET性能消耗剧减，循环查询和删除消耗减少，剩余消耗均为select查询"></a>结果：FD_SET性能消耗剧减，循环查询和删除消耗减少，剩余消耗均为select查询</h4><p><img src="/./HighEfficientCS/image-20240718221454673.png"></p><h1 id="性能瓶颈2：接收和发送数据"><a href="#性能瓶颈2：接收和发送数据" class="headerlink" title="性能瓶颈2：接收和发送数据"></a>性能瓶颈2：接收和发送数据</h1><h3 id="2-1-测试："><a href="#2-1-测试：" class="headerlink" title="2.1 测试："></a>2.1 测试：</h3><h4 id="2-1-1服务器recv"><a href="#2-1-1服务器recv" class="headerlink" title="2.1.1服务器recv"></a>2.1.1服务器recv</h4><p><img src="/./HighEfficientCS/image-20240718230329028.png"></p><p>程序中接收缓冲区 -&gt; 消息缓冲区 二级缓冲， 每次需要进行数据拷贝，可以改为一个缓冲区，避免拷贝来加速</p><p>每次只接收1个字节数据，每秒能够接收170万次</p><h4 id="2-1-2-客户端send"><a href="#2-1-2-客户端send" class="headerlink" title="2.1.2 客户端send"></a>2.1.2 客户端send</h4><p><img src="/./HighEfficientCS/image-20240718231438815.png"></p><p>每次只发1个字节数据，每秒能够发送70万次</p><p>流式传输需要一边处理完另一边才能接着发送，相互之间是有制约的！！！</p><h4 id="2-1-3-结论"><a href="#2-1-3-结论" class="headerlink" title="2.1.3 结论"></a>2.1.3 结论</h4><p>发送是远远慢于接收的！！！</p><p>在服务器中解析数据后会马上发送回客户端，一个线程又收又发会导致相互制约，因此后续需要<strong>改进发送</strong></p><h3 id="2-2-改进send"><a href="#2-2-改进send" class="headerlink" title="2.2 改进send"></a>2.2 改进send</h3><p><strong>改进1</strong>：定时定量发送信息，而不是每次收到就发一条信息，从而减少发送次数</p><p><strong>改进2</strong>：分离发送和接收，避免相互阻塞</p><p>建立单独用于发送任务的线程，封装任务类，任务服务器类</p><p><code>SendTask.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 发送任务 可以封装类，使用智能指针。也可以使用function, lambda表达式管理回调</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sTask</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">sTask</span>(ClientPtr client, msg_header* header);<br>~<span class="hljs-built_in">sTask</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dotask</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>ClientPtr _pClient;<br>msg_header* _header;<br>&#125;;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 发送任务类 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sTaskServer</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// function管理任务函数开辟和释放空间</span><br><span class="hljs-comment">//typedef std::function&lt;int()&gt; sTaskPtr;</span><br><span class="hljs-built_in">sTaskServer</span>();<br>~<span class="hljs-built_in">sTaskServer</span>();<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 添加任务</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addTask</span><span class="hljs-params">(sTaskPtr task)</span></span>;<br><span class="hljs-comment">// 开启线程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 关闭服务器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 执行任务</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mainRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 任务正式队列</span><br>std::list&lt;sTaskPtr&gt; _sTasks;<br><span class="hljs-comment">// 任务缓冲队列</span><br>std::list&lt;sTaskPtr&gt; _sTaskBuf;<br><span class="hljs-comment">// 线程锁</span><br>std::mutex _mutex;<br><span class="hljs-comment">// 运行标识，用于控制线程等待主循环退出，避免析构错误</span><br><span class="hljs-type">bool</span> _isRun;<br><span class="hljs-comment">// 结束标识，用于控制主循环退出</span><br><span class="hljs-type">bool</span> _isEnd;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-lambda和function优化发送任务"><a href="#2-3-lambda和function优化发送任务" class="headerlink" title="2.3 lambda和function优化发送任务"></a>2.3 lambda和function优化发送任务</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123; <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello lambda\n&quot;</span>); <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a+b); <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun3</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> n+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//1无参</span><br>    std::function&lt;<span class="hljs-type">void</span>()&gt; call = fun;<span class="hljs-comment">// 函数 类似 变量 进行存储</span><br>    <span class="hljs-built_in">call</span>();<br>    <span class="hljs-comment">//2 有参</span><br>    std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; call = fun2;<br>    <span class="hljs-built_in">call</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">//3 有返回值</span><br>    std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt; call = fun3;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">call</span>(<span class="hljs-number">3</span>);<br>    <br>    <span class="hljs-comment">/* lambda */</span><br>    call = [<span class="hljs-comment">/*外部变量捕获列表*/</span>](<span class="hljs-comment">/*形参列表*/</span>)&#123;<span class="hljs-comment">/*函数体*/</span>&#125;<br>    call = []() opt -&gt; ret&#123;&#125; <span class="hljs-comment">// opt特殊操作符; ret返回值类型</span><br>    <span class="hljs-comment">// 实例</span><br>    std::function&lt;<span class="hljs-built_in">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt; call;<br>    call = [n](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) -&gt; <span class="hljs-type">int</span>&#123; <span class="hljs-keyword">return</span> a+b+n;&#125;<br>    <span class="hljs-built_in">call</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>lambda 捕获列表</p><ol><li>[] 不捕获任何变量</li><li>[&amp;] 捕获外部所有变量，并作为引用使用</li><li>[&#x3D;] 捕获外部所有变量，并作为副本使用</li><li>[&#x3D;, &amp;f] 捕获外部所有变量，f使用引用，其余使用副本</li><li>[bar] 按指捕获bar变量</li><li>[this] 捕获当前类的this指针；如果使用 &#x3D;，&amp; 捕获，则默认包含了this</li></ol><p>lambda 特殊操作符opt（一般不使用）</p><ol><li>mutable 表示lambda表达式体内代码可以修改被捕获的变量，并且可以访问被捕获对象的non-const方法</li><li>exception 表示lambda是否抛出异常，抛出什么样的异常</li><li>attribute 声明属性</li></ol><h1 id="性能瓶颈3：频繁new，delete"><a href="#性能瓶颈3：频繁new，delete" class="headerlink" title="性能瓶颈3：频繁new，delete"></a>性能瓶颈3：频繁new，delete</h1><p>频繁的申请和释放内存会严重影响算法的性能，且可能存在内存泄漏，因此需要进行内存管理</p><p>内存管理可以避免内存碎片产生，使程序长期稳定、高效的运行</p><p>内存管理方式：</p><p>1.<strong>内存池</strong>：从系统中申请足够大小的内存，由程序自己管理</p><p>2.<strong>对象池</strong>：创建足够多的对象，减少创建类对象的消耗</p><p>3.<strong>智能指针</strong>：保证被创建的对象能够正确释放</p><h3 id="3-1、内存池："><a href="#3-1、内存池：" class="headerlink" title="3.1、内存池："></a>3.1、内存池：</h3><p>重载new运算符，分大小建立多个内存池（直接映射对应大小的空间，提高速度）</p><p><img src="/./HighEfficientCS/image-20240729205613136.png"></p><p>内存池实现类：<code>MemoryPool.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLOCK_BASE_SIZE 32</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MemoryPool</span>;<br><span class="hljs-comment">// 内存块</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MemoryBlock</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MemoryBlock</span>();<br>~<span class="hljs-built_in">MemoryBlock</span>() &#123;&#125;<br><span class="hljs-comment">// 初始化内存块</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initBlock</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">bool</span> inpool, MemoryPool* Mpool, MemoryBlock* next)</span></span>;<br><span class="hljs-comment">// 内存编号, 可有可无，调试用</span><br><span class="hljs-type">int</span> _mID;<br><span class="hljs-comment">// 是否在池内</span><br><span class="hljs-type">bool</span> _inPool;<br><span class="hljs-comment">// 所在的内存池</span><br>MemoryPool* _MemPool;<br><span class="hljs-comment">// 下一可用内存块</span><br>MemoryBlock* _nextBlock;<br>&#125;;<br><br><span class="hljs-comment">// 内存池</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MemoryPool</span><br>&#123;<br><span class="hljs-comment">// 线程锁</span><br>std::mutex _MPmutex;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MemoryPool</span>();<br><span class="hljs-built_in">MemoryPool</span>(<span class="hljs-type">size_t</span> num, <span class="hljs-type">size_t</span> size);<br>~<span class="hljs-built_in">MemoryPool</span>();<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 申请内存</span><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">mem_alloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> nlen)</span></span>;<br><span class="hljs-comment">// 释放内存</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mem_free</span><span class="hljs-params">(MemoryBlock* pblock)</span></span>;<br><span class="hljs-comment">// 初始化内存池</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initMpool</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 扩大内存池</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ExMpool</span><span class="hljs-params">(<span class="hljs-type">size_t</span> num)</span></span>;<br><span class="hljs-comment">// 减小内存池</span><br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">DeMpool</span><span class="hljs-params">(<span class="hljs-type">size_t</span> num)</span></span>;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-comment">// 内存块最大数量</span><br><span class="hljs-type">size_t</span> _bNum;<br><span class="hljs-comment">// 内存块大小</span><br><span class="hljs-type">size_t</span> _bSize;<br><span class="hljs-comment">// 内存池首地址, 连续空间开辟用</span><br><span class="hljs-type">char</span>* _mpBuf;<br><span class="hljs-comment">// 可用内存块头节点</span><br>MemoryBlock* _headBlock;<br>&#125;;<br><br><span class="hljs-comment">// 内存池实例对象，使用模板初始化</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">size_t</span> bSize, <span class="hljs-type">size_t</span> bNum&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MPobj</span> : <span class="hljs-keyword">public</span> MemoryPool<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MPobj</span>() <br>&#123;<br>_bSize = bSize;<br>_bNum = bNum;<br><span class="hljs-built_in">initMpool</span>();<br>&#125;<br>~<span class="hljs-built_in">MPobj</span>() &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 内存池管理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MemoryMgr</span><br>&#123;<br><span class="hljs-comment">// 单例模式，隐藏构造，删除拷贝</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">MemoryMgr</span>();<br>~<span class="hljs-built_in">MemoryMgr</span>() &#123;&#125;<br><span class="hljs-built_in">MemoryMgr</span>(<span class="hljs-type">const</span> MemoryMgr&amp; MemMgr) = <span class="hljs-keyword">delete</span>;<br>MemoryMgr <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> MemoryMgr&amp; MemMgr) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 获取单例对象</span><br><span class="hljs-function"><span class="hljs-type">static</span> MemoryMgr&amp; <span class="hljs-title">MemMgr</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 开辟空间</span><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">Mgr_alloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> nlen)</span></span>;<br><span class="hljs-comment">// 删除空间</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Mgr_free</span><span class="hljs-params">(<span class="hljs-type">void</span>* pbuf)</span></span>;<br><br><span class="hljs-comment">// 添加内存池</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">addPool</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> num)</span></span>;<br><span class="hljs-comment">// 减少内存池</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">delPool</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> num)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 内存化整，减少内存碎片</span><br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">tranSize</span><span class="hljs-params">(<span class="hljs-type">size_t</span> nlen)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 管理的内存池</span><br>MPobj&lt;<span class="hljs-number">32</span>, <span class="hljs-number">10000</span>&gt; Mpool_32;<br>MPobj&lt;<span class="hljs-number">64</span>, <span class="hljs-number">10000</span>&gt; Mpool_64;<br>MPobj&lt;<span class="hljs-number">128</span>, <span class="hljs-number">5000</span>&gt; Mpool_128;<br>MPobj&lt;<span class="hljs-number">256</span>, <span class="hljs-number">1000</span>&gt; Mpool_256;<br>MPobj&lt;<span class="hljs-number">512</span>, <span class="hljs-number">500</span>&gt; Mpool_512;<br>MPobj&lt;<span class="hljs-number">1024</span>, <span class="hljs-number">100</span>&gt; Mpool_1024;<br><span class="hljs-comment">// 内存池索引</span><br>MemoryPool* _Mpools[<span class="hljs-number">1024</span> + <span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>内存池使用类：<code>Alloctor.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MemoryPool.h&quot;</span></span><br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment">* ----- 重构new和delete来控制内存池 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> nlen)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> MemoryMgr::<span class="hljs-built_in">MemMgr</span>().<span class="hljs-built_in">Mgr_alloc</span>(nlen);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>* pbuf)</span></span><br><span class="hljs-function"></span>&#123;<br>MemoryMgr::<span class="hljs-built_in">MemMgr</span>().<span class="hljs-built_in">Mgr_free</span>(pbuf);<br>&#125;<br><br><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span> nlen)<br>&#123;<br><span class="hljs-keyword">return</span> MemoryMgr::<span class="hljs-built_in">MemMgr</span>().<span class="hljs-built_in">Mgr_alloc</span>(nlen);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span>* pbuf)<br>&#123;<br>MemoryMgr::<span class="hljs-built_in">MemMgr</span>().<span class="hljs-built_in">Mgr_free</span>(pbuf);<br>&#125;<br></code></pre></td></tr></table></figure><p>对象池使用，只需要在main函数文件中引用<code>include &quot;Alloctor.h&quot;</code>即可</p><h3 id="3-2、对象池"><a href="#3-2、对象池" class="headerlink" title="3.2、对象池"></a>3.2、对象池</h3><p><img src="/./HighEfficientCS/image-20240729205748715.png"></p><p>对象池类 objectPool.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;mutex&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> oType, <span class="hljs-type">size_t</span> oNum&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">objectPool</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">object</span><br>&#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initobj</span><span class="hljs-params">(<span class="hljs-type">bool</span> inpool, object* next)</span></span><br><span class="hljs-function"></span>&#123;<br>_inPool = inpool;<br>_nextobj = next;<br>&#125;<br><span class="hljs-comment">// 是否在池种</span><br><span class="hljs-type">bool</span> _inPool;<br><span class="hljs-comment">// 下一可用对象</span><br>object* _nextobj;<br>&#125;;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 开辟对象</span><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">obj_alloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> len)</span></span>;<br><span class="hljs-comment">// 释放对象</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">obj_free</span><span class="hljs-params">(<span class="hljs-type">void</span>* pbuf)</span></span>;<br><span class="hljs-comment">// 初始化池</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initoPool</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">objectPool</span>();<br>~<span class="hljs-built_in">objectPool</span>();<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 对象池大小</span><br><span class="hljs-type">size_t</span> _oNum;<br><span class="hljs-comment">// 对象池首地址</span><br><span class="hljs-type">char</span>* _oBuf;<br><span class="hljs-comment">// 对象池首节点</span><br>object* _headobj;<br><span class="hljs-comment">// 线程锁</span><br>std::mutex _omutex;<br>&#125;;<br><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> oType, <span class="hljs-type">size_t</span> oNum&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">objMgr</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 单例对象池管理</span><br><span class="hljs-built_in">objMgr</span>() &#123;&#125;<br>~<span class="hljs-built_in">objMgr</span>() &#123;&#125;<br><span class="hljs-built_in">objMgr</span>(<span class="hljs-type">const</span> objMgr&amp; objM) = <span class="hljs-keyword">delete</span>;<br>objMgr <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> objMgr&amp; objM) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 重构new delete操作</span><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> nlen)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">objM</span>()-&gt;<span class="hljs-built_in">obj_alloc</span>(nlen);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>* pbuf)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">objM</span>()-&gt;<span class="hljs-built_in">obj_free</span>(pbuf);<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 开辟对象</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> ... Args&gt;</span><br><span class="hljs-function"><span class="hljs-type">static</span> oType* <span class="hljs-title">newobj</span><span class="hljs-params">(Args ... args)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">oType</span>(args...);<br>&#125;<br><span class="hljs-comment">// 释放对象</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">delobj</span><span class="hljs-params">(oType* obj)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">delete</span> obj;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 初始化对象池对象</span><br><span class="hljs-keyword">typedef</span> objectPool&lt;oType, oNum&gt; classTypePool;<br><span class="hljs-function"><span class="hljs-type">static</span> classTypePool&amp; <span class="hljs-title">objM</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">static</span> classTypePool oTpool;<br><span class="hljs-keyword">return</span> oTpool;<br>&#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 模板函数实现 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> oType, <span class="hljs-type">size_t</span> oNum&gt;<br><span class="hljs-keyword">inline</span> objectPool&lt;oType, oNum&gt;::<span class="hljs-built_in">objectPool</span>()<br>&#123;<br>_oNum = oNum;<br><span class="hljs-built_in">initoPool</span>();<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> oType, <span class="hljs-type">size_t</span> oNum&gt;<br><span class="hljs-keyword">inline</span> objectPool&lt;oType, oNum&gt;::~<span class="hljs-built_in">objectPool</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (_oBuf)<br>&#123;<br><span class="hljs-built_in">free</span>(_oBuf);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> oType, <span class="hljs-type">size_t</span> _oNum&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span>* objectPool&lt;oType, _oNum&gt;::<span class="hljs-built_in">obj_alloc</span>(<span class="hljs-type">size_t</span> len)<br>&#123;<br><span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">olock</span><span class="hljs-params">(_omutex)</span></span>;<br><span class="hljs-keyword">if</span> (_oBuf == <span class="hljs-literal">nullptr</span>)<br>&#123;<br><span class="hljs-built_in">initoPool</span>();<br>&#125;<br><br>object* newobj = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">if</span> (_headobj == <span class="hljs-literal">nullptr</span>)<br>&#123;<br><span class="hljs-comment">// 对象池没空间 -&gt; 新开辟</span><br>newobj = (oType*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(oType) + <span class="hljs-built_in">sizeof</span>(object));<br>newobj-&gt;<span class="hljs-built_in">initobj</span>(<span class="hljs-literal">false</span>, <span class="hljs-literal">nullptr</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 对象池有空间 -&gt; 分配</span><br>newobj = _headobj;<br>_headobj = _headobj-&gt;_nextobj;<br>&#125;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">char</span>*)newobj + <span class="hljs-built_in">sizeof</span>(object);<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> oType, <span class="hljs-type">size_t</span> _oNum&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> objectPool&lt;oType, _oNum&gt;::<span class="hljs-built_in">obj_free</span>(<span class="hljs-type">void</span>* pbuf)<br>&#123;<br>object* freeobj = (object*)(pbuf - <span class="hljs-built_in">sizeof</span>(object));<br><span class="hljs-keyword">if</span> (freeobj-&gt;_inPool)<br>&#123;<br><span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">olock</span><span class="hljs-params">(_omutex)</span></span>;<br>freeobj-&gt;_nextobj = _headobj;<br>_headobj = freeobj;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">free</span>(freeobj);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> oType, <span class="hljs-type">size_t</span> oNum&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> objectPool&lt;oType, oNum&gt;::<span class="hljs-built_in">initoPool</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (_oBuf)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 计算对象块大小</span><br><span class="hljs-type">size_t</span> realSize = <span class="hljs-built_in">sizeof</span>(object) + <span class="hljs-built_in">sizeof</span>(oType);<br>_oBuf = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(realSize * _oNum);<br><span class="hljs-comment">// 初始化对象节点</span><br>_headobj = (object*)_oBuf;<br>_headobj-&gt;<span class="hljs-built_in">initobj</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">nullptr</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; _oNum; ++i)<br>&#123;<br>object* newobj = (object*)(_oBuf + i * realSize);<br>newobj-&gt;<span class="hljs-built_in">initobj</span>(<span class="hljs-literal">true</span>, _headobj);<br>_headobj = newobj;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 使用举例</span><br><span class="hljs-comment">// class nameA : public objMgr&lt;nameA, 100&gt; 创建一个nameA类的对象池</span><br></code></pre></td></tr></table></figure><p>使用对象池只需要在main函数文件<code>include &quot;objectPool.h&quot;</code>，并通过继承<code>objMgr&lt;class, num&gt;</code>来使用</p><h3 id="3-3、智能指针"><a href="#3-3、智能指针" class="headerlink" title="3.3、智能指针"></a>3.3、智能指针</h3><p>将需要频繁开辟和释放的 发送任务 和 客户端对象 利用智能指针来进行管理，避免内存泄漏</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 系统管理的共享智能指针</span><br>std::shared_ptr&lt;Type&gt; TypePtr = std::<span class="hljs-built_in">make_shared</span>&lt;Type&gt;();<br><br><span class="hljs-comment">// 为了兼容内存池和对象池，把make_shared 替换成使用 new</span><br><span class="hljs-keyword">typedef</span> std::shared_ptr&lt;Type&gt; TypePtr;<br><span class="hljs-function">TypePtr <span class="hljs-title">Typeobj</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Type())</span></span>;<br></code></pre></td></tr></table></figure><h1 id="性能瓶颈4：频繁打印输出"><a href="#性能瓶颈4：频繁打印输出" class="headerlink" title="性能瓶颈4：频繁打印输出"></a>性能瓶颈4：频繁打印输出</h1><p>修改：添加日志模块来分离输出到文件或控制台</p><p><code>Tcphead.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- C++标准头文件 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;mutex&gt;</span></span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 自定义文件 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// socket 环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;NetEnv.h&quot;</span></span><br><span class="hljs-comment">// 消息结构</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MsgFmt.h&quot;</span></span><br><span class="hljs-comment">// 计时器</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HRTimer.h&quot;</span></span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 宏定义 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 接收缓冲区</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> RECV_BUFF_SIZE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RECV_BUFF_SIZE 10240</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">// !RECV_BUFF_SIZE</span></span><br><span class="hljs-comment">// 发送缓冲区</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SEND_BUFF_SIZE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_BUFF_SIZE 10240<span class="hljs-comment">// 发送定量</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_BUFF_TIME 200<span class="hljs-comment">// 发送定时</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">// !SEND_BUFF_SIZE</span></span><br><span class="hljs-comment">// 心跳检测时长</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> HEART_DEAD_TIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HEART_DEAD_TIME 60000<span class="hljs-comment">// 60s</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">// !HEART_DEAD_TIME</span></span><br><span class="hljs-comment">// 日志地址长度</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LOG_PATH_LEN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG_PATH_LEN 64</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">// !LOG_PATH_LEN</span></span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 类和智能指针声明 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 客户端信息</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientData</span>;<br><span class="hljs-keyword">typedef</span> std::shared_ptr&lt;ClientData&gt; ClientPtr;<br><span class="hljs-comment">// 日志任务</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTask</span>;<br><span class="hljs-keyword">typedef</span> std::shared_ptr&lt;LogTask&gt; LogTaskPtr;<br><span class="hljs-comment">// 发送任务</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sTask</span>;<br><span class="hljs-keyword">typedef</span> std::shared_ptr&lt;sTask&gt; sTaskPtr;<br><br></code></pre></td></tr></table></figure><p><code>LogMgr.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Tcphead.h&quot;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 日志管理类 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 日志级别</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Level</span> &#123;<br>LEVEL_INFO,<br>LEVEL_WARN,<br>LEVEL_DEBUG,<br>LEVEL_ERROR,<br>LEVEL_FATAL,<br>&#125;;<br><br><span class="hljs-comment">// 日志信息</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogInfo</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LogInfo</span>(Level level, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* data);<br>~<span class="hljs-built_in">LogInfo</span>() &#123;&#125;<br><span class="hljs-comment">// 日志级别</span><br>Level _level;<br><span class="hljs-comment">// 日志内容</span><br><span class="hljs-type">char</span> _data[<span class="hljs-number">256</span>];<br>&#125;;<br><br><span class="hljs-comment">// 日志任务</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTask</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LogTask</span>(tm tnow, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* path, LogInfo* loginfo);<br>~<span class="hljs-built_in">LogTask</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 执行任务</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doTask</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 时间节点</span><br>tm _tnow;<br><span class="hljs-comment">// 日志级别</span><br>Level _level;<br><span class="hljs-comment">// 日志地址</span><br><span class="hljs-type">char</span> _path[LOG_PATH_LEN];<br><span class="hljs-comment">// 日志内容</span><br><span class="hljs-type">char</span> _data[<span class="hljs-number">256</span>];<br>&#125;;<br><br><span class="hljs-comment">// 日志器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Logger</span>();<br>~<span class="hljs-built_in">Logger</span>();<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 初始化日志输出位置</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitPath</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pINFO = <span class="hljs-string">&quot;../ServerLOG/LOG_INFO.txt&quot;</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pWARN = <span class="hljs-string">&quot;../ServerLOG/LOG_WARN.txt&quot;</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pDEBUG = <span class="hljs-string">&quot;../ServerLOG/LOG_DEBUG.txt&quot;</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pERROR = <span class="hljs-string">&quot;../ServerLOG/LOG_ERROR.txt&quot;</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pFATAL = <span class="hljs-string">&quot;../ServerLOG/LOG_FATAL.txt&quot;</span>)</span></span>;<br><span class="hljs-comment">// 清空对应级别的日志</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClearLevel</span><span class="hljs-params">(Level level)</span></span>;<br><span class="hljs-comment">// 清空所有日志</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClearAllLevel</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 添加任务日志</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addTask</span><span class="hljs-params">(LogInfo* loginfo)</span></span>;<br><span class="hljs-comment">// 处理日志任务</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mainRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 开启处理线程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 获取tm格式的当前时间</span><br><span class="hljs-function">tm <span class="hljs-title">getNowtm</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 输出流</span><br>std::ofstream _ofs;<br><span class="hljs-comment">// 各类日志存储地址</span><br><span class="hljs-type">char</span> _path_INFO[LOG_PATH_LEN];<br><span class="hljs-type">char</span> _path_WARN[LOG_PATH_LEN];<br><span class="hljs-type">char</span> _path_DEBUG[LOG_PATH_LEN];<br><span class="hljs-type">char</span> _path_ERROR[LOG_PATH_LEN];<br><span class="hljs-type">char</span> _path_FATAL[LOG_PATH_LEN];<br><span class="hljs-comment">// 日志任务</span><br>std::list&lt;LogTaskPtr&gt; _Tasks;<br><span class="hljs-comment">// 日志任务缓冲区</span><br>std::list&lt;LogTaskPtr&gt; _TaskBuf;<br><span class="hljs-comment">// 日志器运行标识</span><br><span class="hljs-type">bool</span> _isRun;<br><span class="hljs-comment">// 日志器结束标识</span><br><span class="hljs-type">bool</span> _isEnd;<br><span class="hljs-comment">// 线程安全锁</span><br>std::mutex _mutex;<br>&#125;;<br><br><br><span class="hljs-comment">// 日志管理器，可扩展多个日志器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogMgr</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">LogMgr</span>();<br>~<span class="hljs-built_in">LogMgr</span>();<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">static</span> LogMgr&amp; <span class="hljs-title">LogM</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">static</span> LogMgr Mgr;<br><span class="hljs-keyword">return</span> Mgr;<br>&#125;<br><span class="hljs-comment">// 启动日志器</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 添加任务日志</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">addTask</span><span class="hljs-params">(LogInfo* loginfo)</span></span>;<br><span class="hljs-comment">// 清空日志器</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">ClearAll</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 清除单个级别日志</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">ClearLevel</span><span class="hljs-params">(Level level)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 主日志器</span><br>Logger* _logger;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用日志系统只需<code>include &quot;LogMgr.h&quot;</code></p><p>在程序开始部分<code>logMgr::start()</code>启动日志器</p><p>可以使用<code>LogMgr::InitPath()</code>设置日志输出位置</p><p>在任意地方<code>LogMgr::addTask(new LogInfo(Level level, const char* pstr))</code> 添加日志任务</p><p>上面也可以把日志信息简化去掉，少了手动管理new和delete的LogInfo的过程</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ClientServer下</title>
    <link href="/2024/07/14/ClientServer%E4%B8%8B/"/>
    <url>/2024/07/14/ClientServer%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<p>C++高并发项目学习：5、处理粘包、少包；6、多线程；</p><span id="more"></span><h1 id="5-处理粘包、少包"><a href="#5-处理粘包、少包" class="headerlink" title="5 处理粘包、少包"></a>5 处理粘包、少包</h1><p>建立多个客户端连接来循环发送数据，提高数据吞吐量来验证粘包、少包现象</p><h4 id="5-1-Client-h"><a href="#5-1-Client-h" class="headerlink" title="5.1 Client.h"></a>5.1 <code>Client.h</code></h4><p>为每个客户端创建消息缓冲区</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">// c++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-comment">// 消息体头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClient</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">TcpClient</span>();<br>~<span class="hljs-built_in">TcpClient</span>();<br><br><span class="hljs-comment">// 创建socket</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InitSocket</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 连接服务器</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Connect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port)</span></span>;<br><span class="hljs-comment">// 发送消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SendData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RecvData</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 解析消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ParseData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 判断客户端是否运行</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isRun</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 客户端运行主程序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">MainRun</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 客户端socket</span><br>SOCKET _cSock;<br><span class="hljs-comment">// 消息缓冲区：用于组合和拆分接收到的消息</span><br><span class="hljs-type">char</span> _MsgBuf[RECV_BUFF_SIZE * <span class="hljs-number">10</span>];<br><span class="hljs-comment">// 消息缓冲区尾部索引</span><br><span class="hljs-type">int</span> _lastPos;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="5-2-Server-h"><a href="#5-2-Server-h" class="headerlink" title="5.2 Server.h"></a>5.2 <code>Server.h</code></h4><p>服务器不再只保存客户端socket，而是在堆上开辟每个客户端对应的消息类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">// c++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">// 消息体头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientSock</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">ClientSock</span>(SOCKET sock);<br>~<span class="hljs-built_in">ClientSock</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 获取客户端socket接口</span><br><span class="hljs-function">SOCKET <span class="hljs-title">getSocket</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 获取客户端消息缓冲区接口</span><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">getMsgBuf</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 获取消息缓冲区长度和更新缓冲区长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getlastPos</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setlastPos</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">const</span> SOCKET _cSock;<br><span class="hljs-comment">// 客户端消息缓冲区：用于分别处理每一个客户端的消息</span><br><span class="hljs-type">char</span> _MsgBuf[RECV_BUFF_SIZE * <span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> _lastPos;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpServer</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">TcpServer</span>();<br>~<span class="hljs-built_in">TcpServer</span>();<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 创建socket</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InitSocket</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 绑定端口</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Bind</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port)</span></span>;<br><span class="hljs-comment">// 监听端口</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Listen</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>;<br><span class="hljs-comment">// 接受客户端连接</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Accept</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 发送消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SendData</span><span class="hljs-params">(SOCKET cSock, DataHeader* header)</span></span>;<br><span class="hljs-comment">// 群发消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SendToAll</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RecvData</span><span class="hljs-params">(ClientSock* Client)</span></span>;<br><span class="hljs-comment">// 解析消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ParseData</span><span class="hljs-params">(SOCKET cSock, DataHeader* header)</span></span>;<br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 判断客户端是否运行</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isRun</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 客户端运行主程序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">MainRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>SOCKET _sSock;<br><span class="hljs-comment">// 必须使用客户端指针数组，栈空间不够分配这么多消息缓冲区，需要在堆区开辟空间</span><br>std::vector&lt;ClientSock*&gt; _sClients;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="5-3-关键修改"><a href="#5-3-关键修改" class="headerlink" title="5.3 关键修改"></a>5.3 关键修改</h3><h5 id="Server-cpp"><a href="#Server-cpp" class="headerlink" title="Server.cpp"></a><code>Server.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Server.h&quot;</span></span><br><br>ClientSock::<span class="hljs-built_in">ClientSock</span>(SOCKET sock):_cSock(sock)<br>&#123;<br><span class="hljs-built_in">memset</span>(_MsgBuf, <span class="hljs-number">0</span>, RECV_BUFF_SIZE * <span class="hljs-number">10</span>);<br>_lastPos = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">SOCKET <span class="hljs-title">ClientSock::getSocket</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _cSock;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">ClientSock::getMsgBuf</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _MsgBuf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientSock::getlastPos</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _lastPos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClientSock::setlastPos</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>_lastPos = pos;<br>&#125;<br><br>TcpServer::<span class="hljs-built_in">TcpServer</span>()<br>&#123;<br>_sSock = INVALID_SOCKET;<br>_sClients.<span class="hljs-built_in">clear</span>();<br>&#125;<br><br>TcpServer::~<span class="hljs-built_in">TcpServer</span>()<br>&#123;<br><span class="hljs-built_in">Close</span>();<br>&#125;<br><br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-comment">// 接收缓冲区 -&gt; 消息缓冲区， 组合和拆分数据来解决粘包和少包问题</span><br><span class="hljs-type">char</span> recvBuf[RECV_BUFF_SIZE] = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::RecvData</span><span class="hljs-params">(ClientSock* Client)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> recvlen = <span class="hljs-built_in">recv</span>(Client-&gt;<span class="hljs-built_in">getSocket</span>(), recvBuf, RECV_BUFF_SIZE, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (recvlen &lt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (recvlen == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;&lt;socket=&quot;</span> &lt;&lt; Client-&gt;<span class="hljs-built_in">getSocket</span>() &lt;&lt; <span class="hljs-string">&quot;&gt; client out connect ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 接收到的信息 -&gt; 消息缓冲区，进行数据组合和拆分</span><br><span class="hljs-built_in">memcpy</span>(Client-&gt;<span class="hljs-built_in">getMsgBuf</span>(), recvBuf, recvlen);<br>Client-&gt;<span class="hljs-built_in">setlastPos</span>(Client-&gt;<span class="hljs-built_in">getlastPos</span>() + recvlen);<br><span class="hljs-comment">// 数据头解析  // while 循环解析多条数据，太多的情况下需要使用多线程</span><br><span class="hljs-keyword">while</span> (Client-&gt;<span class="hljs-built_in">getlastPos</span>() &gt;= <span class="hljs-built_in">sizeof</span>(DataHeader))<br>&#123;<br>DataHeader* header = (DataHeader*)Client-&gt;<span class="hljs-built_in">getMsgBuf</span>();<br><span class="hljs-comment">// 数据体解析</span><br><span class="hljs-keyword">if</span> (Client-&gt;<span class="hljs-built_in">getlastPos</span>() &gt;= header-&gt;_Length)<br>&#123;<br><span class="hljs-comment">// 从消息缓冲区解析消息并更新消息缓冲区</span><br><span class="hljs-type">int</span> pos = Client-&gt;<span class="hljs-built_in">getlastPos</span>() - header-&gt;_Length;<br><span class="hljs-built_in">ParseData</span>(Client-&gt;<span class="hljs-built_in">getSocket</span>(), header);<br><span class="hljs-built_in">memcpy</span>(Client-&gt;<span class="hljs-built_in">getMsgBuf</span>(), Client-&gt;<span class="hljs-built_in">getMsgBuf</span>() + header-&gt;_Length, pos);<br>Client-&gt;<span class="hljs-built_in">setlastPos</span>(pos);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Client-cpp"><a href="#Client-cpp" class="headerlink" title="Client.cpp"></a><code>Client.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Client.h&quot;</span></span><br><br>TcpClient::<span class="hljs-built_in">TcpClient</span>()<br>&#123;<br>_cSock = INVALID_SOCKET;<br><span class="hljs-built_in">memset</span>(_MsgBuf, <span class="hljs-number">0</span>, RECV_BUFF_SIZE * <span class="hljs-number">10</span>);<br>_lastPos = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 处理粘包、少包问题，通过 接收缓冲区 -&gt; 消息缓冲区 二级缓冲区来组合拆分数据</span><br><span class="hljs-comment">// 接收缓冲区：接收数据</span><br><span class="hljs-type">char</span> recvBuf[RECV_BUFF_SIZE] = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpClient::RecvData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 接收数据</span><br><span class="hljs-type">int</span> recvlen = <span class="hljs-built_in">recv</span>(_cSock, recvBuf, RECV_BUFF_SIZE, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (recvlen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;server off connect ...&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 将接收的数据拼接到消息缓冲区</span><br><span class="hljs-built_in">memcpy</span>(_MsgBuf + _lastPos, recvBuf, recvlen);<br>_lastPos += recvlen;<br><span class="hljs-comment">// 判断消息长度是否满足完整的数据头， while循环解析数据，数据量大时较慢，后续改为多线程</span><br><span class="hljs-keyword">while</span> (_lastPos &gt;= <span class="hljs-built_in">sizeof</span>(DataHeader)) &#123;<br><span class="hljs-comment">// 消息转化获取数据体长度</span><br>DataHeader* header = (DataHeader*)_MsgBuf;<br><span class="hljs-comment">// 判断消息长度是否满足完整的数据体</span><br><span class="hljs-keyword">if</span> (_lastPos &gt;= header-&gt;_Length) &#123;<br><span class="hljs-comment">// 记录剩余长度</span><br><span class="hljs-type">int</span> pos = _lastPos - header-&gt;_Length;<br><span class="hljs-comment">// 解析数据</span><br><span class="hljs-built_in">ParseData</span>(header);<br><span class="hljs-comment">// 将消息缓冲区中内容前移，覆盖已处理数据</span><br><span class="hljs-built_in">memcpy</span>(_MsgBuf, _MsgBuf + header-&gt;_Length, pos); <br><span class="hljs-comment">// 修改</span><br>_lastPos = pos;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-Linux-编译"><a href="#5-3-Linux-编译" class="headerlink" title="5.3 Linux 编译"></a>5.3 Linux 编译</h3><h5 id="5-3-1-CMakeLists-txt"><a href="#5-3-1-CMakeLists-txt" class="headerlink" title="5.3.1 CMakeLists.txt"></a>5.3.1 <code>CMakeLists.txt</code></h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(cs)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><br><span class="hljs-keyword">set</span>(HOME /home/用户目录/ClientServer)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HOME&#125;</span>/<span class="hljs-keyword">include</span>)<br><span class="hljs-keyword">file</span>(GLOB SRC_client <span class="hljs-variable">$&#123;HOME&#125;</span>/Client/*.cpp)<br><span class="hljs-keyword">file</span>(GLOB SRC_server <span class="hljs-variable">$&#123;HOME&#125;</span>/Server/*.cpp)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin)<br><br><span class="hljs-keyword">add_executable</span>(client <span class="hljs-variable">$&#123;SRC_client&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(client pthread)<br><span class="hljs-keyword">add_executable</span>(server <span class="hljs-variable">$&#123;SRC_server&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(server pthread)<br></code></pre></td></tr></table></figure><h5 id="5-3-2-执行CMake"><a href="#5-3-2-执行CMake" class="headerlink" title="5.3.2 执行CMake"></a>5.3.2 执行<code>CMake</code></h5><p><img src="/./ClientServer%E4%B8%AD/image-20240715184640654.png"></p><p><img src="/./ClientServer%E4%B8%AD/image-20240715184802780.png"></p><h3 id="5-4-极限测试"><a href="#5-4-极限测试" class="headerlink" title="5.4 极限测试"></a>5.4 极限测试</h3><h5 id="5-4-1-修改windows下的select限制，-在-include前定义宏"><a href="#5-4-1-修改windows下的select限制，-在-include前定义宏" class="headerlink" title="5.4.1 修改windows下的select限制， 在#include&lt;windows.h&gt;前定义宏"></a>5.4.1 修改windows下的select限制， 在<code>#include&lt;windows.h&gt;</code>前定义宏</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> FD_SETSIZE 1024<span class="hljs-comment">//设置select最大连接数为1024，同linux</span></span><br></code></pre></td></tr></table></figure><h5 id="5-4-2-定义高精度计数器-CELLTimesTamp-h"><a href="#5-4-2-定义高精度计数器-CELLTimesTamp-h" class="headerlink" title="5.4.2 定义高精度计数器 CELLTimesTamp.h"></a>5.4.2 定义高精度计数器 <code>CELLTimesTamp.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">// C++11 高精度计时器</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CELLTimestamp</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CELLTimestamp</span>()<br>&#123;<br><span class="hljs-built_in">update</span>();<br>&#125;<br>~<span class="hljs-built_in">CELLTimestamp</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*更新计时器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>_begin = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*获取秒</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">getElapseSecond</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getElapsedTimeInMicroSec</span>() * <span class="hljs-number">0.000001</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*获取毫秒</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getElapseTimeInMilliSec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getElapsedTimeInMicroSec</span>() * <span class="hljs-number">0.001</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*获取微秒</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">getElapsedTimeInMicroSec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>() - _begin).<span class="hljs-built_in">count</span>();<br>&#125;<br><span class="hljs-keyword">protected</span>:<br>std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; _begin;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="5-4-3-在服务器解析数据处进行计数"><a href="#5-4-3-在服务器解析数据处进行计数" class="headerlink" title="5.4.3 在服务器解析数据处进行计数"></a>5.4.3 在服务器解析数据处进行计数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 解析消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::ParseData</span><span class="hljs-params">(SOCKET cSock, DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 统计解包数量</span><br>++_recvCount;<br><span class="hljs-type">double</span> tim = _tTime.<span class="hljs-built_in">getElapseSecond</span>();<br><span class="hljs-comment">// 按秒统计</span><br>    <span class="hljs-keyword">if</span> (tim &gt;= <span class="hljs-number">1.0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;time:&lt;&quot;</span> &lt;&lt; tim &lt;&lt; <span class="hljs-string">&quot;&gt;,  clients:&lt;&quot;</span> &lt;&lt; _sClients.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&quot;&gt;, recvCount:&lt;&quot;</span> &lt;&lt; _recvCount &lt;&lt; std::endl;<br>_recvCount = <span class="hljs-number">0</span>;<br>_tTime.<span class="hljs-built_in">update</span>();<br>&#125;<br><br><span class="hljs-keyword">switch</span> (header-&gt;_Cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br>Login* login = (Login*)header;<br>            <span class="hljs-comment">// 关闭打印，方便查看上面的计时和计数</span><br><span class="hljs-comment">//std::cout &lt;&lt; &quot;&lt;socket=&quot; &lt;&lt; cSock &lt;&lt; &quot;&gt; Command is LOGIN, username is &quot; &lt;&lt; login-&gt;_Username &lt;&lt; &quot;, password is &quot; &lt;&lt; login-&gt;_Password &lt;&lt; std::endl;</span><br>LoginResult loginRet = &#123;&#125;;<br><span class="hljs-built_in">SendData</span>(cSock, &amp;loginRet);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT:<br>&#123;<br>Logout* logout = (Logout*)header;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;&lt;socket=&quot;</span> &lt;&lt; cSock &lt;&lt; <span class="hljs-string">&quot;&gt; Command is LOGOUT, username is &quot;</span> &lt;&lt; logout-&gt;_Username &lt;&lt; std::endl;<br>LogoutResult logoutRet = &#123;&#125;;<br><span class="hljs-built_in">SendData</span>(cSock, &amp;logoutRet);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-4-4-在客户端主函数循环创建多个客户端来连接服务器"><a href="#5-4-4-在客户端主函数循环创建多个客户端来连接服务器" class="headerlink" title="5.4.4 在客户端主函数循环创建多个客户端来连接服务器"></a>5.4.4 在客户端主函数循环创建多个客户端来连接服务器</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Client.h&quot;</span></span><br><br><span class="hljs-type">bool</span> g_cRun = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// void CTask(TcpClient* client)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CTask</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> sendBuf[<span class="hljs-number">512</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>std::cin &gt;&gt; sendBuf;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(sendBuf, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>g_cRun = <span class="hljs-literal">false</span>;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client exit ...&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;unknow command ...&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">std::thread <span class="hljs-title">t1</span><span class="hljs-params">(CTask)</span></span>;<br>t1.<span class="hljs-built_in">detach</span>();<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> num = <span class="hljs-number">500</span>;<br>std::vector&lt;TcpClient*&gt; clients;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br><span class="hljs-keyword">if</span> (!g_cRun)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>TcpClient* client = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TcpClient</span>();<br>clients.<span class="hljs-built_in">emplace_back</span>(client);<br>client-&gt;<span class="hljs-built_in">InitSocket</span>();<br><br><span class="hljs-comment">// 服务器在windows运行</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>client-&gt;<span class="hljs-built_in">Connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>client-&gt;<span class="hljs-built_in">Connect</span>(<span class="hljs-string">&quot;192.168.200.1&quot;</span>, <span class="hljs-number">9999</span>); <span class="hljs-comment">// windows主机 相对于 linux虚拟机 的地址</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 服务器在linux运行</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">#ifdef _WIN32</span><br><span class="hljs-comment">client-&gt;Connect(&quot;192.168.200.128&quot;, 9999);</span><br><span class="hljs-comment">#else</span><br><span class="hljs-comment">client-&gt;Connect(&quot;127.0.0.1&quot;, 9999);// linux主机 相对于 windows主机 的地址</span><br><span class="hljs-comment">#endif</span><br><span class="hljs-comment">*/</span><br>&#125;<br><br>Login login = &#123;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> name[] = <span class="hljs-string">&quot;xiaohua&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> pwd[] = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-built_in">memcpy</span>(login._Username, name, <span class="hljs-built_in">sizeof</span>(name));<br><span class="hljs-built_in">memcpy</span>(login._Password, pwd, <span class="hljs-built_in">sizeof</span>(pwd));<br><br><span class="hljs-keyword">while</span> (g_cRun)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> client : clients)<br>&#123;<br>client-&gt;<span class="hljs-built_in">SendData</span>(&amp;login);<br>client-&gt;<span class="hljs-built_in">MainRun</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> client : clients)<br>&#123;<br><span class="hljs-keyword">delete</span> client;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-4-5-客户端数量对处理数据的影响实验"><a href="#5-4-5-客户端数量对处理数据的影响实验" class="headerlink" title="5.4.5 客户端数量对处理数据的影响实验"></a>5.4.5 客户端数量对处理数据的影响实验</h5><h6 id="实验1：同时开启200个客户端连接，每秒收包-6000-，网络传输速率-200M-s"><a href="#实验1：同时开启200个客户端连接，每秒收包-6000-，网络传输速率-200M-s" class="headerlink" title="实验1：同时开启200个客户端连接，每秒收包 6000+ ，网络传输速率 200M&#x2F;s"></a>实验1：同时开启200个客户端连接，每秒收包 6000+ ，网络传输速率 200M&#x2F;s</h6><p><img src="/./ClientServer%E4%B8%8B/image-20240715220457375.png"></p><h6 id="实验2-同时开启100个客户端连接，每秒收包-14000-，网络传输速率-450M-s"><a href="#实验2-同时开启100个客户端连接，每秒收包-14000-，网络传输速率-450M-s" class="headerlink" title="实验2: 同时开启100个客户端连接，每秒收包 14000+ ，网络传输速率 450M&#x2F;s"></a>实验2: 同时开启100个客户端连接，每秒收包 14000+ ，网络传输速率 450M&#x2F;s</h6><p><img src="/./ClientServer%E4%B8%8B/image-20240715220905937.png"></p><h6 id="实验3-同时开启50个客户端连接，每秒收包-19000-，网络传输速率-650M-s"><a href="#实验3-同时开启50个客户端连接，每秒收包-19000-，网络传输速率-650M-s" class="headerlink" title="实验3: 同时开启50个客户端连接，每秒收包 19000+ ，网络传输速率 650M&#x2F;s"></a>实验3: 同时开启50个客户端连接，每秒收包 19000+ ，网络传输速率 650M&#x2F;s</h6><p><img src="/./ClientServer%E4%B8%8B/image-20240715221441873.png"></p><h6 id="结论：再减少客户端速率变化不大，后续使用多线程优化"><a href="#结论：再减少客户端速率变化不大，后续使用多线程优化" class="headerlink" title="结论：再减少客户端速率变化不大，后续使用多线程优化"></a>结论：再减少客户端速率变化不大，后续使用多线程优化</h6><h6 id="原因：客户端较大时速率慢-–-处理信息中while循环拆包解包，和select循环查询可读缓冲区速率较慢"><a href="#原因：客户端较大时速率慢-–-处理信息中while循环拆包解包，和select循环查询可读缓冲区速率较慢" class="headerlink" title="原因：客户端较大时速率慢 – 处理信息中while循环拆包解包，和select循环查询可读缓冲区速率较慢"></a>原因：客户端较大时速率慢 – 处理信息中while循环拆包解包，和select循环查询可读缓冲区速率较慢</h6><h1 id="6-多线程"><a href="#6-多线程" class="headerlink" title="6 多线程"></a>6 多线程</h1><h3 id="6-1-C-11标准线程库-include"><a href="#6-1-C-11标准线程库-include" class="headerlink" title="6.1 C++11标准线程库#include&lt;thread&gt;"></a>6.1 C++11标准线程库<code>#include&lt;thread&gt;</code></h3><p>例子：<code>多线程</code>，<code>锁</code>，<code>原子操作</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">// 计时器</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;CELLTimestamp.h&quot;</span></span><br><br><span class="hljs-comment">// --- 多线程 ---</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span><span class="hljs-comment">// 多线程</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;mutex&gt;</span><span class="hljs-comment">// 锁，线程安全</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;atomic&gt;</span><span class="hljs-comment">// 原子操作，线程安全</span></span><br><span class="hljs-comment">// --------------</span><br><br><span class="hljs-comment">// 原子类型, 修改和读取是原子的，不可被其它线程干扰，消耗比加锁更少</span><br>std::atomic_int sum = <span class="hljs-number">0</span>;<br>std::mutex m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mTask</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>&#123;<br><span class="hljs-comment">// 创建自加锁， 退出作用域自解锁</span><br><span class="hljs-comment">// std::lock_guard&lt;std::mutex&gt; lgm(m);</span><br><span class="hljs-comment">// m.lock();</span><br><span class="hljs-comment">// 临界区 开始 --- </span><br>sum++;<br><span class="hljs-comment">// std::cout &lt;&lt; &quot;hello, other thread &quot; &lt;&lt; sum++ &lt;&lt; std::endl;</span><br><span class="hljs-comment">// 临界区 结束 --- </span><br><span class="hljs-comment">// m.unlock();</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>CELLTimestamp Timer;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> num = <span class="hljs-number">10</span>;<br><br>std::vector&lt;std::thread&gt; Threads;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i)<br>&#123;<br>Threads.<span class="hljs-built_in">emplace_back</span>(std::<span class="hljs-built_in">thread</span>(mTask, <span class="hljs-number">1000000</span>));<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; t : Threads)<br>&#123;<br>t.<span class="hljs-built_in">join</span>();<span class="hljs-comment">// 线程阻塞，主线程等待子线程结束后回收再进行</span><br><span class="hljs-comment">//t.detach();// 线程分离，主线程和子线程分别执行，主线程结束子线程也结束</span><br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;time: &quot;</span> &lt;&lt; Timer.<span class="hljs-built_in">getElapseSecond</span>() &lt;&lt; std::endl;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;hello, main thread &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-多线程改造客户端和服务器"><a href="#6-2-多线程改造客户端和服务器" class="headerlink" title="6.2 多线程改造客户端和服务器"></a>6.2 多线程改造客户端和服务器</h3><p>使用多线程改造服务器和客户端，并让客户端每次发10个包，速率加快</p><p><img src="/./ClientServer%E4%B8%8B/image-20240717181127797.png"></p><p><img src="/./ClientServer%E4%B8%8B/image-20240717180936835.png"></p><h3 id="6-3-头文件"><a href="#6-3-头文件" class="headerlink" title="6.3 头文件"></a>6.3 头文件</h3><h5 id="6-3-1-MsgHead-h"><a href="#6-3-1-MsgHead-h" class="headerlink" title="6.3.1 MsgHead.h"></a>6.3.1 <code>MsgHead.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WIN32_LEAN_AND_MEAN</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// Windows 平台 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FD_SETSIZE 1024</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">// Linux 平台 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_SOCKET SOCKET(~0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_ERROR -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RECV_BUFF_SIZE 10240</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  消息类别</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGOUT,<br>CMD_LOGOUT_RESULT,<br>CMD_NEW_USER,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  消息头</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-built_in">DataHeader</span>()<br>&#123;<br>_Cmd = CMD_ERROR;<br>_Length = <span class="hljs-built_in">sizeof</span>(DataHeader);<br>&#125;<br><span class="hljs-type">short</span> _Cmd;<br><span class="hljs-type">int</span> _Length;<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  消息体</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 登录消息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">Login</span>()<br>&#123;<br>_Cmd = CMD_LOGIN;<br>_Length = <span class="hljs-built_in">sizeof</span>(Login);<br>&#125;<br><span class="hljs-type">char</span> _Username[<span class="hljs-number">32</span>] = &#123;&#125;;<br><span class="hljs-type">char</span> _Password[<span class="hljs-number">32</span>] = &#123;&#125;;<br><span class="hljs-type">char</span> _data[<span class="hljs-number">30</span>] = &#123;&#125;; <span class="hljs-comment">// 补充让每个信息凑到100方便观察</span><br>&#125;;<br><span class="hljs-comment">// 登录结果消息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>_Cmd = CMD_LOGIN_RESULT;<br>_Length = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>&#125;<br><span class="hljs-type">char</span> _Result[<span class="hljs-number">32</span>] = &#123;&#125;;<br><span class="hljs-type">char</span> _data[<span class="hljs-number">62</span>] = &#123;&#125;; <span class="hljs-comment">// 补充让每个信息凑到100方便观察</span><br>&#125;;<br><span class="hljs-comment">// 登出消息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Logout</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">Logout</span>()<br>&#123;<br>_Cmd = CMD_LOGOUT;<br>_Length = <span class="hljs-built_in">sizeof</span>(Logout);<br>&#125;<br><span class="hljs-type">char</span> _Username[<span class="hljs-number">32</span>] = &#123;&#125;;<br><span class="hljs-type">char</span> _data[<span class="hljs-number">62</span>] = &#123;&#125;; <span class="hljs-comment">// 补充让每个信息凑到100方便观察</span><br>&#125;;<br><span class="hljs-comment">// 登出结果消息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LogoutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LogoutResult</span>()<br>&#123;<br>_Cmd = CMD_LOGOUT_RESULT;<br>_Length = <span class="hljs-built_in">sizeof</span>(LogoutResult);<br>&#125;<br><span class="hljs-type">char</span> _Result[<span class="hljs-number">32</span>] = &#123;&#125;;<br><span class="hljs-type">char</span> _data[<span class="hljs-number">62</span>] = &#123;&#125;; <span class="hljs-comment">// 补充让每个信息凑到100方便观察</span><br>&#125;;<br><span class="hljs-comment">// 新用户提醒消息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Newuser</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">Newuser</span>(SOCKET sock)<br>&#123;<br>_Cmd = CMD_NEW_USER;<br>_Length = <span class="hljs-built_in">sizeof</span>(Newuser);<br>_userSock = sock;<br>&#125;<br>SOCKET _userSock;<br><span class="hljs-type">char</span> _data[<span class="hljs-number">90</span>] = &#123;&#125;; <span class="hljs-comment">// 补充让每个信息凑到100方便观察</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h5 id="6-3-2-EfficientTimer-h"><a href="#6-3-2-EfficientTimer-h" class="headerlink" title="6.3.2 EfficientTimer.h"></a>6.3.2 <code>EfficientTimer.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">// C++11 高精度计时器</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EfficientTimer</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">EfficientTimer</span>() <br>&#123;<br><span class="hljs-comment">// 初始化时间节点</span><br><span class="hljs-built_in">updateTime</span>();<br>&#125;<br>~<span class="hljs-built_in">EfficientTimer</span>()&#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 更新时间节点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateTime</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>_begin = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>&#125;<br><span class="hljs-comment">// 获取秒</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getElapseSecond</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">getElapseMicroSecond</span>() * <span class="hljs-number">0.000001</span>;<br>&#125;<br><span class="hljs-comment">// 获取毫秒</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getElapseMilliSecond</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">getElapseMicroSecond</span>() * <span class="hljs-number">0.001</span>;<br>&#125;<br><span class="hljs-comment">// 获取微秒</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">getElapseMicroSecond</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>() - _begin).<span class="hljs-built_in">count</span>();<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 存储时钟起始时间节点</span><br>std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; _begin;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="6-3-3-server-h"><a href="#6-3-3-server-h" class="headerlink" title="6.3.3 server.h"></a>6.3.3 <code>server.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-comment">// 消息头</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br><span class="hljs-comment">// 计时器</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;EfficientTimer.h&quot;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 用户信息类 -----</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientData</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">ClientData</span>(SOCKET sock);<br>~<span class="hljs-built_in">ClientData</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 获取客户端socket</span><br><span class="hljs-function">SOCKET <span class="hljs-title">getSocket</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 获取消息缓冲区</span><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">getMsgBuf</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 获取消息缓冲区长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getlastPos</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 修改消息缓冲区长度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setlastPos</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span></span>;<br><span class="hljs-comment">// 发送给对应客户端消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SendData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 客户端 socket</span><br>SOCKET _cSock;<br><span class="hljs-comment">// 接收客户端数据的消息缓冲区，用于处理粘包，少包问题</span><br><span class="hljs-type">char</span> _MsgBuf[RECV_BUFF_SIZE * <span class="hljs-number">10</span>];<br><span class="hljs-comment">// 消息缓冲区长度</span><br><span class="hljs-type">int</span> _lastPos;<br>&#125;;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 操作事件抽象类 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskEvent</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">TaskEvent</span>() &#123;&#125;<br>~<span class="hljs-built_in">TaskEvent</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 客户端加入事件</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">JoinEvent</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 客户端离开事件</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">LeaveEvent</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 处理客户端请求的工作事件</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">RequestEvent</span><span class="hljs-params">(ClientData* pClient, DataHeader* header)</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 线程服务器类 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cellServer</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">cellServer</span>(SOCKET sock);<br>~<span class="hljs-built_in">cellServer</span>();<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 群发消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SendToAll</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RecvData</span><span class="hljs-params">(ClientData* pClient)</span></span>;<br><span class="hljs-comment">// 程序是否运行</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isRun</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 程序运行主程序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mainRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 添加客户端</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addClient</span><span class="hljs-params">(ClientData* pClient)</span></span>;<br><span class="hljs-comment">// 获取客户端数量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getClientNum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 启动线程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 设置操作事件实例对象</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setEvent</span><span class="hljs-params">(TaskEvent* event)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 服务器socket</span><br>SOCKET _sockfd;<br><span class="hljs-comment">// 运行中客户端的动态数组</span><br>std::vector &lt;ClientData*&gt; _Clients;<br><span class="hljs-comment">// 缓存新加入客户端的动态数组</span><br>std::vector&lt;ClientData*&gt; _ClientAddBuf;<br><span class="hljs-comment">// 保证线程安全的锁</span><br>std::mutex _mutex;<br><span class="hljs-comment">// 线程对象</span><br>std::thread _pthread;<br><span class="hljs-comment">// 操作事件实例对象</span><br>TaskEvent* _pEvent;<br><span class="hljs-comment">// 接收数据缓冲区</span><br><span class="hljs-type">char</span> _recvBuf[RECV_BUFF_SIZE];<br>&#125;;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 主服务器类 -----</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpServer</span> : <span class="hljs-keyword">public</span> TaskEvent<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">TcpServer</span>();<br>~<span class="hljs-built_in">TcpServer</span>();<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 初始化 socket</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InitSock</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 绑定端口</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Bind</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port)</span></span>;<br><span class="hljs-comment">// 监听端口</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Listen</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> pnum)</span></span>;<br><span class="hljs-comment">// 建立连接</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Accept</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 程序是否运行</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isRun</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 程序运行主程序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mainRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 启动线程服务器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">startThread</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> NUM_thread)</span></span>;<br><span class="hljs-comment">// 将客户端加入线程服务器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addClient</span><span class="hljs-params">(ClientData* pClient)</span></span>;<br><span class="hljs-comment">// 计算接收数据的速度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DataSpeed</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 客户端加入事件</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">JoinEvent</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 客户端离开事件</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">LeaveEvent</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 处理客户端请求的工作事件</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">RequestEvent</span><span class="hljs-params">(ClientData* pClient, DataHeader* header)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 服务器socket</span><br>SOCKET _sockfd;<br><span class="hljs-comment">// 连接的客户端总数，原子属性，保证线程安全</span><br>std::atomic_int _clientNum;<br><span class="hljs-comment">// 接收的消息总数，原子属性，保证线程安全</span><br>std::atomic_int _recvDataNum; <br><span class="hljs-comment">// 线程服务器数组</span><br>std::vector&lt;cellServer*&gt; _cellServers;<br><span class="hljs-comment">// 计时器</span><br>EfficientTimer _timer;<br><span class="hljs-comment">// 离开的客户端数量</span><br>std::atomic_int _exitNum;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="6-3-4-Client-h"><a href="#6-3-4-Client-h" class="headerlink" title="6.3.4 Client.h"></a>6.3.4 <code>Client.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClient</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">TcpClient</span>();<br>~<span class="hljs-built_in">TcpClient</span>();<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 创建socket</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InitSock</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 请求连接</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Connect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> port)</span></span>;<br><span class="hljs-comment">// 发送消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SendData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RecvData</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 解析消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ParseData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 是否运行</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isRun</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 运行主程序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mainRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 客户端socket</span><br>SOCKET _cSock;<br><span class="hljs-comment">// 是否连接标志</span><br><span class="hljs-type">bool</span> _isConnect;<br><span class="hljs-comment">// 一级接收缓冲区</span><br><span class="hljs-type">char</span> _recvBuf[RECV_BUFF_SIZE];<br><span class="hljs-comment">// 二级消息缓冲区</span><br><span class="hljs-type">char</span> _MsgBuf[RECV_BUFF_SIZE * <span class="hljs-number">10</span>];<br><span class="hljs-comment">// 消息缓冲区长度</span><br><span class="hljs-type">int</span> _lastPos;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="6-4-主函数"><a href="#6-4-主函数" class="headerlink" title="6.4 主函数"></a>6.4 主函数</h3><h5 id="6-4-1-Server-cpp"><a href="#6-4-1-Server-cpp" class="headerlink" title="6.4.1 Server.cpp"></a>6.4.1 <code>Server.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Server.h&quot;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  ----- 用户信息类 函数实现 -----</span><br><span class="hljs-comment">*/</span><br>ClientData::<span class="hljs-built_in">ClientData</span>(SOCKET sock)<br>&#123;<br>_cSock = sock;<br><span class="hljs-built_in">memset</span>(_MsgBuf, <span class="hljs-number">0</span>, RECV_BUFF_SIZE * <span class="hljs-number">10</span>);<br>_lastPos = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">SOCKET <span class="hljs-title">ClientData::getSocket</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _cSock;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">ClientData::getMsgBuf</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _MsgBuf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientData::getlastPos</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _lastPos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClientData::setlastPos</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>_lastPos = pos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClientData::SendData</span><span class="hljs-params">(DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (header)<br>&#123;<br><span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)header, header-&gt;_Length, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ----- 线程服务器类 函数实现 -----</span><br><span class="hljs-comment">*/</span><br>cellServer::<span class="hljs-built_in">cellServer</span>(SOCKET sock)<br>&#123;<br>_sockfd = sock;<br>_pEvent = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-built_in">memset</span>(_recvBuf, <span class="hljs-number">0</span>, RECV_BUFF_SIZE);<br>&#125;<br><br>cellServer::~<span class="hljs-built_in">cellServer</span>()<br>&#123;<br><span class="hljs-built_in">Close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cellServer::SendToAll</span><span class="hljs-params">(DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>() &amp;&amp; header)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)_Clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; --n)<br>&#123;<br>_Clients[n]-&gt;<span class="hljs-built_in">SendData</span>(header);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cellServer::RecvData</span><span class="hljs-params">(ClientData* pClient)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 接收数据到缓冲区</span><br><span class="hljs-type">int</span> recvlen = <span class="hljs-built_in">recv</span>(pClient-&gt;<span class="hljs-built_in">getSocket</span>(), _recvBuf, RECV_BUFF_SIZE, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (recvlen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//std::cout &lt;&lt; &quot;client off connect ...&quot; &lt;&lt; std::endl;</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 将缓冲区数据拷贝到客户端消息缓冲区</span><br><span class="hljs-built_in">memcpy</span>(pClient-&gt;<span class="hljs-built_in">getMsgBuf</span>() + pClient-&gt;<span class="hljs-built_in">getlastPos</span>(), _recvBuf, recvlen);<br>pClient-&gt;<span class="hljs-built_in">setlastPos</span>(pClient-&gt;<span class="hljs-built_in">getlastPos</span>() + recvlen);<br><span class="hljs-comment">// 判断缓冲区数据是否是完整消息头</span><br><span class="hljs-keyword">while</span> (pClient-&gt;<span class="hljs-built_in">getlastPos</span>() &gt;= <span class="hljs-built_in">sizeof</span>(DataHeader))<br>&#123;<br><span class="hljs-comment">// 获取消息体长度</span><br>DataHeader* header = (DataHeader*)pClient-&gt;<span class="hljs-built_in">getMsgBuf</span>();<br><span class="hljs-keyword">if</span> (pClient-&gt;<span class="hljs-built_in">getlastPos</span>() &gt;= header-&gt;_Length)<br>&#123;<br><span class="hljs-comment">// 保存剩余消息长度</span><br><span class="hljs-type">int</span> pos = pClient-&gt;<span class="hljs-built_in">getlastPos</span>() - header-&gt;_Length;<br><span class="hljs-comment">// 调用操作事件</span><br>_pEvent-&gt;<span class="hljs-built_in">RequestEvent</span>(pClient, header);<br><span class="hljs-comment">// 删除处理完的消息</span><br><span class="hljs-built_in">memcpy</span>(pClient-&gt;<span class="hljs-built_in">getMsgBuf</span>(), pClient-&gt;<span class="hljs-built_in">getMsgBuf</span>() + header-&gt;_Length, pos);<br><span class="hljs-comment">// 修改客户端消息缓冲区中数据长度</span><br>pClient-&gt;<span class="hljs-built_in">setlastPos</span>(pos);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cellServer::isRun</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _sockfd != INVALID_SOCKET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cellServer::mainRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 线程服务器持续处理任务</span><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isRun</span>())<br>&#123;<br><span class="hljs-comment">// 将缓存的客户端添加到运行中</span><br><span class="hljs-keyword">if</span> (!_ClientAddBuf.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">autolock</span><span class="hljs-params">(_mutex)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)_ClientAddBuf.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; --n)<br>&#123;<br>_Clients.<span class="hljs-built_in">emplace_back</span>(_ClientAddBuf[n]);<br>&#125;<br>_ClientAddBuf.<span class="hljs-built_in">clear</span>();<br>&#125;<br><br><span class="hljs-comment">// 为空就下次循环，不然select绑定空会返回错误</span><br><span class="hljs-keyword">if</span> (_Clients.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-comment">// 只处理可读请求</span><br>fd_set fdRead;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br>timeval tval = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-comment">// 监测运行的客户端</span><br><span class="hljs-type">int</span> maxfd = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)_Clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; --n)<br>&#123;<br><span class="hljs-built_in">FD_SET</span>(_Clients[n]-&gt;<span class="hljs-built_in">getSocket</span>(), &amp;fdRead);<br>maxfd = <span class="hljs-built_in">max</span>(maxfd, (<span class="hljs-type">int</span>)_Clients[n]-&gt;<span class="hljs-built_in">getSocket</span>());<br>&#125;<br><br><span class="hljs-comment">// select 读取请求</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(maxfd + <span class="hljs-number">1</span>, &amp;fdRead, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tval);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: select error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)_Clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; --n)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_Clients[n]-&gt;<span class="hljs-built_in">getSocket</span>(), &amp;fdRead))<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">RecvData</span>(_Clients[n]) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">auto</span> it = _Clients.<span class="hljs-built_in">begin</span>() + n;<br><span class="hljs-keyword">if</span> (it != _Clients.<span class="hljs-built_in">end</span>())<br>&#123;<br>_pEvent-&gt;<span class="hljs-built_in">LeaveEvent</span>();<br><span class="hljs-keyword">delete</span> _Clients[n];<br>_Clients.<span class="hljs-built_in">erase</span>(it);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cellServer::Close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 清空客户端队列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)_ClientAddBuf.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; --n)<br>&#123;<br><span class="hljs-keyword">delete</span> _ClientAddBuf[n];<br>_ClientAddBuf.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)_Clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; --n)<br>&#123;<br><span class="hljs-keyword">delete</span> _Clients[n];<br>_Clients.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br>_sockfd = INVALID_SOCKET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cellServer::addClient</span><span class="hljs-params">(ClientData* pClient)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">autolock</span><span class="hljs-params">(_mutex)</span></span>;<br>_ClientAddBuf.<span class="hljs-built_in">emplace_back</span>(pClient);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cellServer::getClientNum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(_Clients.<span class="hljs-built_in">size</span>() + _ClientAddBuf.<span class="hljs-built_in">size</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cellServer::start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>_pthread = std::<span class="hljs-built_in">thread</span>(&amp;cellServer::mainRun, <span class="hljs-keyword">this</span>);<br>_pthread.<span class="hljs-built_in">detach</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cellServer::setEvent</span><span class="hljs-params">(TaskEvent* event)</span></span><br><span class="hljs-function"></span>&#123;<br>_pEvent = event;<br>&#125;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  ----- 主服务器类 函数实现 -----</span><br><span class="hljs-comment">*/</span><br>TcpServer::<span class="hljs-built_in">TcpServer</span>()<br>&#123;<br>_sockfd = INVALID_SOCKET;<br>&#125;<br><br>TcpServer::~<span class="hljs-built_in">TcpServer</span>()<br>&#123;<br>_sockfd = INVALID_SOCKET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::InitSock</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 开启Windows平台socket环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>WORD wr = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat = &#123;&#125;;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(wr, &amp;dat) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// 判断是否有旧连接</span><br><span class="hljs-keyword">if</span> (_sockfd != INVALID_SOCKET)<br>&#123;<br><span class="hljs-comment">// 关闭旧连接</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_sockfd);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_sockfd);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>_sockfd = INVALID_SOCKET;<br>&#125;<br><span class="hljs-comment">// 创建 socket 文件描述符</span><br>_sockfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 判断创建是否成功</span><br><span class="hljs-keyword">if</span> (_sockfd == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: create new socket error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;create new socket succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::Bind</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 判断 socket 是否有效</span><br><span class="hljs-keyword">if</span> (_sockfd == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: invalid socket can not bind port ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 创建地址和端口结构体</span><br>sockaddr_in saddr = &#123;&#125;;<br>saddr.sin_family = AF_INET;<br>saddr.sin_port = <span class="hljs-built_in">htons</span>(port);<br><span class="hljs-comment">// 是否使用默认ip</span><br><span class="hljs-keyword">if</span> (ip) <br>&#123;<br><span class="hljs-comment">// 设置IP地址</span><br><span class="hljs-built_in">inet_pton</span>(AF_INET, ip, &amp;saddr.sin_addr);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 默认IP地址</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>saddr.sin_addr.S_un.S_addr = INADDR_ANY;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> </span><br>saddr.sin_addr.s_addr = INADDR_ANY;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><span class="hljs-comment">// 绑定端口和地址</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sockfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;saddr, <span class="hljs-built_in">sizeof</span>(saddr)))<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: bind port &quot;</span> &lt;&lt; port &lt;&lt; <span class="hljs-string">&quot; error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind port &quot;</span> &lt;&lt; port &lt;&lt; <span class="hljs-string">&quot; succeed ,,,&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::Listen</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> pnum)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 判断 socket 是否有效</span><br><span class="hljs-keyword">if</span> (_sockfd == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: invalid socket can not listen port ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 设置监听端口</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sockfd, pnum)) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: listen port error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;listen port succeed ,,,&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::Accept</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 判断 socket 是否有效</span><br><span class="hljs-keyword">if</span> (_sockfd == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: invalid socket can not accept connect ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 创建接收用户信息的结构体</span><br>sockaddr_in caddr = &#123;&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-type">int</span> clen = <span class="hljs-built_in">sizeof</span>(caddr);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> </span><br><span class="hljs-type">addrlen_t</span> clen = <span class="hljs-built_in">sizeof</span>(caddr);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// 建立连接</span><br>SOCKET cSock = INVALID_SOCKET;<br>cSock = <span class="hljs-built_in">accept</span>(_sockfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;caddr, &amp;clen);<br><span class="hljs-keyword">if</span> (cSock == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: connect client error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 解析用户消息</span><br><span class="hljs-type">char</span> ip[<span class="hljs-number">32</span>];<br><span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;caddr.sin_addr, ip, <span class="hljs-built_in">sizeof</span>(ip));<br><span class="hljs-comment">//std::cout &lt;&lt; &quot;New client &lt;socket=&quot; &lt;&lt; cSock &lt;&lt; &quot;&gt; connect succeed, ip = &quot; &lt;&lt; ip &lt;&lt; &quot;, port = &quot; &lt;&lt; caddr.sin_port &lt;&lt; std::endl;</span><br><br><span class="hljs-comment">// 将新用户添加到连接最少的线程服务器</span><br><span class="hljs-built_in">addClient</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">ClientData</span>(cSock));<br><span class="hljs-comment">// 触发新用户加入事件</span><br><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">JoinEvent</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpServer::isRun</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _sockfd != INVALID_SOCKET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::mainRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>())<br>&#123;<br><span class="hljs-comment">// 创建select变量</span><br>fd_set fdRead;<br>fd_set fdWrite;<br>fd_set fdExp;<br><span class="hljs-comment">// 清空读，写，异常缓冲区</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdWrite);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdExp);<br><span class="hljs-comment">// 绑定监听服务器socket</span><br><span class="hljs-built_in">FD_SET</span>(_sockfd, &amp;fdRead);<br><span class="hljs-built_in">FD_SET</span>(_sockfd, &amp;fdWrite);<br><span class="hljs-built_in">FD_SET</span>(_sockfd, &amp;fdExp);<br><span class="hljs-comment">// select最大等待时间(秒，微秒)； 缓冲区有事件则立刻向下执行</span><br>timeval tval = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-comment">// select 模型 检测是否有事件</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>((<span class="hljs-type">int</span>)_sockfd + <span class="hljs-number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;tval);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: select error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断是否有连接请求</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sockfd, &amp;fdRead))<br>&#123;<br><span class="hljs-comment">// 处理请求</span><br><span class="hljs-built_in">FD_CLR</span>(_sockfd, &amp;fdRead);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Accept</span>() == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">DataSpeed</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::Close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 清空线程服务器数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)_cellServers.<span class="hljs-built_in">size</span>(); n &gt;= <span class="hljs-number">0</span>; --n)<br>&#123;<br><span class="hljs-keyword">delete</span> _cellServers[n];<br>_cellServers.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 关闭服务器socket</span><br><span class="hljs-keyword">if</span> (_sockfd != INVALID_SOCKET)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_sockfd);<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_sockfd);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>_sockfd = INVALID_SOCKET;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::startThread</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> NUM_thread)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM_thread; ++i)<br>&#123;<br><span class="hljs-keyword">auto</span> server = <span class="hljs-keyword">new</span> <span class="hljs-built_in">cellServer</span>(_sockfd);<br>_cellServers.<span class="hljs-built_in">emplace_back</span>(server);<br>server-&gt;<span class="hljs-built_in">setEvent</span>(<span class="hljs-keyword">this</span>);<br>server-&gt;<span class="hljs-built_in">start</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::addClient</span><span class="hljs-params">(ClientData *pClient)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> minServer = _cellServers[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; server : _cellServers)<br>&#123;<br><span class="hljs-keyword">if</span> (server-&gt;<span class="hljs-built_in">getClientNum</span>() &lt; minServer-&gt;<span class="hljs-built_in">getClientNum</span>())<br>&#123;<br>minServer = server;<br>&#125;<br>&#125;<br>minServer-&gt;<span class="hljs-built_in">addClient</span>(pClient);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::DataSpeed</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> tim = _timer.<span class="hljs-built_in">getElapseSecond</span>();<br><span class="hljs-keyword">if</span> (tim &gt;= <span class="hljs-number">1.0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;serverNum&lt;&quot;</span> &lt;&lt; _cellServers.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&quot;&gt;, clockTime&lt;&quot;</span> &lt;&lt; std::<span class="hljs-built_in">setiosflags</span>(std::ios::fixed) &lt;&lt; std::<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">6</span>) &lt;&lt; tim \<br>&lt;&lt; <span class="hljs-string">&quot;&gt;, clientNum&lt;&quot;</span> &lt;&lt; _clientNum &lt;&lt; <span class="hljs-string">&quot;&gt;, exitClientNum&lt;&quot;</span> &lt;&lt; _exitNum &lt;&lt; <span class="hljs-string">&quot;&gt;, DataSpeed&lt;&quot;</span> &lt;&lt; <span class="hljs-built_in">int</span>(_recvDataNum / tim) &lt;&lt; <span class="hljs-string">&quot; bit/s&gt;&quot;</span> &lt;&lt; std::endl;<br><br>_timer.<span class="hljs-built_in">updateTime</span>();<br>_recvDataNum = <span class="hljs-number">0</span>;<br>_exitNum = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::JoinEvent</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>_clientNum++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::LeaveEvent</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>_clientNum--;<br>_exitNum++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::RequestEvent</span><span class="hljs-params">(ClientData* pClient, DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br>_recvDataNum++;<br><span class="hljs-keyword">switch</span> (header-&gt;_Cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br>Login* login = (Login*)header;<br><span class="hljs-comment">//std::cout &lt;&lt; &quot;Recv &lt;socet=&quot; &lt;&lt; pClient-&gt;getSocket() &lt;&lt; &quot;&gt; command = LOGIN, username = &quot; &lt;&lt; login-&gt;_Username &lt;&lt; &quot;, password = &quot; &lt;&lt; login-&gt;_Password &lt;&lt; std::endl;</span><br>LoginResult loginRet = &#123;&#125;;<br><span class="hljs-type">char</span> result[] = <span class="hljs-string">&quot;login succeed&quot;</span>;<br><span class="hljs-built_in">memcpy</span>(loginRet._Result, result, <span class="hljs-built_in">sizeof</span>(result));<br>pClient-&gt;<span class="hljs-built_in">SendData</span>(&amp;loginRet);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT:<br>&#123;<br>Logout* logout = (Logout*)header;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv &lt;socet=&quot;</span> &lt;&lt; pClient-&gt;<span class="hljs-built_in">getSocket</span>() &lt;&lt; <span class="hljs-string">&quot;&gt; command = LOGOUT, username = &quot;</span> &lt;&lt; logout-&gt;_Username &lt;&lt; std::endl;<br>LogoutResult logoutRet = &#123;&#125;;<br><span class="hljs-type">char</span> result[] = <span class="hljs-string">&quot;logout succeed&quot;</span>;<br><span class="hljs-built_in">memcpy</span>(logoutRet._Result, result, <span class="hljs-built_in">sizeof</span>(result));<br>pClient-&gt;<span class="hljs-built_in">SendData</span>(&amp;logoutRet);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-4-2-Smain-cpp"><a href="#6-4-2-Smain-cpp" class="headerlink" title="6.4.2 Smain.cpp"></a>6.4.2 <code>Smain.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Server.h&quot;</span></span><br><br><span class="hljs-type">bool</span> g_sRun = <span class="hljs-literal">true</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cmdThread</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> _sendBuf[<span class="hljs-number">512</span>] = &#123;&#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>std::cin &gt;&gt; _sendBuf;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>g_sRun = <span class="hljs-literal">false</span>;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;server exit ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;unknow command ...&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">std::thread <span class="hljs-title">t1</span><span class="hljs-params">(&amp;cmdThread)</span></span>;<br>t1.<span class="hljs-built_in">detach</span>();<br><br>TcpServer server;<br>server.<span class="hljs-built_in">InitSock</span>();<br>server.<span class="hljs-built_in">Bind</span>(<span class="hljs-literal">nullptr</span>, <span class="hljs-number">9999</span>);<br>server.<span class="hljs-built_in">Listen</span>(<span class="hljs-number">8</span>);<br>server.<span class="hljs-built_in">startThread</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">while</span> (server.<span class="hljs-built_in">isRun</span>() &amp;&amp; g_sRun)<br>&#123;<br>server.<span class="hljs-built_in">mainRun</span>();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-4-3-Client-cpp"><a href="#6-4-3-Client-cpp" class="headerlink" title="6.4.3 Client.cpp"></a>6.4.3 <code>Client.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Client.h&quot;</span></span><br><br>TcpClient::<span class="hljs-built_in">TcpClient</span>()<br>&#123;<br>_cSock = INVALID_SOCKET;<br>_isConnect = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">memset</span>(_recvBuf, <span class="hljs-number">0</span>, RECV_BUFF_SIZE);<br><span class="hljs-built_in">memset</span>(_MsgBuf, <span class="hljs-number">0</span>, RECV_BUFF_SIZE * <span class="hljs-number">10</span>);<br>_lastPos = <span class="hljs-number">0</span>;<br>&#125;<br><br>TcpClient::~<span class="hljs-built_in">TcpClient</span>()<br>&#123;<br><span class="hljs-built_in">Close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpClient::InitSock</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 开启windows平台socket环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>WORD wr = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat = &#123;&#125;;<br><span class="hljs-type">int</span> wret = <span class="hljs-built_in">WSAStartup</span>(wr, &amp;dat);<br><span class="hljs-keyword">if</span> (wret != <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: WSAStartup error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// 判断是否有旧连接</span><br><span class="hljs-keyword">if</span> (_cSock != INVALID_SOCKET)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_cSock);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_cSock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>_cSock = INVALID_SOCKET;<br>&#125;<br><br><span class="hljs-comment">// 创建新socket</span><br>_cSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (_cSock == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: create new socket error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//std::cout &lt;&lt; &quot;create new &lt;socket=&quot; &lt;&lt; _cSock &lt;&lt; &quot;&gt; succeed ...&quot; &lt;&lt; std::endl;</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpClient::Connect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> port)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 判断socket是否创建成功</span><br><span class="hljs-keyword">if</span> (_cSock == INVALID_SOCKET)<br>&#123;<br><span class="hljs-built_in">InitSock</span>();<br>&#125;<br><span class="hljs-comment">// 创建地址端口变量</span><br>sockaddr_in caddr = &#123;&#125;;<br>caddr.sin_family = AF_INET;<br>caddr.sin_port = <span class="hljs-built_in">htons</span>(port);<br><span class="hljs-built_in">inet_pton</span>(AF_INET, ip, &amp;caddr.sin_addr);<br><span class="hljs-comment">// 请求连接</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">connect</span>(_cSock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;caddr, <span class="hljs-built_in">sizeof</span>(caddr))) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: &lt;socket=&quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="hljs-string">&quot;&gt; connect server error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//std::cout &lt;&lt; &quot;&lt;socket=&quot; &lt;&lt; _cSock &lt;&lt; &quot;&gt; connect server succeed ...&quot; &lt;&lt; std::endl;</span><br>_isConnect = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClient::SendData</span><span class="hljs-params">(DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>() &amp;&amp; header) <br>&#123;<br><span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)header, header-&gt;_Length, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpClient::RecvData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 接收数据</span><br><span class="hljs-type">int</span> recvlen = <span class="hljs-built_in">recv</span>(_cSock, _recvBuf, RECV_BUFF_SIZE, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (recvlen &lt;= <span class="hljs-number">0</span>) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;server off connect ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 组合拆分数据</span><br><span class="hljs-built_in">memcpy</span>(_MsgBuf + _lastPos, _recvBuf, recvlen);<br>_lastPos += recvlen;<br><span class="hljs-comment">// 判断消息缓冲区长度是否够一条消息</span><br><span class="hljs-keyword">while</span> (_lastPos &gt;= <span class="hljs-built_in">sizeof</span>(DataHeader)) <br>&#123;<br>DataHeader* header = (DataHeader*)_MsgBuf;<br><span class="hljs-keyword">if</span> (_lastPos &gt;= header-&gt;_Length)<br>&#123;<br><span class="hljs-comment">// 对数据拆分并解析</span><br><span class="hljs-type">int</span> pos = _lastPos - header-&gt;_Length;<br><span class="hljs-built_in">ParseData</span>(header);<br><span class="hljs-built_in">memcpy</span>(_MsgBuf, _MsgBuf + header-&gt;_Length, pos);<br>_lastPos = pos;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClient::ParseData</span><span class="hljs-params">(DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (header-&gt;_Cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN_RESULT:<br>&#123;<br>LoginResult* loginRet = (LoginResult*)header;<br><span class="hljs-comment">//std::cout &lt;&lt; &quot;Recv command = LOGIN_RESULT, result = &quot; &lt;&lt; loginRet-&gt;_Result &lt;&lt; std::endl;</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT_RESULT:<br>&#123;<br>LogoutResult* logoutRet = (LogoutResult*)header;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv command = LOGIN_RESULT, result = &quot;</span> &lt;&lt; logoutRet-&gt;_Result &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClient::Close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_cSock != INVALID_SOCKET)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_cSock);<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_cSock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>_cSock = INVALID_SOCKET;<br>&#125;<br>_isConnect = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpClient::isRun</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _cSock != INVALID_SOCKET &amp;&amp; _isConnect;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClient::mainRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>())<br>&#123;<br>fd_set fdRead;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-built_in">FD_SET</span>(_cSock, &amp;fdRead);<br>timeval tval = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>((<span class="hljs-type">int</span>)_cSock + <span class="hljs-number">1</span>, &amp;fdRead, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tval);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: select error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_cSock, &amp;fdRead))<br>&#123;<br><span class="hljs-built_in">FD_CLR</span>(_cSock, &amp;fdRead);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">RecvData</span>() == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">Close</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-4-4-Cmain-cpp"><a href="#6-4-4-Cmain-cpp" class="headerlink" title="6.4.4 Cmain.cpp"></a>6.4.4 <code>Cmain.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Client.h&quot;</span></span><br><br><span class="hljs-type">bool</span> g_cRun = <span class="hljs-literal">true</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cmdThread</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> sendBuf[<span class="hljs-number">512</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>std::cin &gt;&gt; sendBuf;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(sendBuf, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>g_cRun = <span class="hljs-literal">false</span>;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client exit ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;unknow command ...&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> tCount = <span class="hljs-number">4</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> cCount = <span class="hljs-number">1000</span>;<br>std::vector&lt;TcpClient*&gt; _Clients(cCount);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">startThread</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 分4个线程创建</span><br><span class="hljs-type">int</span> c = cCount / tCount;<br><span class="hljs-type">int</span> begin = c * (n - <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> end = c * n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = begin; i &lt; end; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> (!g_cRun) <span class="hljs-keyword">break</span>;<br>_Clients[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TcpClient</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>_Clients[i]-&gt;<span class="hljs-built_in">Connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>_Clients[i]-&gt;<span class="hljs-built_in">Connect</span>(<span class="hljs-string">&quot;192.168.200.1&quot;</span>, <span class="hljs-number">9999</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;create new client &quot;</span> &lt;&lt; begin &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; end &lt;&lt; <span class="hljs-string">&quot; succeed ... &quot;</span> &lt;&lt; std::endl;<br><span class="hljs-comment">// 稍微等待一会儿连接</span><br><span class="hljs-keyword">auto</span> tim = std::chrono::<span class="hljs-built_in">microseconds</span>(<span class="hljs-number">50</span>);<br>std::this_thread::<span class="hljs-built_in">sleep_for</span>(tim);<br><br><span class="hljs-comment">// 客户端线程工作</span><br><span class="hljs-type">char</span> name[] = <span class="hljs-string">&quot;xiaohua&quot;</span>;<br><span class="hljs-type">char</span> pwd[] = <span class="hljs-string">&quot;123456&quot;</span>;<br>Login login;<br><span class="hljs-built_in">memcpy</span>(login._Username, name, <span class="hljs-built_in">sizeof</span>(name));<br><span class="hljs-built_in">memcpy</span>(login._Password, pwd, <span class="hljs-built_in">sizeof</span>(pwd));<br><span class="hljs-keyword">while</span> (g_cRun) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = begin; i &lt; end; ++i)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; ++j) &#123;<br>_Clients[i]-&gt;<span class="hljs-built_in">SendData</span>(&amp;login);<br>&#125;<br>_Clients[i]-&gt;<span class="hljs-built_in">mainRun</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = begin; i &lt; end; ++i)<br>&#123;<br><span class="hljs-keyword">delete</span> _Clients[i];<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">std::thread <span class="hljs-title">t1</span><span class="hljs-params">(cmdThread)</span></span>;<br>t1.<span class="hljs-built_in">detach</span>();<br><br>std::vector&lt;std::thread&gt; tClients;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; tCount; ++i)<br>&#123;<br>tClients.<span class="hljs-built_in">emplace_back</span>(std::<span class="hljs-built_in">thread</span>(startThread, i + <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; tClient : tClients)<br>&#123;<br>tClient.<span class="hljs-built_in">join</span>();<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _WIN32</span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ClientServer上</title>
    <link href="/2024/07/02/ClientServer%E4%B8%8A/"/>
    <url>/2024/07/02/ClientServer%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<p>C++高并发项目学习：1、项目配置；2、简易C&#x2F;S通信；3、跨平台select；4、类封装</p><span id="more"></span><h1 id="1、项目配置"><a href="#1、项目配置" class="headerlink" title="1、项目配置"></a>1、项目配置</h1><h3 id="1-1-项目文件分类"><a href="#1-1-项目文件分类" class="headerlink" title="1.1 项目文件分类"></a>1.1 项目文件分类</h3><p>分开存储：将生成的可执行程序文件放在与项目同级的bin目录下，中间文件放在与项目同级的temp目录下</p><p>${SolutionDir} 解决方案地址，${Platform} 平台x64，${Configuration} 编译器，${ProjectName}项目名</p><p><img src="/./ClientServer%E4%B8%8A/image-20240702190038719.png"></p><p><img src="/./ClientServer%E4%B8%8A/image-20240702191701150.png"></p><h3 id="1-2-项目调试方法"><a href="#1-2-项目调试方法" class="headerlink" title="1.2 项目调试方法"></a>1.2 项目调试方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123; a = a + i; &#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1）打印数据调试"><a href="#1）打印数据调试" class="headerlink" title="1）打印数据调试"></a>1）打印数据调试</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123; a = a + i; &#125;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>) cout &lt;&lt; <span class="hljs-string">&quot;Debug: i==5, a = &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">//调试</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h5 id="2）普通断点和条件断点"><a href="#2）普通断点和条件断点" class="headerlink" title="2）普通断点和条件断点"></a>2）普通断点和条件断点</h5><p>在代码行设置断点，右键条件，设置筛选条件为 i&#x3D;&#x3D;5，在输出窗口输出调试结果Debug: a &#x3D; {a}。</p><p>{}里面是变量，$系统变量</p><p><img src="/./ClientServer%E4%B8%8A/image-20240702194426282.png"></p><p>i&#x3D;&#x3D;5时，断点该语句还没执行，所以a&#x3D;10</p><p><img src="/./ClientServer%E4%B8%8A/image-20240702195028250.png"></p><h5 id="3）Debug宏调试"><a href="#3）Debug宏调试" class="headerlink" title="3）Debug宏调试"></a>3）Debug宏调试</h5><p>宏选项为_DEBUG后，只有在Debug编译时才会执行，用Release时不会执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123; a = a + i; &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _DEBUG</span><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>) cout &lt;&lt; <span class="hljs-string">&quot;Debug: i==5, a = &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">//调试</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _DEBUG</span></span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h5 id="4）逐步调试和监视"><a href="#4）逐步调试和监视" class="headerlink" title="4）逐步调试和监视"></a>4）逐步调试和监视</h5><p>设置断点，运行程序，最下方监视窗口添加监视变量，逐步调试观察变量变化</p><p><img src="/./ClientServer%E4%B8%8A/image-20240702195622555.png"></p><h3 id="1-3-虚拟机下载配置"><a href="#1-3-虚拟机下载配置" class="headerlink" title="1.3 虚拟机下载配置"></a>1.3 虚拟机下载配置</h3><p>ubuntu下载</p><p>清华镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/22.04.4/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/22.04.4/</a></p><p>ubuntu配置</p><p>语言修改：Settings – Tegion &amp; language – Chinese &#x2F; English</p><p>权限修改：在<code>/etc/sudoers</code>系统文件中找到”root ALL&#x3D;(ALL) ALL”，在后面添加”username ALL&#x3D;(ALL) ALL”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs linux">sudo passwd root#设置超级管理员密码<br>su root#切换为超级管理员，提示输入密码Password:<br>sudo adduser 用户名#创建新用户<br>vi /etc/sudoers#为自己的用户添加权限<br>exit#退出超级管理员，用户可以进行sudo操作了<br></code></pre></td></tr></table></figure><p><img src="/./ClientServer%E4%B8%8A/image-20240702212421573.png"></p><p>常用插件：vim，ssh，g++</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs linux">sudo apt install vim// vim编辑器 <br>sudo apt install g++// c++编译<br>sudo apt install inet_tools// ifconfig命令库<br>sudo apt install ssh// 远程连接<br></code></pre></td></tr></table></figure><p>ssh远程链接Xshell进行办公：<a href="https://blog.csdn.net/m0_64655190/article/details/130569010">https://blog.csdn.net/m0_64655190/article/details/130569010</a></p><h1 id="2-简易的C-S的网络程序"><a href="#2-简易的C-S的网络程序" class="headerlink" title="2 简易的C&#x2F;S的网络程序"></a>2 简易的C&#x2F;S的网络程序</h1><p><img src="/./ClientServer%E4%B8%8A/image-20240703152227138.png"></p><h3 id="使用请求头和请求内容的结构体作为通信内容"><a href="#使用请求头和请求内容的结构体作为通信内容" class="headerlink" title="使用请求头和请求内容的结构体作为通信内容"></a>使用请求头和请求内容的结构体作为通信内容</h3><h3 id="2-1-结构体头文件MsgHead-h"><a href="#2-1-结构体头文件MsgHead-h" class="headerlink" title="2.1 结构体头文件MsgHead.h"></a>2.1 结构体头文件<code>MsgHead.h</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 指令</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span> &#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGOUT,<br>CMD_LOGOUT_RESULT,<br>CMD_ERROR<br>&#125;;<br><br><span class="hljs-comment">// 请求头</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span> &#123;<br><span class="hljs-type">short</span> m_CMD;<br><span class="hljs-type">short</span> m_Length;<br>&#125;;<br><br><span class="hljs-comment">// 请求内容 模拟登录和登出，不做有效性判断</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Login</span>() &#123;<br>m_CMD = CMD_LOGIN;<br>m_Length = <span class="hljs-built_in">sizeof</span>(Login);<br>&#125;<br><span class="hljs-type">char</span> m_Username[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> m_Password[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LoginResult</span>() &#123;<br>m_CMD = CMD_LOGIN_RESULT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>m_Result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Logout</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Logout</span>() &#123;<br>m_CMD = CMD_LOGOUT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(Logout);<br>&#125;<br><span class="hljs-type">char</span> m_Username[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LogoutResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LogoutResult</span>() &#123;<br>m_CMD = CMD_LOGOUT_RESULT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(LogoutResult);<br>m_Result = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Result;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-2-服务端和客户端头文件Server-h和Client-h"><a href="#2-2-服务端和客户端头文件Server-h和Client-h" class="headerlink" title="2.2 服务端和客户端头文件Server.h和Client.h"></a>2.2 服务端和客户端头文件<code>Server.h</code>和<code>Client.h</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">// 用于处理WinSock2.h 和 windows.h两个库函数的重复的宏，需要链接系统静态库ws2_32.lib使用</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><br><span class="hljs-comment">// Windows平台socket通信库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><br><span class="hljs-comment">// #pragma comment(lib, &quot;ws2_32.lib&quot;) Windows下引入静态库</span><br><span class="hljs-comment">// 跨平台：属性--链接器--输入--添加库依赖项--ws2_32.lib</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-comment">// C++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-meta">#incldue <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br></code></pre></td></tr></table></figure><h3 id="2-3-服务端程序Server-cpp"><a href="#2-3-服务端程序Server-cpp" class="headerlink" title="2.3 服务端程序Server.cpp"></a>2.3 服务端程序<code>Server.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Server.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// Windows下需要启动Socket网络环境</span><br>    <span class="hljs-comment">// MAKEWORD 将一个高位和一个低位字节进行合并：2^8+2 = 512+2 = 514，</span><br>    <span class="hljs-comment">// WORD为无符号整形，用于标识选择WinSock中的2.2版本协议</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>); <br>WSADATA dat;<br>    <span class="hljs-comment">// 启动socket网络环境</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br>    <br><span class="hljs-comment">// ------</span><br><span class="hljs-comment">// --用Socket API 建立简易TCP服务端</span><br>    <span class="hljs-comment">// ------</span><br><span class="hljs-comment">// 1、建立Socket</span><br>SOCKET _ServerScok = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><br><span class="hljs-comment">// 2、绑定端口bind</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br>_sin.sin_addr.S_un.S_addr = INADDR_ANY; <span class="hljs-comment">//使用默认IP</span><br><span class="hljs-comment">// inet_pton(AF_INET, &quot;127.0.0.1&quot;, &amp;_sin.sin_addr);//使用指定IP</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_ServerScok, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin))) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>    <br><span class="hljs-comment">// 3、监听端口listen</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_ServerScok, <span class="hljs-number">128</span>)) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;listen error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>    <br><span class="hljs-comment">// 4.建立连接</span><br>    sockaddr_in _caddr;<br>    <span class="hljs-type">int</span> _clen = <span class="hljs-built_in">sizeof</span>(_caddr);<br>    SOCKET _cSock = <span class="hljs-built_in">accept</span>(_sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_caddr, &amp;_clen);<br>    <span class="hljs-keyword">if</span> (_cSock == INVALID_SOCKET) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;accept error!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-type">char</span> ip[<span class="hljs-number">32</span>];<br>    <span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;_caddr.sin_addr, ip, <span class="hljs-built_in">sizeof</span>(ip));<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;New client connet, ip: &quot;</span> &lt;&lt; ip &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 5.收发消息recv, send</span><br>    <span class="hljs-type">char</span> _recvBuf[<span class="hljs-number">512</span>];<br>    <span class="hljs-type">char</span> _sendBuf[<span class="hljs-number">512</span>];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 接收请求头</span><br>        DataHeader header = &#123;&#125;;<br>        <span class="hljs-type">int</span> nlen = <span class="hljs-built_in">recv</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (nlen &lt;= <span class="hljs-number">0</span>) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Client out connect ...&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Command is &quot;</span> &lt;&lt; header.m_CMD &lt;&lt; <span class="hljs-string">&quot; , Length is &quot;</span> &lt;&lt; header.m_Length &lt;&lt; std::endl;<br>        <span class="hljs-comment">// 接收请求内容，因为前面请求头部分已经读取了sizeof(DataHeaeder)的数据，因此需要进行位偏移</span><br>        <span class="hljs-keyword">switch</span> (header.m_CMD) &#123;<br>            <span class="hljs-keyword">case</span> CMD_LOGIN:<br>                &#123;<br>                    <span class="hljs-comment">// 解析请求内容</span><br>                    Login login = &#123;&#125;;<br>                    <span class="hljs-built_in">recv</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;login + <span class="hljs-built_in">sizeof</span>(DataHeader), login.m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>                    std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Username is &quot;</span> &lt;&lt; login.m_Username &lt;&lt; <span class="hljs-string">&quot; , Password is &quot;</span> &lt;&lt; login.m_Password &lt;&lt; std::endl;<br>                    <span class="hljs-comment">// 返回请求结果</span><br>                    LoginResult loginRet;<br>                    <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;loginRet, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            <span class="hljs-keyword">case</span> CMD_LOGOUT:<br>                &#123;<br>                    <span class="hljs-comment">// 解析请求内容</span><br>                    Logout logout = &#123;&#125;;<br>                    <span class="hljs-built_in">recv</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;logout + <span class="hljs-built_in">sizeof</span>(DataHeader), logout.m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>                    std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Username is &quot;</span> &lt;&lt; logout.m_Username &lt;&lt; std::endl;<br>                    <span class="hljs-comment">// 返回请求结果</span><br>                    LogoutResult logoutRet;<br>                    <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;logoutRet, <span class="hljs-built_in">sizeof</span>(LogoutResult), <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            <span class="hljs-keyword">default</span>:<br>                &#123;<br>                    header.m_CMD = CMD_ERROR;<br>                    header.m_Length = <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(header), <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-comment">// 6、关闭Closesocket</span><br><span class="hljs-built_in">closesocket</span>(_ServerSock);<br><span class="hljs-comment">// ------</span><br>    <br>    <span class="hljs-comment">// 关闭socket网络环境</span><br><span class="hljs-built_in">WSACleanup</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-客户端程序Client-cpp"><a href="#2-4-客户端程序Client-cpp" class="headerlink" title="2.4 客户端程序Client.cpp"></a>2.4 客户端程序<code>Client.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Client.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br>    <span class="hljs-comment">// 启动socket网络环境</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br>    <br><span class="hljs-comment">// ------</span><br><span class="hljs-comment">// --用Socket API 建立简易TCP客户端</span><br><span class="hljs-comment">// ------</span><br><span class="hljs-comment">// 1、建立Socket</span><br>SOCKET _cSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 2、连接服务器connect</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br><span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;_sin.sin_addr);<br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">connect</span>(_cSock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in))) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connect error!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 3、收发信息recv, send</span><br>    <span class="hljs-type">char</span> _sendBuf[<span class="hljs-number">512</span>];<br>    <span class="hljs-type">char</span> _recvBuf[<span class="hljs-number">512</span>];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        std::cin &gt;&gt; _sendBuf;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;login&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 发送登录请求，因为char[]字符串默认为常量，需要用strcpy来进行赋值</span><br>            Login login = &#123;&#125;;<br>            <span class="hljs-built_in">strcpy_s</span>(login.m_Username, <span class="hljs-string">&quot;xiaohua&quot;</span>);<br>            <span class="hljs-built_in">strcpy_s</span>(login.m_Password, <span class="hljs-string">&quot;123456&quot;</span>);<br>            <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(Login), <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 接收请求结果</span><br>            <span class="hljs-built_in">recv</span>(_cSock, _recvBuf, <span class="hljs-built_in">sizeof</span>(_recvBuf), <span class="hljs-number">0</span>);<br>            LoginResult* loginRet = (LoginResult*)_recvBuf;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: LoginResult is &quot;</span> &lt;&lt; loginRet-&gt;m_Result &lt;&lt; <span class="hljs-string">&quot;, Length is &quot;</span> &lt;&lt; loginRet-&gt;m_Length &lt;&lt; std::endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;logout&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 发送登出请求</span><br>            Logout logout = &#123;&#125;;<br>            <span class="hljs-built_in">strcpy_s</span>(logout.m_Username, <span class="hljs-string">&quot;xiaohua&quot;</span>);<br>            <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(Logout), <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 接收请求结果</span><br>            <span class="hljs-built_in">recv</span>(_cSock, _recvBuf, <span class="hljs-built_in">sizeof</span>(_recvBuf), <span class="hljs-number">0</span>);<br>            LogoutResult* logoutRet = (LogoutResult*)_recvBuf;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: LogoutResult is &quot;</span> &lt;&lt; logoutRet-&gt;m_Result &lt;&lt; <span class="hljs-string">&quot;, Length is &quot;</span> &lt;&lt; logoutRet-&gt;m_Length &lt;&lt; std::endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <br>            DataHeader header = &#123; CMD_ERROR, <span class="hljs-number">0</span> &#125;;<br>            <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">recv</span>(_cSock, _recvBuf, <span class="hljs-built_in">sizeof</span>(_recvBuf), <span class="hljs-number">0</span>);<br>            DataHeader* recvheader = (DataHeader*)_recvBuf;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Command is error, length is &quot;</span> &lt;&lt; recvheader-&gt;m_Length &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 4、关闭Closesocket</span><br><span class="hljs-built_in">closesocket</span>(_cSock);<br><span class="hljs-comment">// ------</span><br>    <br><span class="hljs-built_in">WSACleanup</span>();<span class="hljs-comment">// 关闭socket网络环境</span><br><br>    <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//避免客户端exe启动后等待确认结束</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-跨平台Select并发C-S程序"><a href="#3-跨平台Select并发C-S程序" class="headerlink" title="3 跨平台Select并发C&#x2F;S程序"></a>3 跨平台Select并发C&#x2F;S程序</h1><h3 id="3-1-Select并发"><a href="#3-1-Select并发" class="headerlink" title="3.1 Select并发"></a>3.1 Select并发</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">select</span>(<span class="hljs-type">int</span> nfds, <span class="hljs-comment">// nfds表示socket集合最大范围，winsock2自主计算，直接置0即可</span><br>       fd_set *readfds, <span class="hljs-comment">// 可读的socket数量</span><br>       fd_set *writefds, <span class="hljs-comment">// 可写的socket数量</span><br>       fd_set *exceptfds, <span class="hljs-comment">// 异常的socket集合</span><br>       <span class="hljs-type">const</span> timeval *timeout);<span class="hljs-comment">// 最大阻塞时间， NULL表示一直阻塞</span><br><span class="hljs-comment">// 正常返回socket就绪的数量； 返回0：等待时间socket没事件； 返回SOCKET_ERROR：发生错误</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> FD_SETSIZE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FD_SETSIZE 64</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fd_set</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd_count;<br>    SOCKET fd_array[FD_SETSIZE];<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="将客户端移植到linux平台，访问Windows平台下的服务器，实现跨平台通信"><a href="#将客户端移植到linux平台，访问Windows平台下的服务器，实现跨平台通信" class="headerlink" title="将客户端移植到linux平台，访问Windows平台下的服务器，实现跨平台通信"></a>将客户端移植到linux平台，访问Windows平台下的服务器，实现跨平台通信</h6><h3 id="3-2-结构体头文件MsgHead-h"><a href="#3-2-结构体头文件MsgHead-h" class="headerlink" title="3.2 结构体头文件MsgHead.h"></a>3.2 结构体头文件<code>MsgHead.h</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 指令</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span> &#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGOUT,<br>CMD_LOGOUT_RESULT,<br>CMD_NEW_USER_JOIN,<br>CMD_ERROR<br>&#125;;<br><br><span class="hljs-comment">// 请求头</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span> &#123;<br><span class="hljs-type">short</span> m_CMD;<br><span class="hljs-type">short</span> m_Length;<br>&#125;;<br><br><span class="hljs-comment">// 请求内容 模拟登录和登出，不做有效性判断</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Login</span>() &#123;<br>m_CMD = CMD_LOGIN;<br>m_Length = <span class="hljs-built_in">sizeof</span>(Login);<br>&#125;<br><span class="hljs-type">char</span> m_Username[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> m_Password[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LoginResult</span>() &#123;<br>m_CMD = CMD_LOGIN_RESULT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>m_Result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Logout</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Logout</span>() &#123;<br>m_CMD = CMD_LOGOUT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(Logout);<br>&#125;<br><span class="hljs-type">char</span> m_Username[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LogoutResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LogoutResult</span>() &#123;<br>m_CMD = CMD_LOGOUT_RESULT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(LogoutResult);<br>m_Result = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Result;<br>&#125;;<br><span class="hljs-comment">//用于新用户加入时向其它用户通知的消息结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUserJoin</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">NewUserJoin</span>() &#123;<br>m_CMD = CMD_NEW_USER_JOIN;<br>m_Length = <span class="hljs-built_in">sizeof</span>(NewUserJoin);<br>m_Sock = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Sock;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-3-服务端"><a href="#3-3-服务端" class="headerlink" title="3.3 服务端"></a>3.3 服务端</h3><h5 id="3-3-1-Server-h"><a href="#3-3-1-Server-h" class="headerlink" title="3.3.1 Server.h"></a>3.3.1 <code>Server.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">// 用于避免windows.h 和 WinSock2 库的函数重复</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// windows平台 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-comment">// inet_pton: 将字符串转为addr地址 和 inet_ntop: 将addr地址转为字符串 的 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">// Linux 平台下 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_ERROR (SOCKET)(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// C++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">// 用于创建存储select客户端数组</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">// 结构体头文件</span><br><span class="hljs-meta">#incldue <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br><br><span class="hljs-comment">// select存储监视客户端的数组</span><br>std::vector&lt;SOCKET&gt; g_clients;<br><br><span class="hljs-comment">// 服务器工作函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ServerTask</span><span class="hljs-params">(SOCKET sock)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="3-3-2-Server-cpp"><a href="#3-3-2-Server-cpp" class="headerlink" title="3.3.2 Server.cpp"></a>3.3.2 <code>Server.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Server.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ServerTask</span><span class="hljs-params">(SOCKET sock)</span></span>&#123;<br><span class="hljs-comment">// 缓存数组</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;; <br><span class="hljs-type">int</span> nlen = <span class="hljs-built_in">recv</span>(sock, szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (nlen &lt;= <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Client out connect ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>    <span class="hljs-comment">// 解析请求头内容</span><br>DataHeader* header = (DataHeader*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Command is &quot;</span> &lt;&lt; header-&gt;m_CMD &lt;&lt; <span class="hljs-string">&quot; , Length is &quot;</span> &lt;&lt; header-&gt;m_Length &lt;&lt; std::endl;<br><span class="hljs-comment">// 按照请求头解析内容</span><br><span class="hljs-keyword">switch</span> (header-&gt;m_CMD) &#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br>            <span class="hljs-comment">// 因为前面已经读取了请求头，因此需要位偏移读取内容</span><br><span class="hljs-built_in">recv</span>(sock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Login* login = (Login*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Username is &quot;</span> &lt;&lt; login-&gt;m_Username &lt;&lt; <span class="hljs-string">&quot; , Password is &quot;</span> &lt;&lt; login-&gt;m_Password &lt;&lt; std::endl;<br>LoginResult loginRet = &#123;&#125;;<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">char</span>*)&amp;loginRet, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT:<br>&#123;<br><span class="hljs-built_in">recv</span>(sock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Logout* logout = (Logout*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Username is &quot;</span> &lt;&lt; logout-&gt;m_Username &lt;&lt; std::endl;<br>LogoutResult logoutRet = &#123;&#125;;<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">char</span>*)&amp;logoutRet, <span class="hljs-built_in">sizeof</span>(LogoutResult), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<br>&#123;<br>DataHeader header = &#123; CMD_ERROR, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(header), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// MAKEWORD 将一个高位和一个低位字节进行合并：2^8+2 = 512+2 = 514，</span><br><span class="hljs-comment">// // WORD为无符号整形， 标识WinSock2使用2.2版本协议</span><br>WORD wr = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);  <br>WSADATA dat;<br><span class="hljs-built_in">WSAStartup</span>(wr, &amp;dat);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 1、创建socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><span class="hljs-keyword">if</span> (_sock == SOCKET_ERROR) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;socket error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Create socket succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 2、绑定端口</span><br>sockaddr_in _addr;<br>_addr.sin_family = AF_INET;<br>_addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br><span class="hljs-comment">// 地址设置为 INADDR_ANY 才可连接到虚拟机ip!!!  如果是 &quot;127.0.0.1&quot; 则只能连接本地ip，虚拟机无法连接</span><br><span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;_addr.sin_addr);<br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_addr, <span class="hljs-built_in">sizeof</span>(_addr))) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind port succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 3、监听端口</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">128</span>)) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;listen error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;listen port succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// select 模型</span><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// 创建结构体</span><br>fd_set fdRead, fdWrite, fdExp;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">// 清空变量</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdWrite);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdExp);<br><span class="hljs-comment">// 将服务器_sock添加到监控变量</span><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdRead);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdWrite);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdExp);<br><br><span class="hljs-comment">// 将工作的socket加入到监控变量</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; g_clients.<span class="hljs-built_in">size</span>(); ++i) &#123;<br><span class="hljs-built_in">FD_SET</span>(g_clients[i], &amp;fdRead);<br>&#125;<br><br><span class="hljs-comment">// 设置最大阻塞时间, 接收到数据则立即向下执行，没有数据则会等到最大时间才向下执行</span><br><span class="hljs-comment">// timeval结构体两个变量分别为：秒和微秒。 如果timeval位置为NULL则一直阻塞到有数据</span><br>timeval tval = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">// 使用select监视</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_sock + <span class="hljs-number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;tval);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;select work error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125; <br><br><span class="hljs-comment">// 判断_sock是否在可读列表内</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdRead)) &#123;<br><span class="hljs-comment">// 从可读列表中将_sock移除，进行客户端连接 </span><br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdRead);<br><span class="hljs-comment">// 客户端连接</span><br>sockaddr_in _caddr = &#123;&#125;;<br><span class="hljs-type">int</span> addrlen = <span class="hljs-built_in">sizeof</span>(_caddr);<br>SOCKET _cSock = INVALID_SOCKET;<br>_cSock = <span class="hljs-built_in">accept</span>(_sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_caddr, &amp;addrlen);<br><span class="hljs-keyword">if</span> (_cSock == INVALID_SOCKET) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client connect error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 向聊天室其它用户发送新用户加入提醒</span><br>NewUserJoin newuser;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; g_clients.<span class="hljs-built_in">size</span>(); ++i) &#123;<br><span class="hljs-built_in">send</span>(g_clients[i], (<span class="hljs-type">char</span>*)&amp;newuser, <span class="hljs-built_in">sizeof</span>(NewUserJoin), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">char</span> ip[<span class="hljs-number">512</span>];<br><span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;_caddr.sin_addr, ip, <span class="hljs-built_in">sizeof</span>(ip));<br>std::cout &lt;&lt; <span class="hljs-string">&quot;New client connect, ip: &quot;</span> &lt;&lt; ip &lt;&lt; std::endl;<br><span class="hljs-comment">// 将新连接的客户端加入select访问数组中</span><br>g_clients.<span class="hljs-built_in">push_back</span>(_cSock);<br>&#125;<br><br><span class="hljs-comment">// 依次处理监视变量，并将断开连接的客户端移除</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; fdRead.fd_count; ++i) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> == <span class="hljs-built_in">ServerTask</span>(fdRead.fd_array[i])) &#123;<br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(g_clients.<span class="hljs-built_in">begin</span>(), g_clients.<span class="hljs-built_in">end</span>(), fdRead.fd_array[i]);<br><span class="hljs-keyword">if</span> (it != g_clients.<span class="hljs-built_in">end</span>()) &#123;<br>g_clients.<span class="hljs-built_in">erase</span>(it);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 6、关闭描述符</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_sock)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-客户端"><a href="#3-4-客户端" class="headerlink" title="3.4 客户端"></a>3.4 客户端</h3><h5 id="3-4-1-Client-h"><a href="#3-4-1-Client-h" class="headerlink" title="3.4.1 Client.h"></a>3.4.1 <code>Client.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">// 用于避免windows.h 和 WinSock2 库的函数重复</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// windows平台 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-comment">// inet_pton: 将字符串转为addr地址 和 inet_ntop: 将addr地址转为字符串 的 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">// Linux 平台下 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_ERROR (SOCKET)(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// C++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">// 多线程库，分离接收和发送</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-comment">// 结构体头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br><br><span class="hljs-comment">// 客户端是否退出标志位</span><br><span class="hljs-type">bool</span> g_bRun = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// 客户端接收任务函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientRecvTask</span><span class="hljs-params">(SOCKET cSock)</span></span>;<br><br><span class="hljs-comment">// 客户端发送任务函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientSendTask</span><span class="hljs-params">(SOCKET cSock)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="3-4-2-Client-cpp"><a href="#3-4-2-Client-cpp" class="headerlink" title="3.4.2 Client.cpp"></a>3.4.2 <code>Client.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Client.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientRecvTask</span><span class="hljs-params">(SOCKET cSock)</span> </span>&#123;<br><br><span class="hljs-comment">// 解析请求头</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-type">int</span> recvlen = <span class="hljs-built_in">recv</span>(cSock, szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (recvlen &lt; <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DataHeader* header = (DataHeader*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Command is &quot;</span> &lt;&lt; header-&gt;m_CMD &lt;&lt; <span class="hljs-string">&quot;, length is &quot;</span> &lt;&lt; header-&gt;m_Length &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 解析请求内容</span><br><span class="hljs-keyword">switch</span> (header-&gt;m_CMD) &#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(cSock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginResult* loginRet = (LoginResult*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: LoginResult is &quot;</span> &lt;&lt; loginRet-&gt;m_Result &lt;&lt; <span class="hljs-string">&quot;, Length is &quot;</span> &lt;&lt; loginRet-&gt;m_Length &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(cSock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LogoutResult* logoutRet = (LogoutResult*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: LogoutResult is &quot;</span> &lt;&lt; logoutRet-&gt;m_Result &lt;&lt; <span class="hljs-string">&quot;, Length is &quot;</span> &lt;&lt; logoutRet-&gt;m_Length &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_NEW_USER_JOIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(cSock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>NewUserJoin* newuser = (NewUserJoin*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: New user join, username is &quot;</span> &lt;&lt; newuser-&gt;m_Sock &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientSendTask</span><span class="hljs-params">(SOCKET cSock)</span> </span>&#123;<br><span class="hljs-type">char</span> _sendBuf[<span class="hljs-number">512</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>std::cin &gt;&gt; _sendBuf;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Client exit ...&quot;</span> &lt;&lt; std::endl;<br>g_bRun = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;login&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>Login login = &#123;&#125;;<br><span class="hljs-built_in">strcpy_s</span>(login.m_Username, <span class="hljs-string">&quot;xiaohua&quot;</span>);<br><span class="hljs-built_in">strcpy_s</span>(login.m_Password, <span class="hljs-string">&quot;123456&quot;</span>);<br><span class="hljs-built_in">send</span>(cSock, (<span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(Login), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;logout&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>Logout logout = &#123;&#125;;<br><span class="hljs-built_in">strcpy_s</span>(logout.m_Username, <span class="hljs-string">&quot;xiaohua&quot;</span>);<br><span class="hljs-built_in">send</span>(cSock, (<span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(Logout), <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// MAKEWORD 将一个高位和一个低位字节进行合并：2^8+2 = 512+2 = 514，</span><br><span class="hljs-comment">// // WORD为无符号整形， 标识WinSock2使用2.2版本协议</span><br>WORD wr = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-built_in">WSAStartup</span>(wr, &amp;dat);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 1、创建socket</span><br>SOCKET _cSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 2、请求连接</span><br>sockaddr_in _caddr;<br>_caddr.sin_family = AF_INET;<br>_caddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;_caddr.sin_addr);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;192.168.200.1&quot;</span>, &amp;_caddr.sin_addr); <span class="hljs-comment">// windows平台cmd命令ipconfig对应的虚拟机vmware8地址</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">connect</span>(_cSock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_caddr, <span class="hljs-built_in">sizeof</span>(_caddr))) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;connet error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Connet server succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 分线程工作, 分离发送任务</span><br><span class="hljs-function">std::thread <span class="hljs-title">td1</span><span class="hljs-params">(ClientSendTask, _cSock)</span></span>;<br>td1.<span class="hljs-built_in">detach</span>();<br><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// select 模型</span><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// 创建结构体</span><br>fd_set fdRead;<br><span class="hljs-keyword">while</span> (g_bRun) &#123; <span class="hljs-comment">// 在发送任务中输入exit后退出客户端</span><br><span class="hljs-comment">// 清空结构体</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-comment">// 绑定socket</span><br><span class="hljs-built_in">FD_SET</span>(_cSock, &amp;fdRead);<br><span class="hljs-comment">// 设置最大阻塞时间</span><br>timeval tval = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">// select 接收数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_cSock + <span class="hljs-number">1</span>, &amp;fdRead, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;tval);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;select error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断_cSock套接字是否在可读列表</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_cSock, &amp;fdRead)) &#123;<br><span class="hljs-comment">// 从可读列表中删除_cSock套接字，表示读取</span><br><span class="hljs-built_in">FD_CLR</span>(_cSock, &amp;fdRead);<br><br><span class="hljs-comment">// 处理任务，判断服务器是否对接正常</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> == <span class="hljs-built_in">ClientRecvTask</span>(_cSock)) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Server error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//4、关闭socket</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_cSock);<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_sock)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-类封装客户端和服务器"><a href="#4-类封装客户端和服务器" class="headerlink" title="4 类封装客户端和服务器"></a>4 类封装客户端和服务器</h1><h3 id="4-1-结构体头文件MsgHead-h"><a href="#4-1-结构体头文件MsgHead-h" class="headerlink" title="4.1 结构体头文件MsgHead.h"></a>4.1 结构体头文件<code>MsgHead.h</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WIN32_LEAN_AND_MEAN</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// windows 平台 soocket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">// Linux 平台 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_SOCKET SOCKET(~0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span> &#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGOUT,<br>CMD_LOGOUT_RESULT,<br>CMD_NEW_USER,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span> &#123;<br><span class="hljs-type">short</span> _Cmd;<br><span class="hljs-type">short</span> _Length;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Login</span>() &#123;<br>_Cmd = CMD_LOGIN;<br>_Length = <span class="hljs-built_in">sizeof</span>(Login);<br>&#125;<br><span class="hljs-type">char</span> _Username[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> _Password[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LoginResult</span>() &#123;<br>_Cmd = CMD_LOGIN_RESULT;<br>_Length = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>_Result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> _Result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Logout</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Logout</span>() &#123;<br>_Cmd = CMD_LOGOUT;<br>_Length = <span class="hljs-built_in">sizeof</span>(Logout);<br>&#125;<br><span class="hljs-type">char</span> _Username[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LogoutResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LogoutResult</span>() &#123;<br>_Cmd = CMD_LOGOUT_RESULT;<br>_Length = <span class="hljs-built_in">sizeof</span>(LogoutResult);<br>_Result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> _Result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUser</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">NewUser</span>(SOCKET sock) :_Sock(sock) &#123;<br>_Cmd = CMD_NEW_USER;<br>_Length = <span class="hljs-built_in">sizeof</span>(NewUser);<br>&#125;<br>SOCKET _Sock;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-2-服务器"><a href="#4-2-服务器" class="headerlink" title="4.2 服务器"></a>4.2 服务器</h3><h5 id="4-2-1-Server-h"><a href="#4-2-1-Server-h" class="headerlink" title="4.2.1 Server.h"></a>4.2.1 <code>Server.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">// c++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-comment">// 消息体头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClient</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">TcpClient</span>();<br>~<span class="hljs-built_in">TcpClient</span>();<br><br><span class="hljs-comment">// 创建socket</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitSocket</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 连接服务器</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Connect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port)</span></span>;<br><span class="hljs-comment">// 发送消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SendData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RecvData</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 解析消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ParseData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 判断客户端是否运行</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 客户端运行主程序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">MainRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>SOCKET _cSock;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-2-Server-cpp"><a href="#4-2-2-Server-cpp" class="headerlink" title="4.2.2 Server.cpp"></a>4.2.2 <code>Server.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Server.h&quot;</span></span><br><br>TcpServer::<span class="hljs-built_in">TcpServer</span>()<br>&#123;<br>_sSock = INVALID_SOCKET;<br>_sClients.<span class="hljs-built_in">clear</span>();<br>&#125;<br><br>TcpServer::~<span class="hljs-built_in">TcpServer</span>()<br>&#123;<br><span class="hljs-built_in">Close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::InitSocket</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// windows平台打开socket环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// 使用socket 2.x版本</span><br>WORD wr = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-built_in">WSAStartup</span>(wr, &amp;dat);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// 判断是否有旧连接</span><br><span class="hljs-keyword">if</span> (_sSock != INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;off old connect ...&quot;</span> &lt;&lt; std::endl;<br>_sSock = INVALID_SOCKET;<br>&#125;<br><span class="hljs-comment">// 创建Socket</span><br>_sSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (_sSock == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: create new socket failed ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;create new socket succeed ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::Bind</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_sSock == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Invalid socket can not bind ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>sockaddr_in saddr;<br>saddr.sin_family = AF_INET;<br>saddr.sin_port = <span class="hljs-built_in">htons</span>(port);<br><span class="hljs-keyword">if</span> (ip) <br>&#123;<br><span class="hljs-built_in">inet_pton</span>(AF_INET, ip, &amp;saddr.sin_addr);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>saddr.sin_addr.S_un.S_addr = INADDR_ANY;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>saddr.sin_addr.s_addr = INADDR_ANY;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sSock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;saddr, <span class="hljs-built_in">sizeof</span>(saddr))) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: bind port error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind port &quot;</span> &lt;&lt; port &lt;&lt; <span class="hljs-string">&quot; succeed ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::Listen</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_sSock == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Invalid socket can not listen ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sSock, num)) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: listen port error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;listen port succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::Accept</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_sSock == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Invalid socket can not accept ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>sockaddr_in caddr;<br><span class="hljs-type">int</span> clen = <span class="hljs-built_in">sizeof</span>(caddr);<br>SOCKET cSock = INVALID_SOCKET;<br>cSock = <span class="hljs-built_in">accept</span>(_sSock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;caddr, &amp;clen);<br><span class="hljs-keyword">if</span> (cSock == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: accept error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">char</span> ip[<span class="hljs-number">32</span>];<br><span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;caddr.sin_addr, ip, <span class="hljs-built_in">sizeof</span>(ip));<br>std::cout &lt;&lt; <span class="hljs-string">&quot;New client &lt;socket=&quot;</span> &lt;&lt; cSock &lt;&lt; <span class="hljs-string">&quot;&gt; connect, ip: &quot;</span> &lt;&lt; ip &lt;&lt; std::endl;<br><span class="hljs-function">NewUser <span class="hljs-title">newuser</span><span class="hljs-params">(cSock)</span></span>;<br><span class="hljs-built_in">SendToAll</span>(&amp;newuser);<br>_sClients.<span class="hljs-built_in">emplace_back</span>(cSock);<br><span class="hljs-keyword">return</span> cSock;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::SendData</span><span class="hljs-params">(SOCKET cSock, DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>() &amp;&amp; header)<br>&#123;<br><span class="hljs-built_in">send</span>(cSock, (<span class="hljs-type">char</span>*)header, header-&gt;_Length, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::SendToAll</span><span class="hljs-params">(DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>() &amp;&amp; header) &#123;<br><span class="hljs-keyword">for</span> (SOCKET client : _sClients)<br>&#123;<br><span class="hljs-built_in">SendData</span>(client, header);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpServer::RecvData</span><span class="hljs-params">(SOCKET cSock)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 缓冲区</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">4096</span>];<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">recv</span>(cSock, szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;&lt;socket=&quot;</span> &lt;&lt; cSock &lt;&lt; <span class="hljs-string">&quot;&gt; client out connect ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 解析数据</span><br>DataHeader* header = (DataHeader*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;&lt;socket=&quot;</span> &lt;&lt; cSock &lt;&lt; <span class="hljs-string">&quot;&gt; info length is &quot;</span> &lt;&lt; header-&gt;_Length &lt;&lt; std::endl;<br><span class="hljs-built_in">recv</span>(cSock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">ParseData</span>(cSock, header);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::ParseData</span><span class="hljs-params">(SOCKET cSock, DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (header-&gt;_Cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br>Login* login = (Login*)header;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;&lt;socket=&quot;</span> &lt;&lt; cSock &lt;&lt; <span class="hljs-string">&quot;&gt; Command is LOGIN, username is &quot;</span> &lt;&lt; login-&gt;_Username &lt;&lt; <span class="hljs-string">&quot;, password is &quot;</span> &lt;&lt; login-&gt;_Password &lt;&lt; std::endl;<br>LoginResult loginRet = &#123;&#125;;<br><span class="hljs-built_in">SendData</span>(cSock, &amp;loginRet);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT:<br>&#123;<br>Logout* logout = (Logout*)header;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;&lt;socket=&quot;</span> &lt;&lt; cSock &lt;&lt; <span class="hljs-string">&quot;&gt; Command is LOGOUT, username is &quot;</span> &lt;&lt; logout-&gt;_Username &lt;&lt; std::endl;<br>LogoutResult logoutRet = &#123;&#125;;<br><span class="hljs-built_in">SendData</span>(cSock, &amp;logoutRet);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::Close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_sSock != INVALID_SOCKET)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_sSock);<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_sSock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>_sSock = INVALID_SOCKET;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpServer::isRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _sSock != INVALID_SOCKET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpServer::MainRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>())<br>&#123;<br>fd_set fdRead, fdWrite, fdExp;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdWrite);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdExp);<br><span class="hljs-built_in">FD_SET</span>(_sSock, &amp;fdRead);<br><span class="hljs-built_in">FD_SET</span>(_sSock, &amp;fdWrite);<br><span class="hljs-built_in">FD_SET</span>(_sSock, &amp;fdExp);<br>timeval tval = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">for</span> (SOCKET client : _sClients)<br>&#123;<br><span class="hljs-built_in">FD_SET</span>(client, &amp;fdRead);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; <span class="hljs-built_in">select</span>(_sSock + <span class="hljs-number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;tval))<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: select error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sSock, &amp;fdRead))<br>&#123;<br><span class="hljs-built_in">FD_CLR</span>(_sSock, &amp;fdRead);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Accept</span>() == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; fdRead.fd_count; ++i) &#123;<br><span class="hljs-keyword">auto</span> client = fdRead.fd_array[i];<br><span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> == <span class="hljs-built_in">RecvData</span>(client))<br>&#123;<br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(_sClients.<span class="hljs-built_in">begin</span>(), _sClients.<span class="hljs-built_in">end</span>(), client);<br><span class="hljs-keyword">if</span> (it != _sClients.<span class="hljs-built_in">end</span>())<br>&#123;<br>_sClients.<span class="hljs-built_in">erase</span>(it);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-3-Servermain-cpp"><a href="#4-2-3-Servermain-cpp" class="headerlink" title="4.2.3 Servermain.cpp"></a>4.2.3 <code>Servermain.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Server.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>TcpServer server;<br>server.<span class="hljs-built_in">InitSocket</span>();<br>server.<span class="hljs-built_in">Bind</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">9999</span>);<br>server.<span class="hljs-built_in">Listen</span>(<span class="hljs-number">8</span>);<br><br><span class="hljs-keyword">while</span> (server.<span class="hljs-built_in">isRun</span>())<br>&#123;<br>server.<span class="hljs-built_in">MainRun</span>();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-客户端"><a href="#4-3-客户端" class="headerlink" title="4.3 客户端"></a>4.3 客户端</h3><h5 id="4-3-1-Client-h"><a href="#4-3-1-Client-h" class="headerlink" title="4.3.1 Client.h"></a>4.3.1 <code>Client.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">// c++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-comment">// 消息体头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MsgHead.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClient</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">TcpClient</span>();<br>~<span class="hljs-built_in">TcpClient</span>();<br><br><span class="hljs-comment">// 创建socket</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitSocket</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 连接服务器</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Connect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port)</span></span>;<br><span class="hljs-comment">// 发送消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SendData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RecvData</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 解析消息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ParseData</span><span class="hljs-params">(DataHeader* header)</span></span>;<br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 判断客户端是否运行</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 客户端运行主程序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">MainRun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>SOCKET _cSock;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="4-3-2-Client-cpp"><a href="#4-3-2-Client-cpp" class="headerlink" title="4.3.2 Client.cpp"></a>4.3.2 <code>Client.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Client.h&quot;</span></span><br><br>TcpClient::<span class="hljs-built_in">TcpClient</span>()<br>&#123;<br>_cSock = INVALID_SOCKET;<br>&#125;<br><br>TcpClient::~<span class="hljs-built_in">TcpClient</span>()<br>&#123;<br><span class="hljs-built_in">Close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClient::InitSocket</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 判断是否有旧连接</span><br><span class="hljs-keyword">if</span> (_cSock != INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;off old connect ...&quot;</span> &lt;&lt; std::endl;<br>_cSock = INVALID_SOCKET;<br>&#125;<br><span class="hljs-comment">// windows平台打开socket环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// 使用socket 2.x版本</span><br>WORD wr = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-built_in">WSAStartup</span>(wr, &amp;dat);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// 创建Socket</span><br>_cSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (_cSock == INVALID_SOCKET)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: create new socket failed ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;create new socket succeed ...&quot;</span> &lt;&lt; std::endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpClient::Connect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_cSock == INVALID_SOCKET)<br>&#123;<br><span class="hljs-built_in">InitSocket</span>();<br>&#125;<br><span class="hljs-comment">// 连接服务器</span><br>sockaddr_in caddr;<br>caddr.sin_family = AF_INET;<br>caddr.sin_port = <span class="hljs-built_in">htons</span>(port);<br><span class="hljs-built_in">inet_pton</span>(AF_INET, ip, &amp;caddr.sin_addr);<br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">connect</span>(_cSock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;caddr, <span class="hljs-built_in">sizeof</span>(caddr)))<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: connect server failed ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;connect server succeed ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpClient::SendData</span><span class="hljs-params">(DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>() &amp;&amp; header)<br>&#123;<br><span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)header, header-&gt;_Length, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TcpClient::RecvData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 接收缓冲区</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">4096</span>] = &#123;&#125;;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">recv</span>(_cSock, szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: recv server error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DataHeader* header = (DataHeader*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Message length is &quot;</span> &lt;&lt; header-&gt;_Length &lt;&lt; std::endl;<br><span class="hljs-built_in">recv</span>(_cSock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">ParseData</span>(header);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClient::ParseData</span><span class="hljs-params">(DataHeader* header)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 解析数据</span><br><span class="hljs-keyword">switch</span> (header-&gt;_Cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN_RESULT:<br>&#123;<br>LoginResult* loginRet = (LoginResult*)header;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: cmd is LOGIN_RESULT, length is &quot;</span> &lt;&lt; loginRet-&gt;_Length &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT_RESULT:<br>&#123;<br>LogoutResult* logoutRet = (LogoutResult*)header;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: cmd is LOGOUT_RESULT, length is &quot;</span> &lt;&lt; logoutRet-&gt;_Length &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_NEW_USER:<br>&#123;<br>NewUser* newuser = (NewUser*)header;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: New user join, socket is &quot;</span> &lt;&lt; newuser-&gt;_Sock &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClient::Close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_cSock != INVALID_SOCKET)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_cSock);<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_cSock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>_cSock = INVALID_SOCKET;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpClient::isRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _cSock != INVALID_SOCKET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpClient::MainRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isRun</span>())<br>&#123;<br><span class="hljs-comment">// 创建select模型</span><br>fd_set fdRead;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-built_in">FD_SET</span>(_cSock, &amp;fdRead);<br><span class="hljs-comment">//timeval tval = &#123; 1, 0 &#125;;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; <span class="hljs-built_in">select</span>(_cSock + <span class="hljs-number">1</span>, &amp;fdRead, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>)) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR: select error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_cSock, &amp;fdRead))<br>&#123;<br><span class="hljs-built_in">FD_CLR</span>(_cSock, &amp;fdRead);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">RecvData</span>() == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">Close</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-3-3-clientmain-cpp"><a href="#4-3-3-clientmain-cpp" class="headerlink" title="4.3.3 clientmain.cpp"></a>4.3.3 <code>clientmain.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Client.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CTask</span><span class="hljs-params">(TcpClient* client)</span> </span>&#123;<br><span class="hljs-type">char</span> sendBuf[<span class="hljs-number">512</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>std::cin &gt;&gt; sendBuf;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(sendBuf, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client exit ...&quot;</span> &lt;&lt; std::endl;<br>client-&gt;<span class="hljs-built_in">Close</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(sendBuf, <span class="hljs-string">&quot;login&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>Login login = &#123;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;xiaohua&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* pwd = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-built_in">memcpy</span>(login._Username, name, <span class="hljs-built_in">sizeof</span>(name));<br><span class="hljs-built_in">memcpy</span>(login._Password, pwd, <span class="hljs-built_in">sizeof</span>(pwd));<br>client-&gt;<span class="hljs-built_in">SendData</span>(&amp;login);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(sendBuf, <span class="hljs-string">&quot;logout&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>Logout logout = &#123;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;xiaohua&quot;</span>;<br><span class="hljs-built_in">memcpy</span>(logout._Username, name, <span class="hljs-built_in">sizeof</span>(name));<br>client-&gt;<span class="hljs-built_in">SendData</span>(&amp;logout);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>TcpClient client;<br>client.<span class="hljs-built_in">InitSocket</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>client.<span class="hljs-built_in">Connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>client.<span class="hljs-built_in">Connect</span>(<span class="hljs-string">&quot;192.168.200.1&quot;</span>, <span class="hljs-number">9999</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function">std::thread <span class="hljs-title">t1</span><span class="hljs-params">(CTask, &amp;client)</span></span>;<br>t1.<span class="hljs-built_in">detach</span>();<br><br><span class="hljs-keyword">while</span> (client.<span class="hljs-built_in">isRun</span>())<br>&#123;<br>client.<span class="hljs-built_in">MainRun</span>();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树的构建和遍历</title>
    <link href="/2024/06/20/%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E9%81%8D%E5%8E%86/"/>
    <url>/2024/06/20/%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p>理解树结构，理解前序，中序，后序的含义，所有关于树的问题都迎刃而解！！！</p><p>前序：事前需要进行操作–递归； 中序：从左到右有序； 后序：从底向上进行操作–归并、回溯</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> null 0</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">树节点定义</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br><span class="hljs-type">int</span> val;<br><span class="hljs-type">bool</span> flag;<br>TreeNode* lchild;<br>TreeNode* rchild;<br><span class="hljs-built_in">TreeNode</span>(): <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">flag</span>(<span class="hljs-literal">false</span>), <span class="hljs-built_in">lchild</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">rchild</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> v): <span class="hljs-built_in">val</span>(v), <span class="hljs-built_in">flag</span>(<span class="hljs-literal">false</span>), <span class="hljs-built_in">lchild</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">rchild</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> v, TreeNode* lc, TreeNode* rc): <span class="hljs-built_in">val</span>(v), <span class="hljs-built_in">flag</span>(<span class="hljs-literal">false</span>), <span class="hljs-built_in">lchild</span>(lc), <span class="hljs-built_in">rchild</span>(rc) &#123;&#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">层序遍历结果构建树</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-comment">//判断构建的何种类型的节点</span><br><span class="hljs-function">TreeNode* <span class="hljs-title">createNode</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> index)</span> </span>&#123; <br><span class="hljs-keyword">if</span> (index &gt;= nums.<span class="hljs-built_in">size</span>() || nums[index] == null) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(nums[index]);<br>&#125;<br><span class="hljs-comment">//使用队列构建树</span><br><span class="hljs-function">TreeNode* <span class="hljs-title">createT</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(nums[index++]);<br>queue&lt;TreeNode*&gt; qT;<br>qT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!qT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = qT.<span class="hljs-built_in">front</span>();<br>qT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node != <span class="hljs-literal">nullptr</span>) &#123;<br>node-&gt;lchild = <span class="hljs-built_in">createNode</span>(nums, index++);<br>node-&gt;rchild = <span class="hljs-built_in">createNode</span>(nums, index++);<br>qT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>qT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> root;<br>&#125;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">前序和中序遍历结果构建树</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">TreeNode* <span class="hljs-title">createTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prenums, vector&lt;<span class="hljs-type">int</span>&gt;&amp; midnums, <span class="hljs-type">int</span> preleft, <span class="hljs-type">int</span> preright, <span class="hljs-type">int</span> midleft, <span class="hljs-type">int</span> midright)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (midleft &gt;= midright || preleft &gt;= preright) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">int</span> i = midleft;<br><span class="hljs-keyword">while</span> (prenums[preleft] != midnums[i]) &#123;<br>++i;<br><span class="hljs-keyword">if</span> (i &gt;= midright) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-type">int</span> size = i - midleft;<br>TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(midnums[i]);<br>root-&gt;lchild = <span class="hljs-built_in">createTree</span>(prenums, midnums, preleft + <span class="hljs-number">1</span>, preleft + size + <span class="hljs-number">1</span>, midleft, i); <span class="hljs-comment">// + size !!!</span><br>root-&gt;rchild = <span class="hljs-built_in">createTree</span>(prenums, midnums, preleft + size + <span class="hljs-number">1</span>, preright, i + <span class="hljs-number">1</span>, midright);<br><span class="hljs-keyword">return</span> root;<br>&#125;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">递归 前中后序遍历</span><br><span class="hljs-comment">*/</span><br>vector&lt;<span class="hljs-type">int</span>&gt; preans;<br>vector&lt;<span class="hljs-type">int</span>&gt; midans;<br>vector&lt;<span class="hljs-type">int</span>&gt; endans;<br>vector&lt;<span class="hljs-type">int</span>&gt; floorans;<br><span class="hljs-comment">//前序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>preans.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br><span class="hljs-built_in">preorder</span>(root-&gt;lchild);<br><span class="hljs-built_in">preorder</span>(root-&gt;rchild);<br>&#125;<br><span class="hljs-comment">//中序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">midorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">midorder</span>(root-&gt;lchild);<br>midans.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br><span class="hljs-built_in">midorder</span>(root-&gt;rchild);<br>&#125;<br><span class="hljs-comment">//后序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">endorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">endorder</span>(root-&gt;lchild);<br><span class="hljs-built_in">endorder</span>(root-&gt;rchild);<br>endans.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br>&#125;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">非递归 前中后序遍历 层序遍历</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//清空中序和后序遍历使用的节点标志</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanNodeflag</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>stack&lt;TreeNode*&gt; sT;<br>sT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!sT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = sT.<span class="hljs-built_in">top</span>();<br>sT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node != <span class="hljs-literal">nullptr</span>) &#123;<br>node-&gt;flag = <span class="hljs-literal">false</span>;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//层序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floorTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>queue&lt;TreeNode*&gt; qT;<br>qT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!qT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = qT.<span class="hljs-built_in">front</span>();<br>qT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node) &#123;<br>floorans.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>qT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>qT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//前序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>stack&lt;TreeNode*&gt; sT;<br>sT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!sT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = sT.<span class="hljs-built_in">top</span>();<br>sT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node != <span class="hljs-literal">nullptr</span>) &#123;<br>preans.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>sT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//中序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">midTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">cleanNodeflag</span>(root);<br>stack&lt;TreeNode*&gt; sT;<br>sT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!sT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = sT.<span class="hljs-built_in">top</span>();<br><span class="hljs-keyword">while</span> (node &amp;&amp; node-&gt;lchild &amp;&amp; !node-&gt;lchild-&gt;flag) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>node = node-&gt;lchild;<br>&#125;<br>sT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node) &#123;<br>midans.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>node-&gt;flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (node-&gt;rchild &amp;&amp; !node-&gt;rchild-&gt;flag) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//后序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">endTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">cleanNodeflag</span>(root);<br>stack&lt;TreeNode*&gt; sT;<br>sT.<span class="hljs-built_in">push</span>(root);<br>TreeNode* node = root;<br><span class="hljs-keyword">while</span> (node &amp;&amp; node-&gt;lchild) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>node = node-&gt;lchild;<br>&#125;<br><span class="hljs-keyword">while</span> (!sT.<span class="hljs-built_in">empty</span>()) &#123;<br>node = sT.<span class="hljs-built_in">top</span>();<br><span class="hljs-keyword">while</span> (node-&gt;rchild &amp;&amp; !node-&gt;rchild-&gt;flag) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>node = node-&gt;rchild;<br><span class="hljs-keyword">while</span> (node &amp;&amp; node-&gt;lchild &amp;&amp; !node-&gt;lchild-&gt;flag) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>node = node-&gt;lchild;<br>&#125;<br>&#125;<br>endans.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>node-&gt;flag = <span class="hljs-literal">true</span>;<br>sT.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br><br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">主函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">/* 构建树 */</span><br><span class="hljs-comment">//vector&lt;int&gt; nums = &#123;5,4,8,11,null,13,4,7,2,null,null,null,1&#125;;</span><br><span class="hljs-comment">//TreeNode* root = createT(nums);</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; prenums = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> &#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; midnums = &#123; <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> &#125;;<br><span class="hljs-type">int</span> n = midnums.<span class="hljs-built_in">size</span>();<br>TreeNode* root = <span class="hljs-built_in">createTree</span>(prenums, midnums, <span class="hljs-number">0</span>, n, <span class="hljs-number">0</span>, n);<br><br><span class="hljs-comment">/* 遍历树 */</span><br><span class="hljs-built_in">floorTraversal</span>(root);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; floorans.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>cout &lt;&lt; floorans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//preorder(root);</span><br><span class="hljs-built_in">preTraversal</span>(root);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; preans.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>cout &lt;&lt; preans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//midorder(root);</span><br><span class="hljs-built_in">midTraversal</span>(root);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; midans.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>cout &lt;&lt; midans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//endorder(root);</span><br><span class="hljs-built_in">endTraversal</span>(root);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; endans.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>cout &lt;&lt; endans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CMake 学习笔记</title>
    <link href="/2024/06/06/CMake%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/06/06/CMake%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>项目构建工具cmake流程：项目 –&gt; CmakeList.txt –&gt; cmake –&gt; makefile –&gt; make –&gt; exe</p><span id="more"></span><h1 id="CMake-使用"><a href="#CMake-使用" class="headerlink" title="CMake 使用"></a>CMake 使用</h1><h3 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1 基础命令"></a>1 基础命令</h3><p>1、注释： 行注释#   块注释#[[内容]]</p><p>2、<code>cmake_minimum_required</code> 指定 camke 的最低版本</p><p>3、<code>project</code> 项目内容</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">project</span>(&lt;<span class="hljs-keyword">project</span>-name&gt; [languages &lt;language-name&gt;]) <span class="hljs-comment">#项目名，语言</span><br></code></pre></td></tr></table></figure><p>4、<code>add_executable</code> 定义生可执行程序</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">add_excutable(可执行程序名 源文件名<span class="hljs-number">1</span> 源文件名<span class="hljs-number">2</span> 源文件<span class="hljs-number">3</span>)<br>add_excutable(可执行程序名 源文件名<span class="hljs-number">1</span>;源文件名<span class="hljs-number">2</span>;源文件<span class="hljs-number">3</span>)  <span class="hljs-comment">#”空格“和”;“分割均可</span><br></code></pre></td></tr></table></figure><p>5、cmake执行</p><p><strong>example 1</strong> </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><span class="hljs-keyword">add_executable</span>(app add.cpp sub.cpp mul.cpp divdd.cpp main.cpp)<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#终端输入如下</span><br>cmake <span class="hljs-string">&quot;path&quot;</span><span class="hljs-comment">#path 为CMakeLists.txt的路径，当前文件夹就是 .</span><br><span class="hljs-comment">#cmake生成Makefile文件</span><br>make<span class="hljs-comment">#执行Makefile文件生成可执行程序</span><br></code></pre></td></tr></table></figure><h3 id="2-设置"><a href="#2-设置" class="headerlink" title="2 设置"></a>2 设置</h3><p>1、<code>SET(VAR [VALUE])</code>#VAR 变量名; VALUE 变量值</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(SRC_LIST add.cpp sub.cpp mul.cpp divdd.cpp main.cpp)<span class="hljs-comment">#空格 分号 间隔均可</span><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><p>2、c++标准#默认c++98</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#在CMakeLists.txt文件中使用set设置</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#指定标准为c++11</span><br><br><span class="hljs-comment">#在终端通过指令设置</span><br>cmake <span class="hljs-string">&quot;path&quot;</span> -D CMAKE_CXX_STANDARD=<span class="hljs-number">11</span><span class="hljs-comment">#-D 表示给宏赋值</span><br></code></pre></td></tr></table></figure><p>3、输出路径#设置可执行程序的输出路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(HOME /home/moonlight/CMake_exam1)<span class="hljs-comment">#绝对路径</span><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin) <span class="hljs-comment">#bin目录不存在会自动生成</span><br></code></pre></td></tr></table></figure><p><strong>example 2</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">set</span>(SRC_LIST add.cpp sub.cpp mul.cpp divdd.cpp main.cpp)<span class="hljs-comment">#将文件名赋给变量</span><br><span class="hljs-keyword">set</span>(HOME /home/moonlight/CMake_exam1)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin)<span class="hljs-comment">#设置可执行文件的输出路径</span><br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-搜索"><a href="#3-搜索" class="headerlink" title="3 搜索"></a>3 搜索</h3><p>1、<code>aux_source_directory</code> #查找某个路径下的所有源文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">aux_source_directory</span>(&lt;dir&gt; &lt;variable&gt;)<span class="hljs-comment">#dir 目录#variable 存储变量</span><br><br><span class="hljs-keyword">aux_source_directory</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span> SRC) <span class="hljs-comment"># PROJECT_SOURCE_DIR 表示cmake输入的path</span><br></code></pre></td></tr></table></figure><p>2、<code>file</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(GLOB/GLOB_RECURSE 变量名 搜索的文件路径或类型)<span class="hljs-comment">#GLOB 表示读文件名列表，READ 读文件内容</span><br><br><span class="hljs-keyword">file</span>(GLOB MAIN_SRC <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<br><span class="hljs-keyword">file</span>(GLOB MAIN_HEAD <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>/*.h)<br><span class="hljs-comment"># CAMKE_CURRENT_SOURCE_DIR 表示CMakeLists.txt所在的文件目录</span><br></code></pre></td></tr></table></figure><p><strong>example 3</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#包含头文件所在的文件夹，可多个</span><br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<span class="hljs-comment">#搜索文件名赋给变量</span><br><span class="hljs-comment">#aux_source_directory(./ SRL_LIST) #也是搜索当前文件夹文件的命令</span><br><br><span class="hljs-keyword">set</span>(HOME /home/moonlight/CMake_exam1)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin)<span class="hljs-comment">#设置可执行文件的输出路径</span><br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="4-制作库"><a href="#4-制作库" class="headerlink" title="4 制作库"></a>4 制作库</h3><p>1、制作#将库文件和头文件使用</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(NAME STATIC 源文件<span class="hljs-number">1</span> 源文件<span class="hljs-number">2</span> 源文件<span class="hljs-number">3</span>)<span class="hljs-comment">#STATIC生成静态库lib + name + .a</span><br><span class="hljs-keyword">add_library</span>(NAME SHARED 源文件<span class="hljs-number">1</span> 源文件<span class="hljs-number">2</span> 源文件<span class="hljs-number">3</span>)<span class="hljs-comment">#SHARED生成动态库lib + name + .so</span><br></code></pre></td></tr></table></figure><p> 2、指定库路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH /home/moonlight/<span class="hljs-keyword">test</span>) <span class="hljs-comment">#库路径</span><br></code></pre></td></tr></table></figure><p><strong>example 4.1</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#包含头文件所在的文件夹，可多个</span><br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<span class="hljs-comment">#搜索文件名赋给变量</span><br><br><span class="hljs-keyword">set</span>(HOME <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)<br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/lib_)<span class="hljs-comment">#设置库文件的输出路径</span><br><br><br><br><span class="hljs-comment">#制作静态库</span><br><span class="hljs-keyword">add_library</span>(calc STATIC <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-comment">#制作动态库</span><br><span class="hljs-keyword">add_library</span>(calc SHARED <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-使用库"><a href="#5-使用库" class="headerlink" title="5 使用库"></a>5 使用库</h3><p>1、链接</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#静态库链接</span><br><span class="hljs-keyword">link_libraries</span>(&lt;static lib1&gt; &lt;static lib2&gt; ...) <span class="hljs-comment">#指定库路径，可多个，名字lib name .a可只要name</span><br><br><span class="hljs-comment">#链接路径</span><br><span class="hljs-keyword">link_directories</span>(&lt;lib path&gt;) <span class="hljs-comment">#静态库 动态库 均可</span><br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#动态库链接</span><br><span class="hljs-keyword">target_link_libraries</span>(&lt;<span class="hljs-keyword">target</span>&gt; [&lt;private/public/interface&gt; &lt;item&gt;] ...) <br><span class="hljs-comment">#可指定权限，默认public，库具有传递性</span><br><span class="hljs-comment">#public: 可以多重传递使用</span><br><span class="hljs-comment">#private: 仅第一层链接可以知道库中内容及归属</span><br><span class="hljs-comment">#interface：仅第一层链接可使用，但不清楚内部情况</span><br><br><span class="hljs-comment">#先生成程序，后链接动态库</span><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(app calc)<br></code></pre></td></tr></table></figure><p><strong>example 5</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#包含头文件所在的文件夹，可多个</span><br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<span class="hljs-comment">#搜索文件名赋给变量</span><br><br><span class="hljs-keyword">set</span>(HOME <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin)<span class="hljs-comment">#设置可执行文件的输出路径</span><br><br><br><br><span class="hljs-comment">#静态库链接, 先链接后生成可执行程序</span><br><span class="hljs-keyword">link_libraries</span>(calc)<span class="hljs-comment"># 该链接会将该静态库放到SRC_LIST列表中</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;HOME&#125;</span>/lib_static)<br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><br><span class="hljs-comment">#动态库链接，先生成可执行程序后链接</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;HOME&#125;</span>/lib_shared)<br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(app public calc)<br></code></pre></td></tr></table></figure><h3 id="6-日志"><a href="#6-日志" class="headerlink" title="6 日志"></a>6 日志</h3><p>用于判断过程中是否存在部分信息错误</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">message</span>([无/STATUE/WARNING/AUTHOR_WARNING/SEND_ERROR/FATA_ERROR]: <span class="hljs-string">&quot;内容&quot;</span>)<br></code></pre></td></tr></table></figure><p>无：重要信息</p><p>STATUS：非重要信息</p><p>WARNING：CMake警告，不会中断</p><p>AUTHOR_WARNING：更严重的警告，不会中断</p><p>SEND_ERROR：CMake错误，继续执行，但会跳过生成阶段</p><p>FATAL_ERROR：CMake严重错误，终止运行</p><h5 id="example-6"><a href="#example-6" class="headerlink" title="example 6"></a>example 6</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#包含头文件所在的文件夹，可多个</span><br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<span class="hljs-comment">#搜索文件名赋给变量</span><br><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin)<span class="hljs-comment">#设置可执行文件的输出路径</span><br><br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;xxxxxx&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;STATUSxxxxxx&quot;</span>)<br><span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;FATALxxxxxx&quot;</span>)<br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRLC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="7-字符串"><a href="#7-字符串" class="headerlink" title="7 字符串"></a>7 字符串</h3><p>1、<code>APPEND</code>拼接字符串变量</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(变量名 <span class="hljs-variable">$&#123;变量1&#125;</span> <span class="hljs-variable">$&#123;变量2&#125;</span> <span class="hljs-variable">$&#123;变量3&#125;</span> ...)<br><br><span class="hljs-keyword">list</span>(APPEND 变量名 <span class="hljs-variable">$&#123;变量1&#125;</span> <span class="hljs-variable">$&#123;变量2&#125;</span> <span class="hljs-variable">$&#123;变量3&#125;</span> ...)<span class="hljs-comment">#底层管理中子字符串之间隐含分号，用于分隔</span><br></code></pre></td></tr></table></figure><p>2、<code>REMOVE_ITEM</code>移除字符串变量</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(REMOVE_ITEM 变量名 需要删除的内容)<br></code></pre></td></tr></table></figure><h5 id="example-7"><a href="#example-7" class="headerlink" title="example 7"></a>example 7</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cmake_minimum_require(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<br><br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;==========&quot;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;==========&quot;</span>)<br><span class="hljs-keyword">list</span>(REMOVE_ITEM SRC_LIST main.cpp)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;==========&quot;</span>)<br><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;CAMKE_CURRENT_SOURCE_DIR&#125;</span>/bin)<br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><br><span class="hljs-keyword">set</span>(tmp hello world)<br><span class="hljs-keyword">set</span>(tmp1 <span class="hljs-variable">$&#123;tmp&#125;</span> <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;tmp&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;tmp1&#125;</span>)<br><span class="hljs-keyword">list</span>(APPEND tmp <span class="hljs-string">&quot;a1a&quot;</span> <span class="hljs-string">&quot;c2c&quot;</span> <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;tmp&#125;</span>)<br></code></pre></td></tr></table></figure><p>3、<code>LENGTH</code>获取长度</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(LENGTH 变量名 新的存储长度结果的字符串)<br><span class="hljs-keyword">list</span>(LENGTH SRC_LIST new_len)<br></code></pre></td></tr></table></figure><p>4、<code>GET</code>取字符串中对应索引的子串(正向索引从0开始，反向索引从-1开始)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(GET 变量名 位置索引 新的存储结果的字符串)<span class="hljs-comment">#索引超出列表范围则报错</span><br><span class="hljs-keyword">list</span>(GET SRC_LIST <span class="hljs-number">0</span> new_val)<span class="hljs-comment">#取第一个字串</span><br><span class="hljs-keyword">list</span>(GET SRC_LIST -<span class="hljs-number">1</span> new_val)<span class="hljs-comment">#取最后一个字串</span><br></code></pre></td></tr></table></figure><p>5、<code>JOIN</code>将列表中的子串通过连接符连接为一个字符串</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(JOIN 变量名 指定的连接符 新的字符串)<br><span class="hljs-keyword">list</span>(JOIN SRC_LIST <span class="hljs-string">&quot;xxx&quot;</span> new_str)<br></code></pre></td></tr></table></figure><p>6、<code>FIND</code>查找</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(FIND 变量名 需要搜索的变量 存储对应字符串的索引的变量)<span class="hljs-comment">#正向查找，没找到为-1</span><br><span class="hljs-keyword">list</span>(FIND SRC_LIST <span class="hljs-string">&quot;xxx&quot;</span> new_index)<br></code></pre></td></tr></table></figure><p>7、<code>INSERT</code>在指定位置插入若干元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(INSERT 变量名 位置索引 插入的元素<span class="hljs-number">1</span> 插入的元素<span class="hljs-number">2</span> ...)<br><span class="hljs-keyword">list</span>(INSERT SRC_LIST <span class="hljs-number">1</span> <span class="hljs-string">&quot;4&quot;</span> <span class="hljs-string">&quot;5&quot;</span>)<span class="hljs-comment">#123;456; 得 123;4;5;456</span><br></code></pre></td></tr></table></figure><p>8、<code>PREPEND</code>在最前面插入元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(PREPEND 变量名 插入的元素<span class="hljs-number">1</span> ...)<br><span class="hljs-keyword">list</span>(PREPEND SRC_LIST <span class="hljs-string">&quot;0&quot;</span>)<span class="hljs-comment">#123;456; 得 0;123;456</span><br></code></pre></td></tr></table></figure><p>9、<code>POP_BACK</code>在最后删除元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(POP_BACK 变量名 可选变量)<span class="hljs-comment">#可选变量存删除的元素值</span><br><span class="hljs-keyword">list</span>(POP_BACK SRC_LIST)<span class="hljs-comment">#123;456 得 123</span><br></code></pre></td></tr></table></figure><p>10、<code>POP_FRONT</code>在前面删除元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(POP_FRONT 变量名 可选变量)<br><span class="hljs-keyword">list</span>(POP_BACK SRC_LIST)<span class="hljs-comment">#123;456 得 456</span><br></code></pre></td></tr></table></figure><p>11、<code>REMOVE_AT</code>将指定索引数据删除</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(REMOVE_AT 变量名 索引<span class="hljs-number">1</span> 索引<span class="hljs-number">2</span> ...)<br><span class="hljs-keyword">list</span>(REMOVE_AT SRC_LIST <span class="hljs-number">0</span> <span class="hljs-number">1</span>)<span class="hljs-comment">#123;456 得 空</span><br></code></pre></td></tr></table></figure><p>12、<code>REMOVE_DUPLICATES</code>删除重复元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(REMOVE_DUPLICATES 变量名)<br><span class="hljs-keyword">list</span>(REMOVE_DUPLICATES SRC_LIST)<span class="hljs-comment">#123;456;123;456 得 123;456</span><br></code></pre></td></tr></table></figure><p>13、<code>REVERSE</code>翻转列表</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(REVERSE 变量名)<br><span class="hljs-keyword">list</span>(REVERSE SRC_LIST)<br></code></pre></td></tr></table></figure><p>14、SORT列表排序</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(SORT 变量名 排序方法 是否大小写敏感 排序顺序)<br><span class="hljs-keyword">list</span>(SROT SRC_LIST [COMPARE &lt;方法&gt;] [CASE &lt;敏感&gt;] [ORDER &lt;排序&gt;])<br>COMPARE<span class="hljs-comment">#排序方法</span><br><span class="hljs-keyword">STRING</span><span class="hljs-comment">#按字符顺序进行排序</span><br>FILE_BASENAME<span class="hljs-comment">#按路径名排序</span><br>NATURAL<span class="hljs-comment">#自然数顺序排序</span><br>CASE<span class="hljs-comment">#指明是否大小写敏感</span><br>SENSITIVE<span class="hljs-comment">#敏感</span><br>INSENSITIVE<span class="hljs-comment">#不敏感</span><br>ORDER<span class="hljs-comment">#指定排序顺序</span><br>ASCENDING<span class="hljs-comment">#升序排序</span><br>DESCENDING<span class="hljs-comment">#降序排序</span><br></code></pre></td></tr></table></figure><p>帮助文档：</p><p><a href="https://cmake.org/cmake/help/v3.26/command/list.html">https://cmake.org/cmake/help/v3.26/command/list.html</a></p><h3 id="8-宏定义"><a href="#8-宏定义" class="headerlink" title="8 宏定义"></a>8 宏定义</h3><p>用于给具有条件判断的宏程序进行指定判断宏定义，例如如下c++程序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;DEBUG&quot;</span> &lt;&lt; endl;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    cout &lt;&lt; <span class="hljs-string">&quot;CORRECT&quot;</span> &lt;&lt; endl;<br><span class="hljs-meta">#endef</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在生成程序是可以指定该宏是否定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">g++ *.cpp -DDEBUG -o app<br></code></pre></td></tr></table></figure><p>在cmake中可以使用<code>add_definitions(-D宏名字)</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cmake_minimun_require(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<br><br><span class="hljs-keyword">add_definitions</span>(-DDEBUG)<br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LISt&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="9-嵌套CMake"><a href="#9-嵌套CMake" class="headerlink" title="9 嵌套CMake"></a>9 嵌套CMake</h3><p>最外层<code>CMakeLists.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><br><span class="hljs-comment">#定义变量</span><br><span class="hljs-comment">#静态库生成的路径</span><br><span class="hljs-keyword">set</span>(LIBPATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br><span class="hljs-keyword">set</span>(EXECPATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<br><span class="hljs-keyword">set</span>(HEADPATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><span class="hljs-comment">#头文件途径</span><br><span class="hljs-keyword">set</span>(CALCLIB calc)<br><span class="hljs-keyword">set</span>(SORTLIB sort)<br><span class="hljs-comment">#库文件路径</span><br><span class="hljs-keyword">set</span>(APPNAME1 app1)<br><span class="hljs-keyword">set</span>(APPNAME2 app2)<br><br><span class="hljs-comment">#给当前节点添加子目录</span><br><span class="hljs-keyword">add_subdirectory</span>(calc)<br><span class="hljs-keyword">add_subdirectory</span>(sort)<br><span class="hljs-keyword">add_subdirectory</span>(test1)<br><span class="hljs-keyword">add_subdirectory</span>(test2)<br></code></pre></td></tr></table></figure><p><img src="/./CMake%E5%AD%A6%E4%B9%A0/image-20240619210330403.png"></p><p><code>calc/CMakeList.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(calc)<br><span class="hljs-keyword">aux_source_directory</span>(./ SRC)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEADPATH&#125;</span>)<br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;LIBPATH&#125;</span>)<br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;CALCLIB&#125;</span> STATIC <span class="hljs-variable">$&#123;SRC&#125;</span>)<br></code></pre></td></tr></table></figure><p><code>test1/CMakeList.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(test1)<br><span class="hljs-keyword">aux_source_directory</span>(./ SRC)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEADPATH&#125;</span>)<br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;LIBPATH&#125;</span>)<br><span class="hljs-keyword">link_libraries</span>(<span class="hljs-variable">$&#123;CALCLIB&#125;</span>)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;EXECPATH&#125;</span>)<br><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;APPNAME1&#125;</span> <span class="hljs-variable">$&#123;SRC&#125;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP 学习笔记</title>
    <link href="/2024/05/26/HTTP/"/>
    <url>/2024/05/26/HTTP/</url>
    
    <content type="html"><![CDATA[<p>应用层协议</p><ul><li>如果网络模型是B&#x2F;S（Brower&#x2F;Server，浏览器&#x2F;服务器）结构，就需要用http协议</li></ul><span id="more"></span><p><strong>HTTP请求</strong>：客户端给服务器发送数据，主要使用的有GET，POST两种请求<br><strong>HTTP响应</strong>：服务器给客户端恢复数据<br>HTTP协议封装好数据之后是一个数据块，得到若干行数据，使用换行符：\r\n，通过\r\n可以判断该行结束</p><p><em>学习参考：b站视频：<a href="https://www.bilibili.com/video/BV1XB4y1B7P9?p=9&vd_source=735fee8a67fec0b5a5f3625ab2fdb28b">https://www.bilibili.com/video/BV1XB4y1B7P9?p=9&amp;vd_source=735fee8a67fec0b5a5f3625ab2fdb28b</a>     作者：爱编程的大丙</em></p><h3 id="1-1-HTTP请求"><a href="#1-1-HTTP请求" class="headerlink" title="1.1 HTTP请求"></a>1.1 HTTP请求</h3><ul><li>请求行：GET和POST请求行都分为三个部分：请求类型，请求目录，http版本</li><li>请求头：键值对</li><li>空行</li><li>客户端向服务器提交的数据块：GET没有（已在请求行第二部分有），POST有，在最后</li></ul><h5 id="GET-：请求服务器上的静态数据"><a href="#GET-：请求服务器上的静态数据" class="headerlink" title="GET ：请求服务器上的静态数据"></a><code>GET</code> ：请求服务器上的静态数据</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//请求行</span><br>GET /地址/文件名 HTTP/<span class="hljs-number">1.1</span>      <span class="hljs-comment">// 第一个&quot;/&quot;表示服务器提供的资源目录</span><br><br><span class="hljs-comment">//常见的请求头， 键值对</span><br><span class="hljs-symbol">Host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.31</span><span class="hljs-number">.89</span>:<span class="hljs-number">10000</span>    <span class="hljs-comment">// 请求连接的ip地址和端口</span><br><span class="hljs-symbol">Connection:</span> keep-alive<span class="hljs-comment">// 和服务器一直保持连接</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> ... <span class="hljs-comment">// 浏览器的内核版本</span><br><span class="hljs-symbol">Accept:</span> image/gif, image/jpeg, application/vnd.ms-excel, ... <span class="hljs-comment">// 客户端可识别的类型列表</span><br>Accept-Encoding: gzip, deflate <span class="hljs-comment">// 压缩方式</span><br>Accept-Language: zh-CN <span class="hljs-comment">// 语言: zh中文，en英文</span><br><br><span class="hljs-comment">//空行</span><br><br><span class="hljs-comment">//请求内容为空</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// GET请求行样例</span><br>GET /? <span class="hljs-attr">username</span><span class="hljs-operator">=</span>subwen%<span class="hljs-number">40</span>qq.com<span class="hljs-variable">&amp;phone</span>=<span class="hljs-number">11111111</span><span class="hljs-variable">&amp;email</span>=sub%<span class="hljs-number">40</span>qq.com<span class="hljs-variable">&amp;date</span>=<span class="hljs-number">2020</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span><span class="hljs-variable">&amp;sex</span>=male<span class="hljs-variable">&amp;class</span>=<span class="hljs-number">3</span><span class="hljs-variable">&amp;rule</span>=on HTTP/<span class="hljs-number">1.1</span> <span class="hljs-comment">// GET提交动态数据在地址栏可以看到</span><br></code></pre></td></tr></table></figure><h5 id="POST-请求动态数据"><a href="#POST-请求动态数据" class="headerlink" title="POST : 请求动态数据"></a><code>POST</code> : 请求动态数据</h5><p> POST的请求行中不包含数据字符串，这些数据保存在最后的“请求内容”部分，内容用“&amp;”分隔</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// 请求行</span><br>POST / HTTP/<span class="hljs-number">1.1</span><br><br><span class="hljs-comment">// 请求头</span><br><span class="hljs-symbol">Host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.31</span><span class="hljs-number">.89</span>:<span class="hljs-number">10000</span><br><span class="hljs-symbol">Connection:</span> keep-alive<br>Connect-Length: <span class="hljs-number">98</span><span class="hljs-comment">//提交的内容的长度</span><br>Cache-Control: <span class="hljs-attr">max-age</span><span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-symbol">Origin:</span> null<br>Content-Type: application/x-www-form-urlencoded<span class="hljs-comment">//客户端告诉服务器提交的数据的格式</span><br>User-Agent: Mozillz/<span class="hljs-number">5.0</span> 类似GET<br><span class="hljs-symbol">Accept:</span> <br>Accept-Encoding: <br>Accept-Language: <br><br><span class="hljs-comment">// 空行</span><br><br><span class="hljs-comment">// 请求内容</span><br><span class="hljs-attr">username</span><span class="hljs-operator">=</span>subwen%<span class="hljs-number">40</span>qq.com<span class="hljs-variable">&amp;phone</span>=<span class="hljs-number">11111111</span><span class="hljs-variable">&amp;email</span>=sub%<span class="hljs-number">40</span>qq.com<span class="hljs-variable">&amp;date</span>=<span class="hljs-number">2020</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span><span class="hljs-variable">&amp;sex</span>=male<span class="hljs-variable">&amp;class</span>=<span class="hljs-number">3</span><span class="hljs-variable">&amp;rule</span>=on  <span class="hljs-comment">// POST提交动态数据在地址栏不可以看到，更安全</span><br></code></pre></td></tr></table></figure><p>POST主要用于更新服务器资源，因此需要指明提交的数据类型！</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、Content-<span class="hljs-keyword">Type</span>: application/x-www-form-urlencoded<br>username=subwen%<span class="hljs-number">40</span>qq.com&amp;phone=<span class="hljs-number">11111111</span>&amp;email=sub%<span class="hljs-number">40</span>qq.com&amp;<span class="hljs-type">date</span>=<span class="hljs-number">2020</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>&amp;sex=male&amp;<span class="hljs-keyword">class</span>=<span class="hljs-number">3</span>&amp;<span class="hljs-keyword">rule</span>=<span class="hljs-keyword">on</span><br>title=test&amp;<span class="hljs-keyword">user</span>=kevin&amp;passwd=wasd0104<br><br><span class="hljs-number">2</span>、Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span>; charset=utf<span class="hljs-number">-8</span><br>&#123;&quot;title&quot;: &quot;test&quot;, &quot;sub&quot;: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]&#125;<br><br><span class="hljs-number">3</span>、Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/<span class="hljs-type">xml</span>  // 近几年用的少了，用<span class="hljs-type">json</span>替换<br>&lt;?<span class="hljs-type">xml</span> version=&quot;1.0&quot; encoding=&quot;utf8&quot;?&gt;<br>&lt;methodcall&gt;<br>&lt;methodname color=&quot;red&quot;&gt; examples.getStateName &lt;/methodname&gt;<br>&lt;params&gt;<br>&lt;<span class="hljs-keyword">value</span>&gt;&lt;i4&gt;<span class="hljs-number">41</span>&lt;/i4&gt;&lt;/<span class="hljs-keyword">value</span>&gt;<br>&lt;/params&gt;<br>&lt;/methodcall&gt;<br><br><span class="hljs-number">4</span>、Content-<span class="hljs-keyword">Type</span>: multipart/form-data  // 传输大文件用，传输不同类型的多个文件<br><span class="hljs-comment">------WebKitFormBoundaryPpL3BfPQ4cHShsBz \r\n  //分界线，随机生成的</span><br>Content-Disposition: form-data; filename=&quot;qw.png&quot;; size=<span class="hljs-number">1024</span>; md5=&quot;xxx&quot; // 键值对，文件类型<br>Content-<span class="hljs-keyword">Type</span>: image/png \r\n;<br>\r\n<br>文件内容<br>文件内容<br><span class="hljs-comment">------WebKitFormBoundaryPpL3BfPQ4cHShsBz--</span><br>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;qw.png&quot;<br>Content-<span class="hljs-keyword">Type</span>: image/png \r\n; md5=&quot;xxxxxxxxxxx&quot; <br>\r\n<br>文件内容<br>文件内容<br><span class="hljs-comment">------WebKitFormBoundaryPpL3BfPQ4cHShsBz--</span><br></code></pre></td></tr></table></figure><h3 id="1-2-HTTP响应"><a href="#1-2-HTTP响应" class="headerlink" title="1.2 HTTP响应"></a>1.2 HTTP响应</h3><ul><li>状态行：http版本，状态码，状态描述</li><li>响应头</li><li>空行</li><li>回复给客户端的数据</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 状态行</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> Ok<br><br><span class="hljs-comment">// 相应头</span><br><span class="hljs-built_in">Server</span>: micro_httpd<br>Date: Fri, <span class="hljs-number">18</span> Jul <span class="hljs-number">2014</span> <span class="hljs-number">14</span>:<span class="hljs-number">34</span>:<span class="hljs-number">25</span> GMT<br>Content-Type: text/plain; charset=iso<span class="hljs-number">-8859</span><span class="hljs-number">-1</span>  (**必选项**)<br><span class="hljs-comment">// 数据格式，text/plain纯文本，text/html网页 </span><br><span class="hljs-comment">// charset编码格式，iso-8859-1为纯英文，utf-8支持中文</span><br>Content-Length: <span class="hljs-number">32</span> <span class="hljs-comment">//数据长度</span><br>Location: https:<span class="hljs-comment">//www.baidu.com</span><br>Content-Language: zh-CN<br>Last-Modified: Fri, <span class="hljs-number">18</span> Jul <span class="hljs-number">2014</span> <span class="hljs-number">20</span>:<span class="hljs-number">36</span>:<span class="hljs-number">36</span> GMT<br>Connection: close<br><br><span class="hljs-comment">// 空行</span><br><br><span class="hljs-comment">// 响应内容</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-built_in">main</span>(<span class="hljs-type">void</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world！&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>状态行部分的状态码分类和常见状态码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">状态码<br><span class="hljs-number">1</span>、<span class="hljs-number">1</span>xx: 指示信息<span class="hljs-comment">--表示请求已接收，继续处理</span><br><span class="hljs-number">2</span>、<span class="hljs-number">2</span>xx: 成功<span class="hljs-comment">--表示请求已成功接收、理解、接受</span><br><span class="hljs-number">3</span>、<span class="hljs-number">3</span>xx: 重定向<span class="hljs-comment">--要完成请求必须进行更进一步的操作（网络地址重新访问，例如http访问百度，会重定向为https）</span><br><span class="hljs-number">4</span>、<span class="hljs-number">4</span>xx: 客户端错误<span class="hljs-comment">--请求有语法错误或请求无法实现</span><br><span class="hljs-number">5</span>、<span class="hljs-number">5</span>xx: 服务器端错误<span class="hljs-comment">--服务器未能实现合法的请求</span><br><br>常见状态码：<br><span class="hljs-number">200</span> OK客户端请求成功<br><span class="hljs-number">400</span> Bad Request客户端请求有语法错误<br><span class="hljs-number">401</span> Unauthorized 请求未经授权<br><span class="hljs-number">403</span> Forbidden服务器收到请求，但是拒绝提供服务<br><span class="hljs-number">404</span> <span class="hljs-keyword">Not</span> <span class="hljs-built_in">Found</span>请求资源不存在，e.g. 输入了错误的url<br><span class="hljs-number">500</span> <span class="hljs-type">Internal</span> <span class="hljs-keyword">Server</span> Error 服务器发生不可预期的错误<br><span class="hljs-number">503</span> <span class="hljs-keyword">Server</span> Unavailable 服务器当前不可用，一段时间后可能恢复<br></code></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h5 id="1、读取HTTP请求行的内容-–-sscanf匹配字符"><a href="#1、读取HTTP请求行的内容-–-sscanf匹配字符" class="headerlink" title="1、读取HTTP请求行的内容 – sscanf匹配字符"></a>1、读取HTTP请求行的内容 – sscanf匹配字符</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* s = <span class="hljs-string">&quot;http://www.baidu.com:1234&quot;</span><br><span class="hljs-type">char</span> protocol[<span class="hljs-number">32</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">char</span> host[<span class="hljs-number">128</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">char</span> port[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%[^:]://%[^:]:%[1-9]&quot;</span>, protocol, host, port);<br><span class="hljs-comment">// 结果: protocol=http, host=www.baidu.com, port=1234</span><br><br>[<span class="hljs-number">1</span>] ，表示<span class="hljs-number">1</span>符合条件<br>[<span class="hljs-number">1</span><span class="hljs-number">-9</span>], 表示<span class="hljs-number">1</span><span class="hljs-number">-9</span>符合条件<br>[a,b,d,F]，表示列举的这几个符合<br>[<span class="hljs-number">1</span><span class="hljs-number">-9</span>, a-v]，表示<span class="hljs-number">1</span><span class="hljs-number">-9</span>，a-v符合<br><br>[^<span class="hljs-number">1</span>] ,表示<span class="hljs-number">1</span>不符合，遇到<span class="hljs-number">1</span>即结束<br>[^<span class="hljs-number">1</span><span class="hljs-number">-9</span>], 表示遇到<span class="hljs-number">1</span><span class="hljs-number">-9</span>都结束<br></code></pre></td></tr></table></figure><h5 id="2、目录遍历-–-opendir-readdir-closedir"><a href="#2、目录遍历-–-opendir-readdir-closedir" class="headerlink" title="2、目录遍历 – opendir, readdir, closedir"></a>2、目录遍历 – <code>opendir</code>, <code>readdir</code>, <code>closedir</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;dirent.h&gt;</span></span><br><br><span class="hljs-comment">// 打开目录，返回目录指针 DIR*</span><br><span class="hljs-function">DIR *<span class="hljs-title">opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span></span>;<br><br><span class="hljs-comment">// 读取目录中的文件, 调用一次读取一个文件，返回文件内容的结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span> *<span class="hljs-built_in">readdir</span>(DIR* dirp);<br><br><span class="hljs-comment">// 关闭目录</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">closedir</span><span class="hljs-params">(DIR *dirp)</span></span>; <span class="hljs-comment">//为opendir获取的DIR*</span><br></code></pre></td></tr></table></figure><p>结构体dirent的内容：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span>&#123;<br>    <span class="hljs-type">ino_t</span>d_ino; <span class="hljs-comment">//文件对应的inode</span><br>    <span class="hljs-type">off_t</span>d_off;<span class="hljs-comment">//文件在当前目录中的偏移量</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>d_reclen;<span class="hljs-comment">//文件名字的实际长度</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> d_type;<span class="hljs-comment">//文件的类型</span><br>    <span class="hljs-type">char</span>d_name[<span class="hljs-number">256</span>];<span class="hljs-comment">//文件的名字</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结构体中的文件类型<code>d_type</code>，可以使用的宏值如下;<br><code>DT_BLK</code> : 块设备文件;<br><code>DT_CHR</code> : 字符设备文件;<br><code>DT_DIR</code> ：目录文件;<br><code>DT_FIFO</code> ：管道文件;<br><code>DT_LNK</code> ：软连接文件;<br><code>DT_REG</code> ：普通文件;<br><code>DT_SOCK</code> ：本地套件字文件;<br><code>DT_UNKNOWN</code> ：无法识别的文件类型;</p><p>访问文件目录的实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span>&#123;<br>    <span class="hljs-comment">//1.打开目录</span><br>    DIR* dir = <span class="hljs-built_in">opendir</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span>(dir == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-comment">// 2.遍历目录内容</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span>* fp = <span class="hljs-built_in">readdir</span>(dir);<br>        <span class="hljs-keyword">if</span>(fp == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-keyword">if</span>(pt-&gt;d_type == DT_REG)&#123;<br>            <span class="hljs-type">char</span>* p = <span class="hljs-built_in">strstr</span>(ptr-&gt;d_name, <span class="hljs-string">&quot;.mp3&quot;</span>); <span class="hljs-comment">// strstr返回第一次出现&quot;.mp3&quot;的位置</span><br>            <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">nullptr</span> &amp;&amp; *(p+<span class="hljs-number">4</span>) == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123; <span class="hljs-comment">// 判断该文件是否以.mp3结尾</span><br>                ++count;<br>                cout &lt;&lt; <span class="hljs-string">&quot;filename: &quot;</span> &lt;&lt; fp-&gt;d_name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;目录:&quot;</span> &lt;&lt; argv[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot;中的mp3文件的个数为：&quot;</span> &lt;&lt; count &lt;&lt; endl;<br>    <br>    <span class="hljs-comment">// 3.关闭目录</span><br>    <span class="hljs-built_in">closedir</span>(dir);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、目录遍历-–-scandir"><a href="#3、目录遍历-–-scandir" class="headerlink" title="3、目录遍历 – scandir"></a>3、目录遍历 – <code>scandir</code></h5><p>仅遍历当前层目录内容，不递归遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">scandir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* dirp, <span class="hljs-comment">// 访问的目录路径</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">struct</span> dirent* **namelist, <span class="hljs-comment">// namelist 指向一个指针数组 struct dirent* tmp[]</span></span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span> (*isMp3)(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent *), <span class="hljs-comment">// 过滤当前文件夹中文件的函数,不过滤NULL</span></span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span> (*compar)(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **))</span></span>; <span class="hljs-comment">// 排序函数</span><br></code></pre></td></tr></table></figure><p>排序函数 – compar，一般直接调用Linux提供的 <code>alphasort</code> 或 <code>versionsort</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">alphasort</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **a, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">versionsort</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **a, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **b)</span></span>;<br></code></pre></td></tr></table></figure><p>判断是否为mp3文件的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isMp3</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent* ptr)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(ptr-&gt;d_type == DT_REG)&#123;<br>        <span class="hljs-type">char</span>* p = <span class="hljs-built_in">strstr</span>(ptr-&gt;d_name, <span class="hljs-string">&quot;.mp3&quot;</span>);<br>        <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; *(p+<span class="hljs-number">4</span>) == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用举例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span>** namelist;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">scandir</span><span class="hljs-params">(dirName, &amp;namelist, <span class="hljs-literal">NULL</span>, alphasort)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i)&#123;<br>    <span class="hljs-type">char</span>* name = namelist[i]-&gt;d_name;<span class="hljs-comment">// 获取文件名</span><br>    <span class="hljs-type">char</span> subPath[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">sprintf</span>(subPath, <span class="hljs-string">&quot;%s/%s&quot;</span>, dirName, name);<span class="hljs-comment">// 获取文件路径</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、判断文件类型"><a href="#4、判断文件类型" class="headerlink" title="4、判断文件类型"></a>4、判断文件类型</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-comment">// 用于描述Linux系统文件属性结构的结构体stat</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stat</span> &#123; <br><span class="hljs-type">mode_t</span>     st_mode;       <span class="hljs-comment">//文件对应的模式，文件，目录等</span><br><span class="hljs-type">ino_t</span>      st_ino;       <span class="hljs-comment">//inode节点号</span><br><span class="hljs-type">dev_t</span>      st_dev;        <span class="hljs-comment">//设备号码</span><br><span class="hljs-type">dev_t</span>      st_rdev;       <span class="hljs-comment">//特殊设备号码</span><br><span class="hljs-type">nlink_t</span>    st_nlink;      <span class="hljs-comment">//文件的连接数</span><br><span class="hljs-type">uid_t</span>      st_uid;        <span class="hljs-comment">//文件所有者</span><br><span class="hljs-type">gid_t</span>      st_gid;        <span class="hljs-comment">//文件所有者对应的组</span><br> <span class="hljs-type">off_t</span>      st_size;       <span class="hljs-comment">//普通文件，对应的文件字节数</span><br><span class="hljs-type">time_t</span>     st_atime;      <span class="hljs-comment">//文件最后被访问的时间</span><br><span class="hljs-type">time_t</span>     st_mtime;      <span class="hljs-comment">//文件内容最后被修改的时间</span><br><span class="hljs-type">time_t</span>     st_ctime;      <span class="hljs-comment">//文件状态改变时间</span><br><span class="hljs-type">blksize_t</span> st_blksize;    <span class="hljs-comment">//文件内容对应的块大小</span><br><span class="hljs-type">blkcnt_t</span>   st_blocks;     <span class="hljs-comment">//伟建内容对应的块数量</span><br>&#125;;<br><br><span class="hljs-comment">// 获取文件属性的函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path, <span class="hljs-keyword">struct</span> stat* struct_stat)</span></span>;  <span class="hljs-comment">// path文件路径, stat结构体地址</span><br><br><span class="hljs-comment">// 常用的判断宏函数</span><br><span class="hljs-built_in">S_ISLNK</span> (st_mode)    判断是否为符号连接<br><span class="hljs-built_in">S_ISREG</span> (st_mode)    是否为一般文件<br><span class="hljs-built_in">S_ISDIR</span> (st_mode)    是否为目录<br><span class="hljs-built_in">S_ISCHR</span> (st_mode)    是否为字符装置文件<br><span class="hljs-built_in">S_ISBLK</span> (st_mode)    是否为先进先出<br><span class="hljs-built_in">S_ISSOCK</span> (st_mode)   是否为socket<br></code></pre></td></tr></table></figure><p>调用举例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stat</span> st;<br><span class="hljs-built_in">stat</span>(path, &amp;st);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">S_ISDIR</span>(st.st_mode))&#123;<br>    cout &lt;&lt; ”是一个文件夹“ &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 学习笔记</title>
    <link href="/2024/05/17/MySQL/"/>
    <url>/2024/05/17/MySQL/</url>
    
    <content type="html"><![CDATA[<p>基础的MySQL结构和语法</p><span id="more"></span><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><p>文本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">varchar(n)#字符串，长度为n<br></code></pre></td></tr></table></figure><p>数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">binary(n)#二进制串，长度为n<br>integer(n)#整数值，长度为p<br>smallint#整数值，长度5<br>int#整数值，长度10<br>bigint#整数值，长度19<br>float(n)#浮点数，长度16，可变长<br></code></pre></td></tr></table></figure><p>时间&#x2F;日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">date#日期，year-mouth-day，可以通过year(date)获取年，月，日<br>time#时间，hour-minute-second，可以通过hour(time)获取时，分，秒<br>timestamp#年，月，日，时，分，秒<br></code></pre></td></tr></table></figure><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>表名：<code>user_profile</code></p><table><thead><tr><th align="center">id</th><th align="center">device_id</th><th align="center">gender</th><th align="center">age</th><th align="center">university</th><th align="center">gpa</th><th align="center">question_cnt</th><th align="center">other</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">213</td><td align="center">male</td><td align="center">21</td><td align="center">东大学</td><td align="center">3.4</td><td align="center">2</td><td align="center">12345,1,http1</td></tr><tr><td align="center">2</td><td align="center">314</td><td align="center">male</td><td align="center">19</td><td align="center">西大学</td><td align="center">3.3</td><td align="center">5</td><td align="center">22345,2,http2</td></tr><tr><td align="center">3</td><td align="center">654</td><td align="center">famale</td><td align="center">20</td><td align="center">南大学</td><td align="center">3.8</td><td align="center">3</td><td align="center">32345,3,http3</td></tr><tr><td align="center">4</td><td align="center">315</td><td align="center">famale</td><td align="center">22</td><td align="center">北大学</td><td align="center">3.7</td><td align="center">1</td><td align="center">42345,4,http4</td></tr><tr><td align="center">5</td><td align="center">543</td><td align="center">male</td><td align="center"></td><td align="center">北大学</td><td align="center">3.5</td><td align="center">10</td><td align="center">523455,http5</td></tr><tr><td align="center">6</td><td align="center">131</td><td align="center">male</td><td align="center">23</td><td align="center">南大学</td><td align="center">3.8</td><td align="center">7</td><td align="center">62345,6,http6</td></tr><tr><td align="center">7</td><td align="center">421</td><td align="center">male</td><td align="center">18</td><td align="center">东大学</td><td align="center">3.9</td><td align="center">6</td><td align="center">72345,7,http7</td></tr></tbody></table><p><code>insert into</code> 表名(字段名1，字段名2，….) <code>value</code>(插入值1，插入值2，…)</p><p><code>delete</code> 删除字段 <code>from</code> 表名</p><p><code>select</code> 查询字段 <code>from</code> 表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select device_id, gender, gpa from user_profile;<br></code></pre></td></tr></table></figure><p><strong>如果不清楚列名，可以使用数字1，2，3…表示对应列号来查询，分组和排序</strong></p><p><code>group by</code> 字段#分组</p><p><code>order by</code> 字段#排序，desc降序，asc升序</p><p><code>limit</code> n#限制条数为n，可结合order by得到最大&#x2F;最小的前n条数据</p><p><code>offset</code> m#设置起始索引位置，索引从0开始，结合limit选择任意位置任意长度数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select device_id, gender, gpa from user_profile<br>group by university<br>order by gpa limit 1#取第一小的数据<br>#order by gpa limt 1 offset 1  #取第二小的数据<br></code></pre></td></tr></table></figure><p><code>where</code> 条件#针对原表数据，可结合<code>in</code>, <code>not in</code>, <code>and</code>, <code>or</code>来进行筛选</p><p><code>having</code>条件#针对非原表数据，例如组合重命名得到的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select device_id, gender, gpa from user_profile<br>where university in (&quot;东大学&quot;，&quot;西大学&quot;) or university not in (&quot;南大学&quot;);<br><br>select avg(question_cnt) as avg_quest from user_profile<br>group by university<br>having avg_quest &gt; 3;<br></code></pre></td></tr></table></figure><p><strong>连接函数：</strong></p><p><code>inner join</code> 表名 <code>on</code> 条件</p><p>#内连接 两个表中都满足条件的数据进行连接</p><p><code>left join</code> 表名 <code>on</code> 条件</p><p>#左连接 左表为基准，找出右表&#x3D;左表的数据，右表没有的数据则为空</p><p><code>right join</code> 表名 <code>on</code> 条件</p><p>#右连接 右表为基准，找出左表&#x3D;右表的数据，左表没有的数据则为空</p><p><code>full join</code> 表名 <code>on</code> 条件</p><p>#全连接，结果等于<code>left join</code> 和 <code>right join</code>的结果合成的表</p><p><code>self join</code> 表名 <code>on</code> 条件</p><p>#自连接，用于不清楚自身表部分数据时的筛选</p><p><code>union</code> </p><p>#联合查询，要求数据表列数一致，查询结果会自动去除重复行，<code>union all</code>不去重</p><p>表名：<code>question_detail</code></p><table><thead><tr><th align="center">id</th><th align="center">device_id</th><th align="center">question_id</th><th align="center">difficult_level</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">213</td><td align="center">111</td><td align="center">hard</td></tr><tr><td align="center">2</td><td align="center">314</td><td align="center">112</td><td align="center">medium</td></tr><tr><td align="center">3</td><td align="center">213</td><td align="center">113</td><td align="center">easy</td></tr><tr><td align="center">4</td><td align="center">315</td><td align="center">114</td><td align="center">hard</td></tr><tr><td align="center">5</td><td align="center">314</td><td align="center">115</td><td align="center">easy</td></tr><tr><td align="center">6</td><td align="center">131</td><td align="center">116</td><td align="center">easy</td></tr><tr><td align="center">7</td><td align="center">213</td><td align="center">117</td><td align="center">medium</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(qd.question_id) / count(distinct qd.device_id) as avg_quest<br>from user_profile as u<br>inner join question_detail as qd<br>on u.device_id = qd.device_id<br>where u.university = &quot;东大学&quot;;<br></code></pre></td></tr></table></figure><p><strong>条件函数：</strong></p><p><code>if(判断语句，满足的语句，不满足的语句)</code> #可嵌套使用if函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select if(age &lt; 20, &quot;20岁以下&quot;, if(age &lt; 22, &quot;20及以上&quot;, &quot;其他&quot;)) as age_cnt, avg(question_cnt) as avg_quest<br>from user_profile<br>group by age_cnt;<br></code></pre></td></tr></table></figure><p><strong>取字符串函数：</strong></p><p>#返回<code>substr</code>在<code>str</code>中第一次出现的位置，如果不存在，则返回0</p><p><code>locate(substr, str)</code></p><p>#从左边开始截取<code>str</code>，<code>length</code>是截取的长度</p><p><code>left(str, length)</code></p><p>#从右边开始截取<code>str</code>，<code>length</code>是截取的长度</p><p><code>right(str, length)</code></p><p>#返回<code>substr</code>在<code>str</code>中第<code>n</code>次出现位置之前的字符串，<code>n</code>为负数则从后数</p><p><code>substring_index(str,substr, n)</code></p><p>#返回<code>str</code>从第<code>n</code>个字符截取到第m个字符</p><p><code>substring(str, n, m)</code></p><p>#将<code>str</code>中的n字符替换成m字符</p><p><code>replace(str, str_old, str_new)</code></p><p>#计算字符串<code>str</code>的长度</p><p><code>length(str)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">取other中的http：<br><br>select right(other, 5) as webname<br>select substring_index(other, &#x27;,&#x27;, -1) as webname<br>select substring(8,5)<br><br>from user_profile;<br></code></pre></td></tr></table></figure><p><strong>其它：</strong></p><p><code>count</code>#统计数量</p><p><code>sum</code>#计算和</p><p><code>avg</code>#平均数量</p><p><code>round</code>(变量名,n)  #保留小数n位</p><p><code>as</code> 新的名字     #重命名</p><p><code>distinct</code> 变量#去重</p><p><code>is null</code>  #判空</p><p><code>like</code>，<code>%</code>，<code>_</code> #搜索指定格式，通配符：%表示0-n个字符，_表示一个字符</p><p><code>ifnull</code>(变量，0)#如果变量为null，则设置为0</p><p>……</p><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p>1、<code>ESNSE_RANK()</code>#对数据按<code>PARTTION</code>分类，然后按<code>ORDER</code>排序，相同排名后连续: 1 1 2 3 4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DENSE_RANK() OVER (PARTITION BY column1, column2, ... ORDER BY column3, column 4, ...)<br><br>e.g. #分别统计各部门内员工的薪水排名，相同薪水同排名<br>select salary, (DENSE_RANK() OVER (PARTITION BY department ORDER BY salary)) as rank<br>from Employee<br></code></pre></td></tr></table></figure><p>2、<code>RANK()</code>#语法和<code>ESNSE_RANK()</code>相同， 区别是相同排名后不连续: 1 1 3 4 5</p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p><code>CREATE FUNCTION</code> 创造函数</p><p><code>RETURNS</code> 返回值</p><p><code>BEGIN</code> 和 <code>END</code> 中间为函数体</p><p><code>DECLARE</code> 变量名 变量类型#声明变量</p><p><code>SET</code> 变量 &#x3D; 结果#变量赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#取职工表Employee中第N高的Salary<br>CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT<br>BEGIN<br>declare M INT;<br>    set M = N-1;<br>    RETURN (<br>       select distinct(salary) from Employee order by salary desc limit 1 offset M<br>    );<br>END<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2024/05/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/05/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>梳理所学知识的结构，加深思考；记录当前所遇到的问题和解决方法；在某个时间段回顾重点知识</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开始学习搭建个人博客，参考的博客如下：</p><p>爱扑bug的熊：<a href="https://blog.cuijiacai.com/blog-building/">https://blog.cuijiacai.com/blog-building/</a></p><p>知乎crystal的帖子：<a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p><p>hexo博客：<a href="https://yangyong2021.github.io/2023/09/22/hexo+github%E6%95%99%E7%A8%8B/">https://yangyong2021.github.io/2023/09/22/hexo+github%E6%95%99%E7%A8%8B/</a></p><p>本文主要是记录下在搭建过程中的一些重要知识点，以及遇到的一些问题。</p><h2 id="个人博客搭建：hexo-github"><a href="#个人博客搭建：hexo-github" class="headerlink" title="个人博客搭建：hexo+github"></a>个人博客搭建：hexo+github</h2><h3 id="一、hexo安装和本地网址生成"><a href="#一、hexo安装和本地网址生成" class="headerlink" title="一、hexo安装和本地网址生成"></a>一、hexo安装和本地网址生成</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先下载nodejs，git</span><br>nodejs: https://nodejs.org/en<br><span class="hljs-meta prompt_">#</span><span class="language-bash">nodejs 下载解压完成后，点击运行node.js文件夹中的 Install Additional Tools <span class="hljs-keyword">for</span> Node.js，配置环境</span><br>git: https://git-scm.com/downloads<br><span class="hljs-meta prompt_">#</span><span class="language-bash">git 安装就一直点下一步就好</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后打开git-bash执行下述操作来安装配置hexo</span><br>npm config set registry https://registry.npm.taobao.org #修改下载源，官网源比较慢<br><br>npm install hexo-cli -g #-g全局，安装hexo命令行工具<br><br>hexo init &quot;博客目录&quot;#创建博客目录，会有INFO反馈信息<br><br>cd &quot;博客目录&quot;# 进入博客目录<br><br>npm install # 为该博客安装依赖项，依赖项在package.json文件的dependencies字段可查看<br><br>hexo new post &quot;test&quot;# 会在sourse/_posts/ 目录下生成文件 &#x27;test.md&#x27;，打开编辑，具体格式查看_config.yml文件<br><br>hexo generate# 生成静态HTML文件到 /public 文件夹中<br><br>hexo server# 本地运行server服务预览，打开浏览器搜索 http://localhost:4000 即可预览博客<br></code></pre></td></tr></table></figure><h3 id="博客配置：-config-yml文件内容及对应的含义"><a href="#博客配置：-config-yml文件内容及对应的含义" class="headerlink" title="博客配置：_config.yml文件内容及对应的含义"></a>博客配置：_config.yml文件内容及对应的含义</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Hexo Configuration</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Source: https://github.com/hexojs/hexo/</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Site</span><br>title: Hexo  # 博客标题<br>subtitle:    # 博客副标题<br>description: # 博客描述<br>keywords: # 博客关键字<br>author: John Doe  # 作者<br>language: zh-cn   # 语言 zh-CN中文，en-US英文<br>timezone:    # 网站时区, Hexo默认电脑的时区,也可手动设置 Asia/Shanghai，America/New_York,Japan等<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">URL</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br>url: http://yoursite.com   # 博客右下角share展示的网址，必须http://或https://开头<br>root: #网站根目录，如果网站时子目录http://example.com/blog，则root=/blog/<br>permalink: :year/:month/:day/:title/   # 文章的 永久链接 格式<br><span class="hljs-meta prompt_"># </span><span class="language-bash">链接格式 <span class="hljs-comment"># 对应的具体网址</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># :year/:month/:day/:title/  # 2024/05/15/hello-world/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># :year-:month-:day-:title.html# 2024-05-15-hello-world.html</span></span><br>permalink_defaults:        # 永久链接中各部分的默认值<br>pretty_urls: #用于美化永久链接的展示，网址末尾是否添加 index.html 或 .html<br>  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Directory</span>   <br>source_dir: source     # 资源文件夹，这个文件夹用来存放内容<br>public_dir: public     # 公共文件夹，这个文件夹用于存放生成的站点文件。<br>tag_dir: tags          # 标签文件夹     <br>archive_dir: archives  # 归档文件夹<br>category_dir: categories     # 分类文件夹<br>code_dir: downloads/code     # Include code 文件夹<br>i18n_dir: :lang              # 国际化（i18n）文件夹<br>skip_render:                 # 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Writing</span><br>new_post_name: :title.md  # File name of new posts # 新文章的文件名称<br>default_layout: post      # 预设布局<br>titlecase: false # Transform title into titlecase # 把标题转换为 title case<br>external_link:<br>enable: true # open external links in new tab # 在新标签中打开链接<br>field: site # Apply to the whole site # 将该设置应用到所有网站都另起新标签<br>filename_case: 0          # 把文件名称转换为 (1) 小写或 (2) 大写<br>render_drafts: false      # 是否显示草稿<br>post_asset_folder: false  # 是否启动 Asset 文件夹<br>relative_link: false      # 把链接改为与根目录的相对位址    <br>future: true              # 显示未来的文章<br>syntax_highlighter: highlight.js # 代码块高亮设置，按照该js文件格式<br>highlight:                # 内容中代码块的设置    <br>  enable: true            # 开启代码块高亮<br>  line_number: true       # 显示行数<br>  auto_detect: false      # 如果未指定语言，则启用自动检测<br>  tab_replace:            # 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs<br>  wrap: true  # 将输出使用&lt;figure&gt;和&lt;table&gt;包裹，如果不包裹，则false<br>  hljs: false  # 为所有HTML输出的class加上hljs-前缀<br>prismjs:<br>  preprocess: true  # 浏览器端高亮（false）， 服务端高亮（true）<br>  line_number: true  # 行号显示<br>  tab_replace:   # 将Tab(\t)替换为给定值，默认为两个空格<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Category &amp; Tag</span><br>default_category: uncategorized# 默认分类<br>category_map:       # 分类别名<br>tag_map:            # 标签别名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Date / Time format</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Hexo uses Moment.js to parse and display date</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># You can customize the date format as defined in</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># http://momentjs.com/docs/#/displaying/format/</span></span><br>date_format: YYYY-MM-DD     # 日期格式<br>time_format: HH:mm:ss       # 时间格式<br>updated_option: &#x27;mtime&#x27;# 使用文件最后修改时间<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Pagination</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Set per_page to 0 to disable pagination</span></span><br>per_page: 10           # 每页显示的文章数量（0=关闭分页）<br>pagination_dir: page   # 分页目录 例如：http://example.com/page/1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Extensions</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Plugins: https://hexo.io/plugins/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Themes: https://hexo.io/themes/</span></span><br>theme: landscape   # 主题名称<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Include / Exclude file(s)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br>include:# Hexo默认不包括source/目录下除了_post和_data目录的其它文件和目录，可以用该字段复制添加到source目录下<br>exclude:# Hexo将不包括source/下的这些文件和目录<br>ignore:# Hexo会忽略这些文件和目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Extensions</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Plugins: https://hexo.io/plugins/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Themes: https://hexo.io/themes/</span></span><br>theme: landscape  #扩展，当前主题名称，值为false时禁用主题<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> 部署部分的设置</span><br>deploy:     <br>  type: &#x27;&#x27; # 类型，常用的git <br>  repo:    # github中的仓库地址<br>  branch:  # github仓库分支<br></code></pre></td></tr></table></figure><h3 id="安装配置中遇到的问题："><a href="#安装配置中遇到的问题：" class="headerlink" title="安装配置中遇到的问题："></a>安装配置中遇到的问题：</h3><p>如果想要修改<code>package.json</code>文件，通过<code>ls</code>命令查看当前文件夹可以看到该文件，直接使用<code>vim</code>进行编辑即可。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">&quot;博客目录&quot;</span><span class="hljs-comment">#进入博客目录</span><br><span class="hljs-keyword">ls</span> -l<span class="hljs-comment">#列表形式展示当前目录下的文件</span><br>vim package.json<span class="hljs-comment">#使用vim编辑器编辑package.json文件</span><br>i<span class="hljs-comment">#insert插入数据</span><br><br>&#123;<br><span class="hljs-string">//</span> <span class="hljs-string">......</span><br>    <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<span class="hljs-string">//</span> 这个部分主要是设置快捷指令的，键值对，左边是自己命名，右边是系统命令<br>        <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;hexo generate&quot;</span>,<br>        <span class="hljs-string">&quot;clean&quot;</span>: <span class="hljs-string">&quot;hexo clean&quot;</span>,<br>        <span class="hljs-string">&quot;deploy&quot;</span>: <span class="hljs-string">&quot;hexo deploy&quot;</span>,<br>        <span class="hljs-string">&quot;server&quot;</span>: <span class="hljs-string">&quot;hexo server&quot;</span><br>      &#125;,<br>    <span class="hljs-string">//</span> <span class="hljs-string">......</span><br>&#125;<br><br>Esc<span class="hljs-comment">#完成输入</span><br><span class="hljs-function">:wq</span><span class="hljs-comment">#保存并退出</span><br></code></pre></td></tr></table></figure><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240515160515919.png"></p><h3 id="二、Git将文件项目上传到Github"><a href="#二、Git将文件项目上传到Github" class="headerlink" title="二、Git将文件项目上传到Github"></a>二、Git将文件项目上传到Github</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd &quot;博客目录&quot;    # 打开git-bash，进入需要打包上传的目录<br>git init# 将该目录变成git能管理的仓库，成功后会显示（master）<br>git add 文件名   # 文件名如果为点”.“，则表示当前目录下所有文件 <br>git commit -m &quot;file first commit&quot;# 把文件提交到仓库，” “为提交相关说明<br>git remote add origin https://github.com/用户名/用户名.github.io.git# 关联到远程仓库，在github中仓库--&gt;code--&gt;HTTPS地址，这个新建的仓库名字必须和用户名相同，且后缀为github.io<br>git branch -M master # 切换当前分支为master<br>git push -u origin main# push到对应的仓库，orign为服务器名，master为分支名<br><br>git log # 查看历史提交信息<br>git reset commitID #通过log查找到的历史提交ID来回退程序<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果直接push报错</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">fatal: The current branch master has no upstream brancn.</span>  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">说明当前分支过多，系统无法确定是哪一个分支，解决方法如下：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git remote <span class="hljs-built_in">rm</span> origin  <span class="hljs-comment"># 删除现在绑定的远程地址</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git remote add origin https://github.com/文件名.git<span class="hljs-comment">#重新绑定</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git branch -M master<span class="hljs-comment"># 切换分支名为master，这个可以自由命名，没有的话push会自动生成</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git push -u origin master <span class="hljs-comment"># 推送到对应的分支，这个需要和branch切换的对应</span></span><br></code></pre></td></tr></table></figure><h3 id="三、部署hexo到GitHub-Pages"><a href="#三、部署hexo到GitHub-Pages" class="headerlink" title="三、部署hexo到GitHub Pages"></a>三、部署hexo到GitHub Pages</h3><p>首先安装<code>hexo-deployer-git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>文件末尾的<code>Deployment</code>部分的<code>deploy</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deploy:<br>  type: git <br>  repository: https://github.com:用户名/用户名.github.io.git # 添加的行，仓库两个用户名必须一致<br>  branch: master# 前面Git上传的分支名<br></code></pre></td></tr></table></figure><p>完成配置后即可进行部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo deploy 或者 hexo d<br></code></pre></td></tr></table></figure><p>在浏览器中输入：<code>https://用户名.github.io</code>即可访问博客啦！！！完成收工~</p><h3 id="常见错误1-–-hexo-d-出错"><a href="#常见错误1-–-hexo-d-出错" class="headerlink" title="常见错误1 – hexo d 出错"></a>常见错误1 – hexo d 出错</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">nothing to commit, working tree clean<br>fatal: unable to access &#x27;https://github.com/Moonswisdom/QinZhi2022.github.io.git/&#x27;: Failed 443 after 21058 ms: Couldn&#x27;t connect to server<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubl<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (C:\Users\12143\Moonlights\node_modules\hexo-deployer-git\wn.js:51:21)<br>    at ChildProcess.emit (node:events:519:28)<br>    at cp.emit (C:\Users\12143\Moonlights\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:294:12)<br></code></pre></td></tr></table></figure><p>说明之前已经部署过了，需要进行清空重置，解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean# 清除之前的部署信息<br>hexo generate# 生成页面<br>hexo deploy# 部署网页<br></code></pre></td></tr></table></figure><p>注意：如果这样还不行，则删除当前目录下的隐藏文件夹<code>.deploy_git/</code>， 可通过<code>ll -a</code>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf .deploy_git/#强制删除，-r递归删除文件夹，-f强制<br>git config --global core.autocrlf false#关闭git自动转换空格符，适用于仅在windows上运行<br></code></pre></td></tr></table></figure><p>然后接着执行解决方法的三个步骤即可。</p><h3 id="常见错误2-–-hexo-图片无法加载"><a href="#常见错误2-–-hexo-图片无法加载" class="headerlink" title="常见错误2 – hexo 图片无法加载"></a>常见错误2 – hexo 图片无法加载</h3><p>先检查当前编辑的<code>md</code>文件是不是在<code>source/_posts/</code>文件夹下，如果是其它位置编辑了再复制到该文件夹下会导致图片路径异常，接着设置Typora的图片保存路径如下。</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240516112050302.png"></p><p>该路径表示相同目录下的同名文件夹中。因此在<code>source/_post</code>文件夹下创建一个和当前<code>md</code>同名的文件夹。</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240516112736625.png"></p><p>把文章中的所有图片重新剪切粘贴一下，在这个文件夹中就会保存所有图片了。</p><p>然后将<code>Typora</code>文件中的图片链接修改为：<code>./文件夹名/图片名</code>，<code>./</code> 表示相对路径，用 <code>.\</code> 会报错。</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240516141757066.png"></p><p>接下来安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install https://github.com/7ym0n/hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>需要从这个地址下载的<code>index.js</code>文件才正确，如果之前下载了其它的，可以先卸载再安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm uninstall hexo-asset-image# 卸载插件<br><br>npm install https://github.com/7ym0n/hexo-asset-image --save # 安装插件<br></code></pre></td></tr></table></figure><p>在运行前将<code>./source/_posts/</code>图片文件夹复制到 <code>./source/</code>下，保证两个路径下的图片文件夹一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>至此，图片显示成功！如果不想显示图片名字，则把方括号中的内容删除如下。</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240516161528218.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
