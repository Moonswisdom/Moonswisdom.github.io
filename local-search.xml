<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++并发网络通信服务器</title>
    <link href="/2024/07/02/C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/07/02/C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>C++高并发项目学习：1、项目配置；2、简易C&#x2F;S通信；3、跨平台select；4、类封装；5、多线程；6、内存池</p><span id="more"></span><h1 id="1、项目配置"><a href="#1、项目配置" class="headerlink" title="1、项目配置"></a>1、项目配置</h1><h3 id="1-1-项目文件分类"><a href="#1-1-项目文件分类" class="headerlink" title="1.1 项目文件分类"></a>1.1 项目文件分类</h3><p>分开存储：将生成的可执行程序文件放在与项目同级的bin目录下，中间文件放在与项目同级的temp目录下</p><p>${SolutionDir} 解决方案地址，${Platform} 平台x64，${Configuration} 编译器，${ProjectName}项目名</p><p><img src="/./C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240702190038719.png"></p><p><img src="/./C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240702191701150.png"></p><h3 id="1-2-项目调试方法"><a href="#1-2-项目调试方法" class="headerlink" title="1.2 项目调试方法"></a>1.2 项目调试方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123; a = a + i; &#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1）打印数据调试"><a href="#1）打印数据调试" class="headerlink" title="1）打印数据调试"></a>1）打印数据调试</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123; a = a + i; &#125;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>) cout &lt;&lt; <span class="hljs-string">&quot;Debug: i==5, a = &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">//调试</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h5 id="2）普通断点和条件断点"><a href="#2）普通断点和条件断点" class="headerlink" title="2）普通断点和条件断点"></a>2）普通断点和条件断点</h5><p>在代码行设置断点，右键条件，设置筛选条件为 i&#x3D;&#x3D;5，在输出窗口输出调试结果Debug: a &#x3D; {a}。</p><p>{}里面是变量，$系统变量</p><p><img src="/./C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240702194426282.png"></p><p>i&#x3D;&#x3D;5时，断点该语句还没执行，所以a&#x3D;10</p><p><img src="/./C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240702195028250.png"></p><h5 id="3）Debug宏调试"><a href="#3）Debug宏调试" class="headerlink" title="3）Debug宏调试"></a>3）Debug宏调试</h5><p>宏选项为_DEBUG后，只有在Debug编译时才会执行，用Release时不会执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123; a = a + i; &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _DEBUG</span><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>) cout &lt;&lt; <span class="hljs-string">&quot;Debug: i==5, a = &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">//调试</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _DEBUG</span></span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h5 id="4）逐步调试和监视"><a href="#4）逐步调试和监视" class="headerlink" title="4）逐步调试和监视"></a>4）逐步调试和监视</h5><p>设置断点，运行程序，最下方监视窗口添加监视变量，逐步调试观察变量变化</p><p><img src="/./C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240702195622555.png"></p><h3 id="1-3-虚拟机下载配置"><a href="#1-3-虚拟机下载配置" class="headerlink" title="1.3 虚拟机下载配置"></a>1.3 虚拟机下载配置</h3><p>ubuntu下载</p><p>清华镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/22.04.4/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/22.04.4/</a></p><p>ubuntu配置</p><p>语言修改：Settings – Tegion &amp; language – Chinese &#x2F; English</p><p>权限修改：在<code>/etc/sudoers</code>系统文件中找到”root ALL&#x3D;(ALL) ALL”，在后面添加”username ALL&#x3D;(ALL) ALL”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs linux">sudo passwd root#设置超级管理员密码<br>su root#切换为超级管理员，提示输入密码Password:<br>sudo adduser 用户名#创建新用户<br>vi /etc/sudoers#为自己的用户添加权限<br>exit#退出超级管理员，用户可以进行sudo操作了<br></code></pre></td></tr></table></figure><p><img src="/./C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240702212421573.png"></p><p>常用插件：vim，ssh，g++</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs linux">sudo apt install vim// vim编辑器 <br>sudo apt install g++// c++编译<br>sudo apt install inet_tools// ifconfig命令库<br>sudo apt install ssh// 远程连接<br></code></pre></td></tr></table></figure><p>ssh远程链接Xshell进行办公：<a href="https://blog.csdn.net/m0_64655190/article/details/130569010">https://blog.csdn.net/m0_64655190/article/details/130569010</a></p><h1 id="2-简易的C-S的网络程序"><a href="#2-简易的C-S的网络程序" class="headerlink" title="2 简易的C&#x2F;S的网络程序"></a>2 简易的C&#x2F;S的网络程序</h1><p><img src="/./C++%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240703152227138.png"></p><h3 id="使用请求头和请求内容的结构体作为通信内容"><a href="#使用请求头和请求内容的结构体作为通信内容" class="headerlink" title="使用请求头和请求内容的结构体作为通信内容"></a>使用请求头和请求内容的结构体作为通信内容</h3><h3 id="2-1-结构体头文件structhead-h"><a href="#2-1-结构体头文件structhead-h" class="headerlink" title="2.1 结构体头文件structhead.h"></a>2.1 结构体头文件<code>structhead.h</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 指令</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span> &#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGOUT,<br>CMD_LOGOUT_RESULT,<br>CMD_ERROR<br>&#125;;<br><br><span class="hljs-comment">// 请求头</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span> &#123;<br><span class="hljs-type">short</span> m_CMD;<br><span class="hljs-type">short</span> m_Length;<br>&#125;;<br><br><span class="hljs-comment">// 请求内容 模拟登录和登出，不做有效性判断</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Login</span>() &#123;<br>m_CMD = CMD_LOGIN;<br>m_Length = <span class="hljs-built_in">sizeof</span>(Login);<br>&#125;<br><span class="hljs-type">char</span> m_Username[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> m_Password[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LoginResult</span>() &#123;<br>m_CMD = CMD_LOGIN_RESULT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>m_Result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Logout</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Logout</span>() &#123;<br>m_CMD = CMD_LOGOUT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(Logout);<br>&#125;<br><span class="hljs-type">char</span> m_Username[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LogoutResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LogoutResult</span>() &#123;<br>m_CMD = CMD_LOGOUT_RESULT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(LogoutResult);<br>m_Result = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Result;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-2-服务端和客户端头文件server-h和client-h"><a href="#2-2-服务端和客户端头文件server-h和client-h" class="headerlink" title="2.2 服务端和客户端头文件server.h和client.h"></a>2.2 服务端和客户端头文件<code>server.h</code>和<code>client.h</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">// 用于处理WinSock2.h 和 windows.h两个库函数的重复的宏，需要链接系统静态库ws2_32.lib使用</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><br><span class="hljs-comment">// Windows平台socket通信库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><br><span class="hljs-comment">// #pragma comment(lib, &quot;ws2_32.lib&quot;) Windows下引入静态库</span><br><span class="hljs-comment">// 跨平台：属性--链接器--输入--添加库依赖项--ws2_32.lib</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-comment">// C++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-meta">#incldue <span class="hljs-string">&quot;structhead.h&quot;</span></span><br></code></pre></td></tr></table></figure><h3 id="2-3-服务端程序server-cpp"><a href="#2-3-服务端程序server-cpp" class="headerlink" title="2.3 服务端程序server.cpp"></a>2.3 服务端程序<code>server.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;server.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// Windows下需要启动Socket网络环境</span><br>    <span class="hljs-comment">// MAKEWORD 将一个高位和一个低位字节进行合并：2^8+2 = 512+2 = 514，</span><br>    <span class="hljs-comment">// WORD为无符号整形，用于标识选择WinSock中的2.2版本协议</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>); <br>WSADATA dat;<br>    <span class="hljs-comment">// 启动socket网络环境</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br>    <br><span class="hljs-comment">// ------</span><br><span class="hljs-comment">// --用Socket API 建立简易TCP服务端</span><br>    <span class="hljs-comment">// ------</span><br><span class="hljs-comment">// 1、建立Socket</span><br>SOCKET _ServerScok = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><br><span class="hljs-comment">// 2、绑定端口bind</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br>_sin.sin_addr.S_un.S_addr = INADDR_ANY; <span class="hljs-comment">//使用默认IP</span><br><span class="hljs-comment">// inet_pton(AF_INET, &quot;127.0.0.1&quot;, &amp;_sin.sin_addr);//使用指定IP</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_ServerScok, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin))) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>    <br><span class="hljs-comment">// 3、监听端口listen</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_ServerScok, <span class="hljs-number">128</span>)) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;listen error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>    <br><span class="hljs-comment">// 4.建立连接</span><br>    sockaddr_in _caddr;<br>    <span class="hljs-type">int</span> _clen = <span class="hljs-built_in">sizeof</span>(_caddr);<br>    SOCKET _cSock = <span class="hljs-built_in">accept</span>(_sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_caddr, &amp;_clen);<br>    <span class="hljs-keyword">if</span> (_cSock == INVALID_SOCKET) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;accept error!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-type">char</span> ip[<span class="hljs-number">32</span>];<br>    <span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;_caddr.sin_addr, ip, <span class="hljs-built_in">sizeof</span>(ip));<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;New client connet, ip: &quot;</span> &lt;&lt; ip &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 5.收发消息recv, send</span><br>    <span class="hljs-type">char</span> _recvBuf[<span class="hljs-number">512</span>];<br>    <span class="hljs-type">char</span> _sendBuf[<span class="hljs-number">512</span>];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 接收请求头</span><br>        DataHeader header = &#123;&#125;;<br>        <span class="hljs-type">int</span> nlen = <span class="hljs-built_in">recv</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (nlen &lt;= <span class="hljs-number">0</span>) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Client out connect ...&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Command is &quot;</span> &lt;&lt; header.m_CMD &lt;&lt; <span class="hljs-string">&quot; , Length is &quot;</span> &lt;&lt; header.m_Length &lt;&lt; std::endl;<br>        <span class="hljs-comment">// 接收请求内容，因为前面请求头部分已经读取了sizeof(DataHeaeder)的数据，因此需要进行位偏移</span><br>        <span class="hljs-keyword">switch</span> (header.m_CMD) &#123;<br>            <span class="hljs-keyword">case</span> CMD_LOGIN:<br>                &#123;<br>                    <span class="hljs-comment">// 解析请求内容</span><br>                    Login login = &#123;&#125;;<br>                    <span class="hljs-built_in">recv</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;login + <span class="hljs-built_in">sizeof</span>(DataHeader), login.m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>                    std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Username is &quot;</span> &lt;&lt; login.m_Username &lt;&lt; <span class="hljs-string">&quot; , Password is &quot;</span> &lt;&lt; login.m_Password &lt;&lt; std::endl;<br>                    <span class="hljs-comment">// 返回请求结果</span><br>                    LoginResult loginRet;<br>                    <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;loginRet, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            <span class="hljs-keyword">case</span> CMD_LOGOUT:<br>                &#123;<br>                    <span class="hljs-comment">// 解析请求内容</span><br>                    Logout logout = &#123;&#125;;<br>                    <span class="hljs-built_in">recv</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;logout + <span class="hljs-built_in">sizeof</span>(DataHeader), logout.m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>                    std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Username is &quot;</span> &lt;&lt; logout.m_Username &lt;&lt; std::endl;<br>                    <span class="hljs-comment">// 返回请求结果</span><br>                    LogoutResult logoutRet;<br>                    <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;logoutRet, <span class="hljs-built_in">sizeof</span>(LogoutResult), <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            <span class="hljs-keyword">default</span>:<br>                &#123;<br>                    header.m_CMD = CMD_ERROR;<br>                    header.m_Length = <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(header), <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-comment">// 6、关闭Closesocket</span><br><span class="hljs-built_in">closesocket</span>(_ServerSock);<br><span class="hljs-comment">// ------</span><br>    <br>    <span class="hljs-comment">// 关闭socket网络环境</span><br><span class="hljs-built_in">WSACleanup</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-客户端程序client-cpp"><a href="#2-4-客户端程序client-cpp" class="headerlink" title="2.4 客户端程序client.cpp"></a>2.4 客户端程序<code>client.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;client.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br>    <span class="hljs-comment">// 启动socket网络环境</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br>    <br><span class="hljs-comment">// ------</span><br><span class="hljs-comment">// --用Socket API 建立简易TCP客户端</span><br><span class="hljs-comment">// ------</span><br><span class="hljs-comment">// 1、建立Socket</span><br>SOCKET _cSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 2、连接服务器connect</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br><span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;_sin.sin_addr);<br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">connect</span>(_cSock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in))) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connect error!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 3、收发信息recv, send</span><br>    <span class="hljs-type">char</span> _sendBuf[<span class="hljs-number">512</span>];<br>    <span class="hljs-type">char</span> _recvBuf[<span class="hljs-number">512</span>];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        std::cin &gt;&gt; _sendBuf;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;login&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 发送登录请求，因为char[]字符串默认为常量，需要用strcpy来进行赋值</span><br>            Login login = &#123;&#125;;<br>            <span class="hljs-built_in">strcpy_s</span>(login.m_Username, <span class="hljs-string">&quot;xiaohua&quot;</span>);<br>            <span class="hljs-built_in">strcpy_s</span>(login.m_Password, <span class="hljs-string">&quot;123456&quot;</span>);<br>            <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(Login), <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 接收请求结果</span><br>            <span class="hljs-built_in">recv</span>(_cSock, _recvBuf, <span class="hljs-built_in">sizeof</span>(_recvBuf), <span class="hljs-number">0</span>);<br>            LoginResult* loginRet = (LoginResult*)_recvBuf;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: LoginResult is &quot;</span> &lt;&lt; loginRet-&gt;m_Result &lt;&lt; <span class="hljs-string">&quot;, Length is &quot;</span> &lt;&lt; loginRet-&gt;m_Length &lt;&lt; std::endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;logout&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 发送登出请求</span><br>            Logout logout = &#123;&#125;;<br>            <span class="hljs-built_in">strcpy_s</span>(logout.m_Username, <span class="hljs-string">&quot;xiaohua&quot;</span>);<br>            <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(Logout), <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 接收请求结果</span><br>            <span class="hljs-built_in">recv</span>(_cSock, _recvBuf, <span class="hljs-built_in">sizeof</span>(_recvBuf), <span class="hljs-number">0</span>);<br>            LogoutResult* logoutRet = (LogoutResult*)_recvBuf;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: LogoutResult is &quot;</span> &lt;&lt; logoutRet-&gt;m_Result &lt;&lt; <span class="hljs-string">&quot;, Length is &quot;</span> &lt;&lt; logoutRet-&gt;m_Length &lt;&lt; std::endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <br>            DataHeader header = &#123; CMD_ERROR, <span class="hljs-number">0</span> &#125;;<br>            <span class="hljs-built_in">send</span>(_cSock, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">recv</span>(_cSock, _recvBuf, <span class="hljs-built_in">sizeof</span>(_recvBuf), <span class="hljs-number">0</span>);<br>            DataHeader* recvheader = (DataHeader*)_recvBuf;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Command is error, length is &quot;</span> &lt;&lt; recvheader-&gt;m_Length &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 4、关闭Closesocket</span><br><span class="hljs-built_in">closesocket</span>(_cSock);<br><span class="hljs-comment">// ------</span><br>    <br><span class="hljs-built_in">WSACleanup</span>();<span class="hljs-comment">// 关闭socket网络环境</span><br><br>    <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//避免客户端exe启动后等待确认结束</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-跨平台Select并发C-S程序"><a href="#3-跨平台Select并发C-S程序" class="headerlink" title="3 跨平台Select并发C&#x2F;S程序"></a>3 跨平台Select并发C&#x2F;S程序</h1><h3 id="3-1-Select并发"><a href="#3-1-Select并发" class="headerlink" title="3.1 Select并发"></a>3.1 Select并发</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">select</span>(<span class="hljs-type">int</span> nfds, <span class="hljs-comment">// nfds表示socket集合最大范围，winsock2自主计算，直接置0即可</span><br>       fd_set *readfds, <span class="hljs-comment">// 可读的socket数量</span><br>       fd_set *writefds, <span class="hljs-comment">// 可写的socket数量</span><br>       fd_set *exceptfds, <span class="hljs-comment">// 异常的socket集合</span><br>       <span class="hljs-type">const</span> timeval *timeout);<span class="hljs-comment">// 最大阻塞时间， NULL表示一直阻塞</span><br><span class="hljs-comment">// 正常返回socket就绪的数量； 返回0：等待时间socket没事件； 返回SOCKET_ERROR：发生错误</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> FD_SETSIZE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FD_SETSIZE 64</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fd_set</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd_count;<br>    SOCKET fd_array[FD_SETSIZE];<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="将客户端移植到linux平台，访问Windows平台下的服务器，实现跨平台通信"><a href="#将客户端移植到linux平台，访问Windows平台下的服务器，实现跨平台通信" class="headerlink" title="将客户端移植到linux平台，访问Windows平台下的服务器，实现跨平台通信"></a>将客户端移植到linux平台，访问Windows平台下的服务器，实现跨平台通信</h6><h3 id="3-2-结构体头文件structhead-h"><a href="#3-2-结构体头文件structhead-h" class="headerlink" title="3.2 结构体头文件structhead.h"></a>3.2 结构体头文件<code>structhead.h</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 指令</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span> &#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGOUT,<br>CMD_LOGOUT_RESULT,<br>CMD_NEW_USER_JOIN,<br>CMD_ERROR<br>&#125;;<br><br><span class="hljs-comment">// 请求头</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span> &#123;<br><span class="hljs-type">short</span> m_CMD;<br><span class="hljs-type">short</span> m_Length;<br>&#125;;<br><br><span class="hljs-comment">// 请求内容 模拟登录和登出，不做有效性判断</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Login</span>() &#123;<br>m_CMD = CMD_LOGIN;<br>m_Length = <span class="hljs-built_in">sizeof</span>(Login);<br>&#125;<br><span class="hljs-type">char</span> m_Username[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> m_Password[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LoginResult</span>() &#123;<br>m_CMD = CMD_LOGIN_RESULT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>m_Result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Logout</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">Logout</span>() &#123;<br>m_CMD = CMD_LOGOUT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(Logout);<br>&#125;<br><span class="hljs-type">char</span> m_Username[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LogoutResult</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">LogoutResult</span>() &#123;<br>m_CMD = CMD_LOGOUT_RESULT;<br>m_Length = <span class="hljs-built_in">sizeof</span>(LogoutResult);<br>m_Result = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Result;<br>&#125;;<br><span class="hljs-comment">//用于新用户加入时向其它用户通知的消息结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUserJoin</span> : <span class="hljs-keyword">public</span> DataHeader &#123;<br><span class="hljs-built_in">NewUserJoin</span>() &#123;<br>m_CMD = CMD_NEW_USER_JOIN;<br>m_Length = <span class="hljs-built_in">sizeof</span>(NewUserJoin);<br>m_Sock = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> m_Sock;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-3-服务端"><a href="#3-3-服务端" class="headerlink" title="3.3 服务端"></a>3.3 服务端</h3><h5 id="3-3-1-server-h"><a href="#3-3-1-server-h" class="headerlink" title="3.3.1 server.h"></a>3.3.1 <code>server.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">// 用于避免windows.h 和 WinSock2 库的函数重复</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// windows平台 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-comment">// inet_pton: 将字符串转为addr地址 和 inet_ntop: 将addr地址转为字符串 的 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">// Linux 平台下 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_ERROR (SOCKET)(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// C++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">// 用于创建存储select客户端数组</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">// 结构体头文件</span><br><span class="hljs-meta">#incldue <span class="hljs-string">&quot;structhead.h&quot;</span></span><br><br><span class="hljs-comment">// select存储监视客户端的数组</span><br>std::vector&lt;SOCKET&gt; g_clients;<br><br><span class="hljs-comment">// 服务器工作函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ServerTask</span><span class="hljs-params">(SOCKET sock)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="3-3-2-server-cpp"><a href="#3-3-2-server-cpp" class="headerlink" title="3.3.2 server.cpp"></a>3.3.2 <code>server.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;server.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ServerTask</span><span class="hljs-params">(SOCKET sock)</span></span>&#123;<br><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;; <br><span class="hljs-type">int</span> nlen = <span class="hljs-built_in">recv</span>(sock, szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (nlen &lt;= <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Client out connect ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DataHeader* header = (DataHeader*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Command is &quot;</span> &lt;&lt; header-&gt;m_CMD &lt;&lt; <span class="hljs-string">&quot; , Length is &quot;</span> &lt;&lt; header-&gt;m_Length &lt;&lt; std::endl;<br><br><span class="hljs-keyword">switch</span> (header-&gt;m_CMD) &#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(sock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Login* login = (Login*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Username is &quot;</span> &lt;&lt; login-&gt;m_Username &lt;&lt; <span class="hljs-string">&quot; , Password is &quot;</span> &lt;&lt; login-&gt;m_Password &lt;&lt; std::endl;<br>LoginResult loginRet = &#123;&#125;;<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">char</span>*)&amp;loginRet, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT:<br>&#123;<br><span class="hljs-built_in">recv</span>(sock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Logout* logout = (Logout*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: Username is &quot;</span> &lt;&lt; logout-&gt;m_Username &lt;&lt; std::endl;<br>LogoutResult logoutRet = &#123;&#125;;<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">char</span>*)&amp;logoutRet, <span class="hljs-built_in">sizeof</span>(LogoutResult), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<br>&#123;<br>DataHeader header = &#123; CMD_ERROR, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(header), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// MAKEWORD 将一个高位和一个低位字节进行合并：2^8+2 = 512+2 = 514，</span><br><span class="hljs-comment">// // WORD为无符号整形， 标识WinSock2使用2.2版本协议</span><br>WORD wr = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);  <br>WSADATA dat;<br><span class="hljs-built_in">WSAStartup</span>(wr, &amp;dat);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 1、创建socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><span class="hljs-keyword">if</span> (_sock == SOCKET_ERROR) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;socket error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Create socket succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 2、绑定端口</span><br>sockaddr_in _addr;<br>_addr.sin_family = AF_INET;<br>_addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br><span class="hljs-comment">// 地址设置为 INADDR_ANY 才可连接到虚拟机ip!!!  如果是 &quot;127.0.0.1&quot; 则只能连接本地ip，虚拟机无法连接</span><br><span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;_addr.sin_addr);<br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_addr, <span class="hljs-built_in">sizeof</span>(_addr))) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind port succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 3、监听端口</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">128</span>)) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;listen error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;listen port succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// select 模型</span><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// 创建结构体</span><br>fd_set fdRead, fdWrite, fdExp;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">// 清空变量</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdWrite);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdExp);<br><span class="hljs-comment">// 将服务器_sock添加到监控变量</span><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdRead);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdWrite);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdExp);<br><br><span class="hljs-comment">// 将工作的socket加入到监控变量</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; g_clients.<span class="hljs-built_in">size</span>(); ++i) &#123;<br><span class="hljs-built_in">FD_SET</span>(g_clients[i], &amp;fdRead);<br>&#125;<br><br><span class="hljs-comment">// 设置最大阻塞时间, 接收到数据则立即向下执行，没有数据则会等到最大时间才向下执行</span><br><span class="hljs-comment">// timeval结构体两个变量分别为：秒和微秒。 如果timeval位置为NULL则一直阻塞到有数据</span><br>timeval tval = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">// 使用select监视</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_sock + <span class="hljs-number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;tval);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;select work error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125; <br><br><span class="hljs-comment">// 判断_sock是否在可读列表内</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdRead)) &#123;<br><span class="hljs-comment">// 从可读列表中将_sock移除，进行客户端连接 </span><br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdRead);<br><span class="hljs-comment">// 客户端连接</span><br>sockaddr_in _caddr = &#123;&#125;;<br><span class="hljs-type">int</span> addrlen = <span class="hljs-built_in">sizeof</span>(_caddr);<br>SOCKET _cSock = INVALID_SOCKET;<br>_cSock = <span class="hljs-built_in">accept</span>(_sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_caddr, &amp;addrlen);<br><span class="hljs-keyword">if</span> (_cSock == INVALID_SOCKET) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client connect error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 向聊天室其它用户发送新用户加入提醒</span><br>NewUserJoin newuser;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; g_clients.<span class="hljs-built_in">size</span>(); ++i) &#123;<br><span class="hljs-built_in">send</span>(g_clients[i], (<span class="hljs-type">char</span>*)&amp;newuser, <span class="hljs-built_in">sizeof</span>(NewUserJoin), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">char</span> ip[<span class="hljs-number">512</span>];<br><span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;_caddr.sin_addr, ip, <span class="hljs-built_in">sizeof</span>(ip));<br>std::cout &lt;&lt; <span class="hljs-string">&quot;New client connect, ip: &quot;</span> &lt;&lt; ip &lt;&lt; std::endl;<br><span class="hljs-comment">// 将新连接的客户端加入select访问数组中</span><br>g_clients.<span class="hljs-built_in">push_back</span>(_cSock);<br>&#125;<br><br><span class="hljs-comment">// 依次处理监视变量，并将断开连接的客户端移除</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; fdRead.fd_count; ++i) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> == <span class="hljs-built_in">ServerTask</span>(fdRead.fd_array[i])) &#123;<br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(g_clients.<span class="hljs-built_in">begin</span>(), g_clients.<span class="hljs-built_in">end</span>(), fdRead.fd_array[i]);<br><span class="hljs-keyword">if</span> (it != g_clients.<span class="hljs-built_in">end</span>()) &#123;<br>g_clients.<span class="hljs-built_in">erase</span>(it);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 6、关闭描述符</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_sock)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-客户端"><a href="#3-4-客户端" class="headerlink" title="3.4 客户端"></a>3.4 客户端</h3><h5 id="3-4-1-client-h"><a href="#3-4-1-client-h" class="headerlink" title="3.4.1 client.h"></a>3.4.1 <code>client.h</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">// 用于避免windows.h 和 WinSock2 库的函数重复</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// windows平台 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-comment">// inet_pton: 将字符串转为addr地址 和 inet_ntop: 将addr地址转为字符串 的 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">// Linux 平台下 socket 库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_ERROR (SOCKET)(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// C++标准库</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">// 多线程库，分离接收和发送</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-comment">// 结构体头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;structhead.h&quot;</span></span><br><br><span class="hljs-comment">// 客户端是否退出标志位</span><br><span class="hljs-type">bool</span> g_bRun = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// 客户端接收任务函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientRecvTask</span><span class="hljs-params">(SOCKET cSock)</span></span>;<br><br><span class="hljs-comment">// 客户端发送任务函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientSendTask</span><span class="hljs-params">(SOCKET cSock)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="3-4-2-client-cpp"><a href="#3-4-2-client-cpp" class="headerlink" title="3.4.2 client.cpp"></a>3.4.2 <code>client.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;client.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientRecvTask</span><span class="hljs-params">(SOCKET cSock)</span> </span>&#123;<br><br><span class="hljs-comment">// 解析请求头</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-type">int</span> recvlen = <span class="hljs-built_in">recv</span>(cSock, szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (recvlen &lt; <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DataHeader* header = (DataHeader*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Command is &quot;</span> &lt;&lt; header-&gt;m_CMD &lt;&lt; <span class="hljs-string">&quot;, length is &quot;</span> &lt;&lt; header-&gt;m_Length &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 解析请求内容</span><br><span class="hljs-keyword">switch</span> (header-&gt;m_CMD) &#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(cSock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginResult* loginRet = (LoginResult*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: LoginResult is &quot;</span> &lt;&lt; loginRet-&gt;m_Result &lt;&lt; <span class="hljs-string">&quot;, Length is &quot;</span> &lt;&lt; loginRet-&gt;m_Length &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_LOGOUT_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(cSock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LogoutResult* logoutRet = (LogoutResult*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: LogoutResult is &quot;</span> &lt;&lt; logoutRet-&gt;m_Result &lt;&lt; <span class="hljs-string">&quot;, Length is &quot;</span> &lt;&lt; logoutRet-&gt;m_Length &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> CMD_NEW_USER_JOIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(cSock, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;m_Length - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>NewUserJoin* newuser = (NewUserJoin*)szRecv;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Recv: New user join, username is &quot;</span> &lt;&lt; newuser-&gt;m_Sock &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ClientSendTask</span><span class="hljs-params">(SOCKET cSock)</span> </span>&#123;<br><span class="hljs-type">char</span> _sendBuf[<span class="hljs-number">512</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>std::cin &gt;&gt; _sendBuf;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Client exit ...&quot;</span> &lt;&lt; std::endl;<br>g_bRun = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;login&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>Login login = &#123;&#125;;<br><span class="hljs-built_in">strcpy_s</span>(login.m_Username, <span class="hljs-string">&quot;xiaohua&quot;</span>);<br><span class="hljs-built_in">strcpy_s</span>(login.m_Password, <span class="hljs-string">&quot;123456&quot;</span>);<br><span class="hljs-built_in">send</span>(cSock, (<span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(Login), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(_sendBuf, <span class="hljs-string">&quot;logout&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>Logout logout = &#123;&#125;;<br><span class="hljs-built_in">strcpy_s</span>(logout.m_Username, <span class="hljs-string">&quot;xiaohua&quot;</span>);<br><span class="hljs-built_in">send</span>(cSock, (<span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(Logout), <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">// MAKEWORD 将一个高位和一个低位字节进行合并：2^8+2 = 512+2 = 514，</span><br><span class="hljs-comment">// // WORD为无符号整形， 标识WinSock2使用2.2版本协议</span><br>WORD wr = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-built_in">WSAStartup</span>(wr, &amp;dat);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 1、创建socket</span><br>SOCKET _cSock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 2、请求连接</span><br>sockaddr_in _caddr;<br>_caddr.sin_family = AF_INET;<br>_caddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;_caddr.sin_addr);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">inet_pton</span>(AF_INET, <span class="hljs-string">&quot;192.168.200.1&quot;</span>, &amp;_caddr.sin_addr); <span class="hljs-comment">// windows平台cmd命令ipconfig对应的虚拟机vmware8地址</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">connect</span>(_cSock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;_caddr, <span class="hljs-built_in">sizeof</span>(_caddr))) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;connet error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Connet server succeed ...&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-comment">// 分线程工作, 分离发送任务</span><br><span class="hljs-function">std::thread <span class="hljs-title">td1</span><span class="hljs-params">(ClientSendTask, _cSock)</span></span>;<br>td1.<span class="hljs-built_in">detach</span>();<br><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// select 模型</span><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// 创建结构体</span><br>fd_set fdRead;<br><span class="hljs-keyword">while</span> (g_bRun) &#123; <span class="hljs-comment">// 在发送任务中输入exit后退出客户端</span><br><span class="hljs-comment">// 清空结构体</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<br><span class="hljs-comment">// 绑定socket</span><br><span class="hljs-built_in">FD_SET</span>(_cSock, &amp;fdRead);<br><span class="hljs-comment">// 设置最大阻塞时间</span><br>timeval tval = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">// select 接收数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_cSock + <span class="hljs-number">1</span>, &amp;fdRead, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;tval);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;select error!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断_cSock套接字是否在可读列表</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_cSock, &amp;fdRead)) &#123;<br><span class="hljs-comment">// 从可读列表中删除_cSock套接字，表示读取</span><br><span class="hljs-built_in">FD_CLR</span>(_cSock, &amp;fdRead);<br><br><span class="hljs-comment">// 处理任务，判断服务器是否对接正常</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> == <span class="hljs-built_in">ClientRecvTask</span>(_cSock)) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Server error ...&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//4、关闭socket</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_cSock);<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_sock)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-类封装客户端和服务器"><a href="#4-类封装客户端和服务器" class="headerlink" title="4 类封装客户端和服务器"></a>4 类封装客户端和服务器</h1><h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>零散问题汇总</title>
    <link href="/2024/06/23/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/06/23/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>一些非专题学习中的零散问题</p><span id="more"></span><h3 id="问题1：char-s-char-s-char-s-char-s-的区别"><a href="#问题1：char-s-char-s-char-s-char-s-的区别" class="headerlink" title="问题1：char* s, char s[], char* s[], char **s 的区别"></a>问题1：char* s, char s[], char* s[], char **s 的区别</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">错误: <span class="hljs-type">char</span>* a = <span class="hljs-string">&quot;hello world\0&quot;</span>;<br>正确: <span class="hljs-type">const</span> <span class="hljs-type">char</span>* a = <span class="hljs-string">&quot;hello world\0&quot;</span>;<br>原因：右边为常量字符串，因此左边直接定义赋值时需要使用<span class="hljs-type">const</span>;<br><br>正确使用字符串变量如下(带有指针的都需要<span class="hljs-type">const</span>常量标识);<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* a = <span class="hljs-string">&quot;hello world\0&quot;</span>;<br><span class="hljs-type">char</span> s[<span class="hljs-number">12</span>] = ”hello world\<span class="hljs-number">0</span><span class="hljs-string">&quot;;</span><br><span class="hljs-string">char s[] = &quot;</span>hello world\<span class="hljs-number">0</span><span class="hljs-string">&quot;;</span><br><span class="hljs-string">const char* s[4] = &#123;&quot;</span>hello<span class="hljs-string">&quot;, &quot;</span>world<span class="hljs-string">&quot;, &quot;</span>ni<span class="hljs-string">&quot;, &quot;</span>hao<span class="hljs-string">&quot;&#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">char** s; // 不能直接赋值，**s二级指针，s的地址不明确</span><br><span class="hljs-string">错误1: char** s = &quot;</span>hello world<span class="hljs-string">&quot;;</span><br><span class="hljs-string">错误2: char** s; *s = &quot;</span>hello world<span class="hljs-string">&quot;;</span><br><span class="hljs-string">// 需要明确s的地址</span><br><span class="hljs-string">正确1：char** s; s = (char**) malloc(sizeof(char**)); *s = &quot;</span>hello world<span class="hljs-string">&quot;;</span><br><span class="hljs-string">正确2: const char *s = &quot;</span>hello world<span class="hljs-string">&quot;; const char**s = &amp;s;</span><br></code></pre></td></tr></table></figure><h3 id="问题2：memset-memcpy-memcmp用法"><a href="#问题2：memset-memcpy-memcmp用法" class="headerlink" title="问题2：memset, memcpy, memcmp用法"></a>问题2：memset, memcpy, memcmp用法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 将str前n个变量变为c</span><br><span class="hljs-built_in">memset</span>(<span class="hljs-type">void</span> *str, <span class="hljs-type">int</span> c, <span class="hljs-type">size_t</span> n); <br><br><br><span class="hljs-comment">/*字符串拷贝*/</span><br><span class="hljs-comment">//将str2的前n个字符拷贝给str1</span><br><span class="hljs-built_in">memcpy</span>(<span class="hljs-type">void</span> *str1, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* str2, <span class="hljs-type">size_t</span> n); <br><span class="hljs-comment">//将str2拷贝给str1</span><br>strcpy_s(<span class="hljs-type">char</span> *str1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *str2);<br><br><br><span class="hljs-comment">/*字符串比较*/</span><br><span class="hljs-comment">//将str1和str2的前n个字符比较，&lt;0,=0,&gt;0</span><br><span class="hljs-built_in">memcmp</span>(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *str1, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *str2, <span class="hljs-type">size_t</span> n);<br><span class="hljs-comment">//将str1和str2比较，&lt;0,=0,&gt;0</span><br><span class="hljs-built_in">strcmp</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *str2);<br><br><br><span class="hljs-comment">/*格式化输入输出*/</span><br><span class="hljs-comment">//格式化字符输入，将mehtod，path的内容赋值给str</span><br><span class="hljs-built_in">sscanf</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...);<br>e.g. <span class="hljs-type">char</span> *method = <span class="hljs-string">&quot;GET&quot;</span>, *path = “/<span class="hljs-number">1.</span>jdp”;<br><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>]; <br><span class="hljs-built_in">sscanf</span>(str, <span class="hljs-string">&quot;%s %s&quot;</span>, method, path);<br><br><span class="hljs-comment">//格式化字符输出，将str的内容拆分为m，p</span><br><span class="hljs-built_in">sprintf</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...);<br>e.g. <span class="hljs-type">char</span> m[<span class="hljs-number">10</span>], p[<span class="hljs-number">50</span>];<br><span class="hljs-built_in">sprintf</span>(str, <span class="hljs-string">&quot;%s %s&quot;</span>, m, p);<br></code></pre></td></tr></table></figure><h3 id="问题3：随机抽奖功能"><a href="#问题3：随机抽奖功能" class="headerlink" title="问题3：随机抽奖功能"></a>问题3：随机抽奖功能</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#define NUM 1000</span><br><br>class SelectPrize&#123;<br>public:<br>SelectPrize(int num)&#123;<br>Tickets.resize(num);<br>for(int i = <span class="hljs-number">0</span>; i &lt; num; ++i)&#123;<br>Tickets[i] = i;<br>&#125;<br>//初始化随机种子<br>srand((unsigned int) time(NULL));<br>&#125;<br>int Random()&#123;<br>//随机票索引<br>int index = rand() % Tickets.size();<br>//将选择的票取出，并将最后一张票填入该位置，让数组长度减小<br>int ticket = Tickets[index];<br>Tickets[index] = Tickets.back();<br>Tickets.pop_back();<br><span class="hljs-keyword">return</span> ticket;<br>&#125;<br><br>private:<br>vector&lt;int&gt; Tickets;<br>&#125;;<br><br>int main()&#123;<br>SelectPrize SP(<span class="hljs-number">1000</span>);<br>for(int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)&#123;<br>cout &lt;&lt; SP.Random() &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树的构建和遍历</title>
    <link href="/2024/06/20/%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E9%81%8D%E5%8E%86/"/>
    <url>/2024/06/20/%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p>理解树结构，理解前序，中序，后序的含义，所有关于树的问题都迎刃而解！！！</p><p>前序：事前需要进行操作–递归； 中序：从左到右有序； 后序：从底向上进行操作–归并、回溯</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> null 0</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">树节点定义</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br><span class="hljs-type">int</span> val;<br><span class="hljs-type">bool</span> flag;<br>TreeNode* lchild;<br>TreeNode* rchild;<br><span class="hljs-built_in">TreeNode</span>(): <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">flag</span>(<span class="hljs-literal">false</span>), <span class="hljs-built_in">lchild</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">rchild</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> v): <span class="hljs-built_in">val</span>(v), <span class="hljs-built_in">flag</span>(<span class="hljs-literal">false</span>), <span class="hljs-built_in">lchild</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">rchild</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> v, TreeNode* lc, TreeNode* rc): <span class="hljs-built_in">val</span>(v), <span class="hljs-built_in">flag</span>(<span class="hljs-literal">false</span>), <span class="hljs-built_in">lchild</span>(lc), <span class="hljs-built_in">rchild</span>(rc) &#123;&#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">层序遍历结果构建树</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-comment">//判断构建的何种类型的节点</span><br><span class="hljs-function">TreeNode* <span class="hljs-title">createNode</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> index)</span> </span>&#123; <br><span class="hljs-keyword">if</span> (index &gt;= nums.<span class="hljs-built_in">size</span>() || nums[index] == null) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(nums[index]);<br>&#125;<br><span class="hljs-comment">//使用队列构建树</span><br><span class="hljs-function">TreeNode* <span class="hljs-title">createT</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(nums[index++]);<br>queue&lt;TreeNode*&gt; qT;<br>qT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!qT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = qT.<span class="hljs-built_in">front</span>();<br>qT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node != <span class="hljs-literal">nullptr</span>) &#123;<br>node-&gt;lchild = <span class="hljs-built_in">createNode</span>(nums, index++);<br>node-&gt;rchild = <span class="hljs-built_in">createNode</span>(nums, index++);<br>qT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>qT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> root;<br>&#125;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">前序和中序遍历结果构建树</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">TreeNode* <span class="hljs-title">createTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prenums, vector&lt;<span class="hljs-type">int</span>&gt;&amp; midnums, <span class="hljs-type">int</span> preleft, <span class="hljs-type">int</span> preright, <span class="hljs-type">int</span> midleft, <span class="hljs-type">int</span> midright)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (midleft &gt;= midright || preleft &gt;= preright) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">int</span> i = midleft;<br><span class="hljs-keyword">while</span> (prenums[preleft] != midnums[i]) &#123;<br>++i;<br><span class="hljs-keyword">if</span> (i &gt;= midright) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-type">int</span> size = i - midleft;<br>TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(midnums[i]);<br>root-&gt;lchild = <span class="hljs-built_in">createTree</span>(prenums, midnums, preleft + <span class="hljs-number">1</span>, preleft + size + <span class="hljs-number">1</span>, midleft, i); <span class="hljs-comment">// + size !!!</span><br>root-&gt;rchild = <span class="hljs-built_in">createTree</span>(prenums, midnums, preleft + size + <span class="hljs-number">1</span>, preright, i + <span class="hljs-number">1</span>, midright);<br><span class="hljs-keyword">return</span> root;<br>&#125;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">递归 前中后序遍历</span><br><span class="hljs-comment">*/</span><br>vector&lt;<span class="hljs-type">int</span>&gt; preans;<br>vector&lt;<span class="hljs-type">int</span>&gt; midans;<br>vector&lt;<span class="hljs-type">int</span>&gt; endans;<br>vector&lt;<span class="hljs-type">int</span>&gt; floorans;<br><span class="hljs-comment">//前序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>preans.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br><span class="hljs-built_in">preorder</span>(root-&gt;lchild);<br><span class="hljs-built_in">preorder</span>(root-&gt;rchild);<br>&#125;<br><span class="hljs-comment">//中序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">midorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">midorder</span>(root-&gt;lchild);<br>midans.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br><span class="hljs-built_in">midorder</span>(root-&gt;rchild);<br>&#125;<br><span class="hljs-comment">//后序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">endorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">endorder</span>(root-&gt;lchild);<br><span class="hljs-built_in">endorder</span>(root-&gt;rchild);<br>endans.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br>&#125;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">非递归 前中后序遍历 层序遍历</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//清空中序和后序遍历使用的节点标志</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanNodeflag</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>stack&lt;TreeNode*&gt; sT;<br>sT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!sT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = sT.<span class="hljs-built_in">top</span>();<br>sT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node != <span class="hljs-literal">nullptr</span>) &#123;<br>node-&gt;flag = <span class="hljs-literal">false</span>;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//层序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floorTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>queue&lt;TreeNode*&gt; qT;<br>qT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!qT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = qT.<span class="hljs-built_in">front</span>();<br>qT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node) &#123;<br>floorans.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>qT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>qT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//前序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>stack&lt;TreeNode*&gt; sT;<br>sT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!sT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = sT.<span class="hljs-built_in">top</span>();<br>sT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node != <span class="hljs-literal">nullptr</span>) &#123;<br>preans.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>sT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//中序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">midTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">cleanNodeflag</span>(root);<br>stack&lt;TreeNode*&gt; sT;<br>sT.<span class="hljs-built_in">push</span>(root);<br><span class="hljs-keyword">while</span> (!sT.<span class="hljs-built_in">empty</span>()) &#123;<br>TreeNode* node = sT.<span class="hljs-built_in">top</span>();<br><span class="hljs-keyword">while</span> (node &amp;&amp; node-&gt;lchild &amp;&amp; !node-&gt;lchild-&gt;flag) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>node = node-&gt;lchild;<br>&#125;<br>sT.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (node) &#123;<br>midans.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>node-&gt;flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (node-&gt;rchild &amp;&amp; !node-&gt;rchild-&gt;flag) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//后序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">endTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">cleanNodeflag</span>(root);<br>stack&lt;TreeNode*&gt; sT;<br>sT.<span class="hljs-built_in">push</span>(root);<br>TreeNode* node = root;<br><span class="hljs-keyword">while</span> (node &amp;&amp; node-&gt;lchild) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>node = node-&gt;lchild;<br>&#125;<br><span class="hljs-keyword">while</span> (!sT.<span class="hljs-built_in">empty</span>()) &#123;<br>node = sT.<span class="hljs-built_in">top</span>();<br><span class="hljs-keyword">while</span> (node-&gt;rchild &amp;&amp; !node-&gt;rchild-&gt;flag) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;rchild);<br>node = node-&gt;rchild;<br><span class="hljs-keyword">while</span> (node &amp;&amp; node-&gt;lchild &amp;&amp; !node-&gt;lchild-&gt;flag) &#123;<br>sT.<span class="hljs-built_in">push</span>(node-&gt;lchild);<br>node = node-&gt;lchild;<br>&#125;<br>&#125;<br>endans.<span class="hljs-built_in">emplace_back</span>(node-&gt;val);<br>node-&gt;flag = <span class="hljs-literal">true</span>;<br>sT.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br><br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">主函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">/* 构建树 */</span><br><span class="hljs-comment">//vector&lt;int&gt; nums = &#123;5,4,8,11,null,13,4,7,2,null,null,null,1&#125;;</span><br><span class="hljs-comment">//TreeNode* root = createT(nums);</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; prenums = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> &#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; midnums = &#123; <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> &#125;;<br><span class="hljs-type">int</span> n = midnums.<span class="hljs-built_in">size</span>();<br>TreeNode* root = <span class="hljs-built_in">createTree</span>(prenums, midnums, <span class="hljs-number">0</span>, n, <span class="hljs-number">0</span>, n);<br><br><span class="hljs-comment">/* 遍历树 */</span><br><span class="hljs-built_in">floorTraversal</span>(root);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; floorans.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>cout &lt;&lt; floorans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//preorder(root);</span><br><span class="hljs-built_in">preTraversal</span>(root);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; preans.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>cout &lt;&lt; preans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//midorder(root);</span><br><span class="hljs-built_in">midTraversal</span>(root);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; midans.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>cout &lt;&lt; midans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//endorder(root);</span><br><span class="hljs-built_in">endTraversal</span>(root);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; endans.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>cout &lt;&lt; endans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CMake学习笔记</title>
    <link href="/2024/06/06/CMake%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/06/06/CMake%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>项目构建工具cmake流程：项目 –&gt; CmakeList.txt –&gt; cmake –&gt; makefile –&gt; make –&gt; exe</p><span id="more"></span><h1 id="CMake-使用"><a href="#CMake-使用" class="headerlink" title="CMake 使用"></a>CMake 使用</h1><h3 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1 基础命令"></a>1 基础命令</h3><p>1、注释： 行注释#   块注释#[[内容]]</p><p>2、<code>cmake_minimum_required</code> 指定 camke 的最低版本</p><p>3、<code>project</code> 项目内容</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">project</span>(&lt;<span class="hljs-keyword">project</span>-name&gt; [languages &lt;language-name&gt;]) <span class="hljs-comment">#项目名，语言</span><br></code></pre></td></tr></table></figure><p>4、<code>add_executable</code> 定义生可执行程序</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">add_excutable(可执行程序名 源文件名<span class="hljs-number">1</span> 源文件名<span class="hljs-number">2</span> 源文件<span class="hljs-number">3</span>)<br>add_excutable(可执行程序名 源文件名<span class="hljs-number">1</span>;源文件名<span class="hljs-number">2</span>;源文件<span class="hljs-number">3</span>)  <span class="hljs-comment">#”空格“和”;“分割均可</span><br></code></pre></td></tr></table></figure><p>5、cmake执行</p><p><strong>example 1</strong> </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><span class="hljs-keyword">add_executable</span>(app add.cpp sub.cpp mul.cpp divdd.cpp main.cpp)<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#终端输入如下</span><br>cmake <span class="hljs-string">&quot;path&quot;</span><span class="hljs-comment">#path 为CMakeLists.txt的路径，当前文件夹就是 .</span><br><span class="hljs-comment">#cmake生成Makefile文件</span><br>make<span class="hljs-comment">#执行Makefile文件生成可执行程序</span><br></code></pre></td></tr></table></figure><h3 id="2-设置"><a href="#2-设置" class="headerlink" title="2 设置"></a>2 设置</h3><p>1、<code>SET(VAR [VALUE])</code>#VAR 变量名; VALUE 变量值</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(SRC_LIST add.cpp sub.cpp mul.cpp divdd.cpp main.cpp)<span class="hljs-comment">#空格 分号 间隔均可</span><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><p>2、c++标准#默认c++98</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#在CMakeLists.txt文件中使用set设置</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#指定标准为c++11</span><br><br><span class="hljs-comment">#在终端通过指令设置</span><br>cmake <span class="hljs-string">&quot;path&quot;</span> -D CMAKE_CXX_STANDARD=<span class="hljs-number">11</span><span class="hljs-comment">#-D 表示给宏赋值</span><br></code></pre></td></tr></table></figure><p>3、输出路径#设置可执行程序的输出路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(HOME /home/moonlight/CMake_exam1)<span class="hljs-comment">#绝对路径</span><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin) <span class="hljs-comment">#bin目录不存在会自动生成</span><br></code></pre></td></tr></table></figure><p><strong>example 2</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">set</span>(SRC_LIST add.cpp sub.cpp mul.cpp divdd.cpp main.cpp)<span class="hljs-comment">#将文件名赋给变量</span><br><span class="hljs-keyword">set</span>(HOME /home/moonlight/CMake_exam1)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin)<span class="hljs-comment">#设置可执行文件的输出路径</span><br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-搜索"><a href="#3-搜索" class="headerlink" title="3 搜索"></a>3 搜索</h3><p>1、<code>aux_source_directory</code> #查找某个路径下的所有源文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">aux_source_directory</span>(&lt;dir&gt; &lt;variable&gt;)<span class="hljs-comment">#dir 目录#variable 存储变量</span><br><br><span class="hljs-keyword">aux_source_directory</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span> SRC) <span class="hljs-comment"># PROJECT_SOURCE_DIR 表示cmake输入的path</span><br></code></pre></td></tr></table></figure><p>2、<code>file</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(GLOB/GLOB_RECURSE 变量名 搜索的文件路径或类型)<span class="hljs-comment">#GLOB 表示读文件名列表，READ 读文件内容</span><br><br><span class="hljs-keyword">file</span>(GLOB MAIN_SRC <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<br><span class="hljs-keyword">file</span>(GLOB MAIN_HEAD <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>/*.h)<br><span class="hljs-comment"># CAMKE_CURRENT_SOURCE_DIR 表示CMakeLists.txt所在的文件目录</span><br></code></pre></td></tr></table></figure><p><strong>example 3</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#包含头文件所在的文件夹，可多个</span><br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<span class="hljs-comment">#搜索文件名赋给变量</span><br><span class="hljs-comment">#aux_source_directory(./ SRL_LIST) #也是搜索当前文件夹文件的命令</span><br><br><span class="hljs-keyword">set</span>(HOME /home/moonlight/CMake_exam1)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin)<span class="hljs-comment">#设置可执行文件的输出路径</span><br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="4-制作库"><a href="#4-制作库" class="headerlink" title="4 制作库"></a>4 制作库</h3><p>1、制作#将库文件和头文件使用</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(NAME STATIC 源文件<span class="hljs-number">1</span> 源文件<span class="hljs-number">2</span> 源文件<span class="hljs-number">3</span>)<span class="hljs-comment">#STATIC生成静态库lib + name + .a</span><br><span class="hljs-keyword">add_library</span>(NAME SHARED 源文件<span class="hljs-number">1</span> 源文件<span class="hljs-number">2</span> 源文件<span class="hljs-number">3</span>)<span class="hljs-comment">#SHARED生成动态库lib + name + .so</span><br></code></pre></td></tr></table></figure><p> 2、指定库路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH /home/moonlight/<span class="hljs-keyword">test</span>) <span class="hljs-comment">#库路径</span><br></code></pre></td></tr></table></figure><p><strong>example 4.1</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#包含头文件所在的文件夹，可多个</span><br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<span class="hljs-comment">#搜索文件名赋给变量</span><br><br><span class="hljs-keyword">set</span>(HOME <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)<br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/lib_)<span class="hljs-comment">#设置库文件的输出路径</span><br><br><br><br><span class="hljs-comment">#制作静态库</span><br><span class="hljs-keyword">add_library</span>(calc STATIC <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-comment">#制作动态库</span><br><span class="hljs-keyword">add_library</span>(calc SHARED <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-使用库"><a href="#5-使用库" class="headerlink" title="5 使用库"></a>5 使用库</h3><p>1、链接</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#静态库链接</span><br><span class="hljs-keyword">link_libraries</span>(&lt;static lib1&gt; &lt;static lib2&gt; ...) <span class="hljs-comment">#指定库路径，可多个，名字lib name .a可只要name</span><br><br><span class="hljs-comment">#链接路径</span><br><span class="hljs-keyword">link_directories</span>(&lt;lib path&gt;) <span class="hljs-comment">#静态库 动态库 均可</span><br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#动态库链接</span><br><span class="hljs-keyword">target_link_libraries</span>(&lt;<span class="hljs-keyword">target</span>&gt; [&lt;private/public/interface&gt; &lt;item&gt;] ...) <br><span class="hljs-comment">#可指定权限，默认public，库具有传递性</span><br><span class="hljs-comment">#public: 可以多重传递使用</span><br><span class="hljs-comment">#private: 仅第一层链接可以知道库中内容及归属</span><br><span class="hljs-comment">#interface：仅第一层链接可使用，但不清楚内部情况</span><br><br><span class="hljs-comment">#先生成程序，后链接动态库</span><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(app calc)<br></code></pre></td></tr></table></figure><p><strong>example 5</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#包含头文件所在的文件夹，可多个</span><br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<span class="hljs-comment">#搜索文件名赋给变量</span><br><br><span class="hljs-keyword">set</span>(HOME <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;HOME&#125;</span>/bin)<span class="hljs-comment">#设置可执行文件的输出路径</span><br><br><br><br><span class="hljs-comment">#静态库链接, 先链接后生成可执行程序</span><br><span class="hljs-keyword">link_libraries</span>(calc)<span class="hljs-comment"># 该链接会将该静态库放到SRC_LIST列表中</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;HOME&#125;</span>/lib_static)<br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><br><span class="hljs-comment">#动态库链接，先生成可执行程序后链接</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;HOME&#125;</span>/lib_shared)<br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(app public calc)<br></code></pre></td></tr></table></figure><h3 id="6-日志"><a href="#6-日志" class="headerlink" title="6 日志"></a>6 日志</h3><p>用于判断过程中是否存在部分信息错误</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">message</span>([无/STATUE/WARNING/AUTHOR_WARNING/SEND_ERROR/FATA_ERROR]: <span class="hljs-string">&quot;内容&quot;</span>)<br></code></pre></td></tr></table></figure><p>无：重要信息</p><p>STATUS：非重要信息</p><p>WARNING：CMake警告，不会中断</p><p>AUTHOR_WARNING：更严重的警告，不会中断</p><p>SEND_ERROR：CMake错误，继续执行，但会跳过生成阶段</p><p>FATAL_ERROR：CMake严重错误，终止运行</p><h5 id="example-6"><a href="#example-6" class="headerlink" title="example 6"></a>example 6</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#CMakeLists.txt 文件内容如下</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-comment">#设置c++11标准</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<span class="hljs-comment">#包含头文件所在的文件夹，可多个</span><br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<span class="hljs-comment">#搜索文件名赋给变量</span><br><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin)<span class="hljs-comment">#设置可执行文件的输出路径</span><br><br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;xxxxxx&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;STATUSxxxxxx&quot;</span>)<br><span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;FATALxxxxxx&quot;</span>)<br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRLC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="7-字符串"><a href="#7-字符串" class="headerlink" title="7 字符串"></a>7 字符串</h3><p>1、<code>APPEND</code>拼接字符串变量</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(变量名 <span class="hljs-variable">$&#123;变量1&#125;</span> <span class="hljs-variable">$&#123;变量2&#125;</span> <span class="hljs-variable">$&#123;变量3&#125;</span> ...)<br><br><span class="hljs-keyword">list</span>(APPEND 变量名 <span class="hljs-variable">$&#123;变量1&#125;</span> <span class="hljs-variable">$&#123;变量2&#125;</span> <span class="hljs-variable">$&#123;变量3&#125;</span> ...)<span class="hljs-comment">#底层管理中子字符串之间隐含分号，用于分隔</span><br></code></pre></td></tr></table></figure><p>2、<code>REMOVE_ITEM</code>移除字符串变量</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(REMOVE_ITEM 变量名 需要删除的内容)<br></code></pre></td></tr></table></figure><h5 id="example-7"><a href="#example-7" class="headerlink" title="example 7"></a>example 7</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cmake_minimum_require(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<br><br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;==========&quot;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;==========&quot;</span>)<br><span class="hljs-keyword">list</span>(REMOVE_ITEM SRC_LIST main.cpp)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-string">&quot;==========&quot;</span>)<br><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;CAMKE_CURRENT_SOURCE_DIR&#125;</span>/bin)<br><br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><br><span class="hljs-keyword">set</span>(tmp hello world)<br><span class="hljs-keyword">set</span>(tmp1 <span class="hljs-variable">$&#123;tmp&#125;</span> <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;tmp&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;tmp1&#125;</span>)<br><span class="hljs-keyword">list</span>(APPEND tmp <span class="hljs-string">&quot;a1a&quot;</span> <span class="hljs-string">&quot;c2c&quot;</span> <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;tmp&#125;</span>)<br></code></pre></td></tr></table></figure><p>3、<code>LENGTH</code>获取长度</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(LENGTH 变量名 新的存储长度结果的字符串)<br><span class="hljs-keyword">list</span>(LENGTH SRC_LIST new_len)<br></code></pre></td></tr></table></figure><p>4、<code>GET</code>取字符串中对应索引的子串(正向索引从0开始，反向索引从-1开始)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(GET 变量名 位置索引 新的存储结果的字符串)<span class="hljs-comment">#索引超出列表范围则报错</span><br><span class="hljs-keyword">list</span>(GET SRC_LIST <span class="hljs-number">0</span> new_val)<span class="hljs-comment">#取第一个字串</span><br><span class="hljs-keyword">list</span>(GET SRC_LIST -<span class="hljs-number">1</span> new_val)<span class="hljs-comment">#取最后一个字串</span><br></code></pre></td></tr></table></figure><p>5、<code>JOIN</code>将列表中的子串通过连接符连接为一个字符串</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(JOIN 变量名 指定的连接符 新的字符串)<br><span class="hljs-keyword">list</span>(JOIN SRC_LIST <span class="hljs-string">&quot;xxx&quot;</span> new_str)<br></code></pre></td></tr></table></figure><p>6、<code>FIND</code>查找</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(FIND 变量名 需要搜索的变量 存储对应字符串的索引的变量)<span class="hljs-comment">#正向查找，没找到为-1</span><br><span class="hljs-keyword">list</span>(FIND SRC_LIST <span class="hljs-string">&quot;xxx&quot;</span> new_index)<br></code></pre></td></tr></table></figure><p>7、<code>INSERT</code>在指定位置插入若干元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(INSERT 变量名 位置索引 插入的元素<span class="hljs-number">1</span> 插入的元素<span class="hljs-number">2</span> ...)<br><span class="hljs-keyword">list</span>(INSERT SRC_LIST <span class="hljs-number">1</span> <span class="hljs-string">&quot;4&quot;</span> <span class="hljs-string">&quot;5&quot;</span>)<span class="hljs-comment">#123;456; 得 123;4;5;456</span><br></code></pre></td></tr></table></figure><p>8、<code>PREPEND</code>在最前面插入元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(PREPEND 变量名 插入的元素<span class="hljs-number">1</span> ...)<br><span class="hljs-keyword">list</span>(PREPEND SRC_LIST <span class="hljs-string">&quot;0&quot;</span>)<span class="hljs-comment">#123;456; 得 0;123;456</span><br></code></pre></td></tr></table></figure><p>9、<code>POP_BACK</code>在最后删除元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(POP_BACK 变量名 可选变量)<span class="hljs-comment">#可选变量存删除的元素值</span><br><span class="hljs-keyword">list</span>(POP_BACK SRC_LIST)<span class="hljs-comment">#123;456 得 123</span><br></code></pre></td></tr></table></figure><p>10、<code>POP_FRONT</code>在前面删除元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(POP_FRONT 变量名 可选变量)<br><span class="hljs-keyword">list</span>(POP_BACK SRC_LIST)<span class="hljs-comment">#123;456 得 456</span><br></code></pre></td></tr></table></figure><p>11、<code>REMOVE_AT</code>将指定索引数据删除</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(REMOVE_AT 变量名 索引<span class="hljs-number">1</span> 索引<span class="hljs-number">2</span> ...)<br><span class="hljs-keyword">list</span>(REMOVE_AT SRC_LIST <span class="hljs-number">0</span> <span class="hljs-number">1</span>)<span class="hljs-comment">#123;456 得 空</span><br></code></pre></td></tr></table></figure><p>12、<code>REMOVE_DUPLICATES</code>删除重复元素</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(REMOVE_DUPLICATES 变量名)<br><span class="hljs-keyword">list</span>(REMOVE_DUPLICATES SRC_LIST)<span class="hljs-comment">#123;456;123;456 得 123;456</span><br></code></pre></td></tr></table></figure><p>13、<code>REVERSE</code>翻转列表</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(REVERSE 变量名)<br><span class="hljs-keyword">list</span>(REVERSE SRC_LIST)<br></code></pre></td></tr></table></figure><p>14、SORT列表排序</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">list</span>(SORT 变量名 排序方法 是否大小写敏感 排序顺序)<br><span class="hljs-keyword">list</span>(SROT SRC_LIST [COMPARE &lt;方法&gt;] [CASE &lt;敏感&gt;] [ORDER &lt;排序&gt;])<br>COMPARE<span class="hljs-comment">#排序方法</span><br><span class="hljs-keyword">STRING</span><span class="hljs-comment">#按字符顺序进行排序</span><br>FILE_BASENAME<span class="hljs-comment">#按路径名排序</span><br>NATURAL<span class="hljs-comment">#自然数顺序排序</span><br>CASE<span class="hljs-comment">#指明是否大小写敏感</span><br>SENSITIVE<span class="hljs-comment">#敏感</span><br>INSENSITIVE<span class="hljs-comment">#不敏感</span><br>ORDER<span class="hljs-comment">#指定排序顺序</span><br>ASCENDING<span class="hljs-comment">#升序排序</span><br>DESCENDING<span class="hljs-comment">#降序排序</span><br></code></pre></td></tr></table></figure><p>帮助文档：</p><p><a href="https://cmake.org/cmake/help/v3.26/command/list.html">https://cmake.org/cmake/help/v3.26/command/list.html</a></p><h3 id="8-宏定义"><a href="#8-宏定义" class="headerlink" title="8 宏定义"></a>8 宏定义</h3><p>用于给具有条件判断的宏程序进行指定判断宏定义，例如如下c++程序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;DEBUG&quot;</span> &lt;&lt; endl;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    cout &lt;&lt; <span class="hljs-string">&quot;CORRECT&quot;</span> &lt;&lt; endl;<br><span class="hljs-meta">#endef</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在生成程序是可以指定该宏是否定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">g++ *.cpp -DDEBUG -o app<br></code></pre></td></tr></table></figure><p>在cmake中可以使用<code>add_definitions(-D宏名字)</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cmake_minimun_require(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)<br><br><span class="hljs-keyword">add_definitions</span>(-DDEBUG)<br><span class="hljs-keyword">add_executable</span>(app <span class="hljs-variable">$&#123;SRC_LISt&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="9-嵌套CMake"><a href="#9-嵌套CMake" class="headerlink" title="9 嵌套CMake"></a>9 嵌套CMake</h3><p>最外层<code>CMakeLists.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(exam)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><br><span class="hljs-comment">#定义变量</span><br><span class="hljs-comment">#静态库生成的路径</span><br><span class="hljs-keyword">set</span>(LIBPATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br><span class="hljs-keyword">set</span>(EXECPATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<br><span class="hljs-keyword">set</span>(HEADPATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><span class="hljs-comment">#头文件途径</span><br><span class="hljs-keyword">set</span>(CALCLIB calc)<br><span class="hljs-keyword">set</span>(SORTLIB sort)<br><span class="hljs-comment">#库文件路径</span><br><span class="hljs-keyword">set</span>(APPNAME1 app1)<br><span class="hljs-keyword">set</span>(APPNAME2 app2)<br><br><span class="hljs-comment">#给当前节点添加子目录</span><br><span class="hljs-keyword">add_subdirectory</span>(calc)<br><span class="hljs-keyword">add_subdirectory</span>(sort)<br><span class="hljs-keyword">add_subdirectory</span>(test1)<br><span class="hljs-keyword">add_subdirectory</span>(test2)<br></code></pre></td></tr></table></figure><p><img src="/./CMake%E5%AD%A6%E4%B9%A0/image-20240619210330403.png"></p><p><code>calc/CMakeList.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(calc)<br><span class="hljs-keyword">aux_source_directory</span>(./ SRC)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEADPATH&#125;</span>)<br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;LIBPATH&#125;</span>)<br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;CALCLIB&#125;</span> STATIC <span class="hljs-variable">$&#123;SRC&#125;</span>)<br></code></pre></td></tr></table></figure><p><code>test1/CMakeList.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>)<br><span class="hljs-keyword">project</span>(test1)<br><span class="hljs-keyword">aux_source_directory</span>(./ SRC)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;HEADPATH&#125;</span>)<br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;LIBPATH&#125;</span>)<br><span class="hljs-keyword">link_libraries</span>(<span class="hljs-variable">$&#123;CALCLIB&#125;</span>)<br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;EXECPATH&#125;</span>)<br><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;APPNAME1&#125;</span> <span class="hljs-variable">$&#123;SRC&#125;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP 协议</title>
    <link href="/2024/05/26/HTTP/"/>
    <url>/2024/05/26/HTTP/</url>
    
    <content type="html"><![CDATA[<p>应用层协议</p><ul><li>如果网络模型是B&#x2F;S（Brower&#x2F;Server，浏览器&#x2F;服务器）结构，就需要用http协议</li></ul><span id="more"></span><p><strong>HTTP请求</strong>：客户端给服务器发送数据，主要使用的有GET，POST两种请求<br><strong>HTTP响应</strong>：服务器给客户端恢复数据<br>HTTP协议封装好数据之后是一个数据块，得到若干行数据，使用换行符：\r\n，通过\r\n可以判断该行结束</p><p><em>学习参考：b站视频：<a href="https://www.bilibili.com/video/BV1XB4y1B7P9?p=9&vd_source=735fee8a67fec0b5a5f3625ab2fdb28b">https://www.bilibili.com/video/BV1XB4y1B7P9?p=9&amp;vd_source=735fee8a67fec0b5a5f3625ab2fdb28b</a>     作者：爱编程的大丙</em></p><h3 id="1-1-HTTP请求"><a href="#1-1-HTTP请求" class="headerlink" title="1.1 HTTP请求"></a>1.1 HTTP请求</h3><ul><li>请求行：GET和POST请求行都分为三个部分：请求类型，请求目录，http版本</li><li>请求头：键值对</li><li>空行</li><li>客户端向服务器提交的数据块：GET没有（已在请求行第二部分有），POST有，在最后</li></ul><h5 id="GET-：请求服务器上的静态数据"><a href="#GET-：请求服务器上的静态数据" class="headerlink" title="GET ：请求服务器上的静态数据"></a><code>GET</code> ：请求服务器上的静态数据</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//请求行</span><br>GET /地址/文件名 HTTP/<span class="hljs-number">1.1</span>      <span class="hljs-comment">// 第一个&quot;/&quot;表示服务器提供的资源目录</span><br><br><span class="hljs-comment">//常见的请求头， 键值对</span><br><span class="hljs-symbol">Host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.31</span><span class="hljs-number">.89</span>:<span class="hljs-number">10000</span>    <span class="hljs-comment">// 请求连接的ip地址和端口</span><br><span class="hljs-symbol">Connection:</span> keep-alive<span class="hljs-comment">// 和服务器一直保持连接</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> ... <span class="hljs-comment">// 浏览器的内核版本</span><br><span class="hljs-symbol">Accept:</span> image/gif, image/jpeg, application/vnd.ms-excel, ... <span class="hljs-comment">// 客户端可识别的类型列表</span><br>Accept-Encoding: gzip, deflate <span class="hljs-comment">// 压缩方式</span><br>Accept-Language: zh-CN <span class="hljs-comment">// 语言: zh中文，en英文</span><br><br><span class="hljs-comment">//空行</span><br><br><span class="hljs-comment">//请求内容为空</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// GET请求行样例</span><br>GET /? <span class="hljs-attr">username</span><span class="hljs-operator">=</span>subwen%<span class="hljs-number">40</span>qq.com<span class="hljs-variable">&amp;phone</span>=<span class="hljs-number">11111111</span><span class="hljs-variable">&amp;email</span>=sub%<span class="hljs-number">40</span>qq.com<span class="hljs-variable">&amp;date</span>=<span class="hljs-number">2020</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span><span class="hljs-variable">&amp;sex</span>=male<span class="hljs-variable">&amp;class</span>=<span class="hljs-number">3</span><span class="hljs-variable">&amp;rule</span>=on HTTP/<span class="hljs-number">1.1</span> <span class="hljs-comment">// GET提交动态数据在地址栏可以看到</span><br></code></pre></td></tr></table></figure><h5 id="POST-请求动态数据"><a href="#POST-请求动态数据" class="headerlink" title="POST : 请求动态数据"></a><code>POST</code> : 请求动态数据</h5><p> POST的请求行中不包含数据字符串，这些数据保存在最后的“请求内容”部分，内容用“&amp;”分隔</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// 请求行</span><br>POST / HTTP/<span class="hljs-number">1.1</span><br><br><span class="hljs-comment">// 请求头</span><br><span class="hljs-symbol">Host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.31</span><span class="hljs-number">.89</span>:<span class="hljs-number">10000</span><br><span class="hljs-symbol">Connection:</span> keep-alive<br>Connect-Length: <span class="hljs-number">98</span><span class="hljs-comment">//提交的内容的长度</span><br>Cache-Control: <span class="hljs-attr">max-age</span><span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-symbol">Origin:</span> null<br>Content-Type: application/x-www-form-urlencoded<span class="hljs-comment">//客户端告诉服务器提交的数据的格式</span><br>User-Agent: Mozillz/<span class="hljs-number">5.0</span> 类似GET<br><span class="hljs-symbol">Accept:</span> <br>Accept-Encoding: <br>Accept-Language: <br><br><span class="hljs-comment">// 空行</span><br><br><span class="hljs-comment">// 请求内容</span><br><span class="hljs-attr">username</span><span class="hljs-operator">=</span>subwen%<span class="hljs-number">40</span>qq.com<span class="hljs-variable">&amp;phone</span>=<span class="hljs-number">11111111</span><span class="hljs-variable">&amp;email</span>=sub%<span class="hljs-number">40</span>qq.com<span class="hljs-variable">&amp;date</span>=<span class="hljs-number">2020</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span><span class="hljs-variable">&amp;sex</span>=male<span class="hljs-variable">&amp;class</span>=<span class="hljs-number">3</span><span class="hljs-variable">&amp;rule</span>=on  <span class="hljs-comment">// POST提交动态数据在地址栏不可以看到，更安全</span><br></code></pre></td></tr></table></figure><p>POST主要用于更新服务器资源，因此需要指明提交的数据类型！</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、Content-<span class="hljs-keyword">Type</span>: application/x-www-form-urlencoded<br>username=subwen%<span class="hljs-number">40</span>qq.com&amp;phone=<span class="hljs-number">11111111</span>&amp;email=sub%<span class="hljs-number">40</span>qq.com&amp;<span class="hljs-type">date</span>=<span class="hljs-number">2020</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>&amp;sex=male&amp;<span class="hljs-keyword">class</span>=<span class="hljs-number">3</span>&amp;<span class="hljs-keyword">rule</span>=<span class="hljs-keyword">on</span><br>title=test&amp;<span class="hljs-keyword">user</span>=kevin&amp;passwd=wasd0104<br><br><span class="hljs-number">2</span>、Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span>; charset=utf<span class="hljs-number">-8</span><br>&#123;&quot;title&quot;: &quot;test&quot;, &quot;sub&quot;: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]&#125;<br><br><span class="hljs-number">3</span>、Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/<span class="hljs-type">xml</span>  // 近几年用的少了，用<span class="hljs-type">json</span>替换<br>&lt;?<span class="hljs-type">xml</span> version=&quot;1.0&quot; encoding=&quot;utf8&quot;?&gt;<br>&lt;methodcall&gt;<br>&lt;methodname color=&quot;red&quot;&gt; examples.getStateName &lt;/methodname&gt;<br>&lt;params&gt;<br>&lt;<span class="hljs-keyword">value</span>&gt;&lt;i4&gt;<span class="hljs-number">41</span>&lt;/i4&gt;&lt;/<span class="hljs-keyword">value</span>&gt;<br>&lt;/params&gt;<br>&lt;/methodcall&gt;<br><br><span class="hljs-number">4</span>、Content-<span class="hljs-keyword">Type</span>: multipart/form-data  // 传输大文件用，传输不同类型的多个文件<br><span class="hljs-comment">------WebKitFormBoundaryPpL3BfPQ4cHShsBz \r\n  //分界线，随机生成的</span><br>Content-Disposition: form-data; filename=&quot;qw.png&quot;; size=<span class="hljs-number">1024</span>; md5=&quot;xxx&quot; // 键值对，文件类型<br>Content-<span class="hljs-keyword">Type</span>: image/png \r\n;<br>\r\n<br>文件内容<br>文件内容<br><span class="hljs-comment">------WebKitFormBoundaryPpL3BfPQ4cHShsBz--</span><br>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;qw.png&quot;<br>Content-<span class="hljs-keyword">Type</span>: image/png \r\n; md5=&quot;xxxxxxxxxxx&quot; <br>\r\n<br>文件内容<br>文件内容<br><span class="hljs-comment">------WebKitFormBoundaryPpL3BfPQ4cHShsBz--</span><br></code></pre></td></tr></table></figure><h3 id="1-2-HTTP响应"><a href="#1-2-HTTP响应" class="headerlink" title="1.2 HTTP响应"></a>1.2 HTTP响应</h3><ul><li>状态行：http版本，状态码，状态描述</li><li>响应头</li><li>空行</li><li>回复给客户端的数据</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 状态行</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> Ok<br><br><span class="hljs-comment">// 相应头</span><br><span class="hljs-built_in">Server</span>: micro_httpd<br>Date: Fri, <span class="hljs-number">18</span> Jul <span class="hljs-number">2014</span> <span class="hljs-number">14</span>:<span class="hljs-number">34</span>:<span class="hljs-number">25</span> GMT<br>Content-Type: text/plain; charset=iso<span class="hljs-number">-8859</span><span class="hljs-number">-1</span>  (**必选项**)<br><span class="hljs-comment">// 数据格式，text/plain纯文本，text/html网页 </span><br><span class="hljs-comment">// charset编码格式，iso-8859-1为纯英文，utf-8支持中文</span><br>Content-Length: <span class="hljs-number">32</span> <span class="hljs-comment">//数据长度</span><br>Location: https:<span class="hljs-comment">//www.baidu.com</span><br>Content-Language: zh-CN<br>Last-Modified: Fri, <span class="hljs-number">18</span> Jul <span class="hljs-number">2014</span> <span class="hljs-number">20</span>:<span class="hljs-number">36</span>:<span class="hljs-number">36</span> GMT<br>Connection: close<br><br><span class="hljs-comment">// 空行</span><br><br><span class="hljs-comment">// 响应内容</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-built_in">main</span>(<span class="hljs-type">void</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world！&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>状态行部分的状态码分类和常见状态码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">状态码<br><span class="hljs-number">1</span>、<span class="hljs-number">1</span>xx: 指示信息<span class="hljs-comment">--表示请求已接收，继续处理</span><br><span class="hljs-number">2</span>、<span class="hljs-number">2</span>xx: 成功<span class="hljs-comment">--表示请求已成功接收、理解、接受</span><br><span class="hljs-number">3</span>、<span class="hljs-number">3</span>xx: 重定向<span class="hljs-comment">--要完成请求必须进行更进一步的操作（网络地址重新访问，例如http访问百度，会重定向为https）</span><br><span class="hljs-number">4</span>、<span class="hljs-number">4</span>xx: 客户端错误<span class="hljs-comment">--请求有语法错误或请求无法实现</span><br><span class="hljs-number">5</span>、<span class="hljs-number">5</span>xx: 服务器端错误<span class="hljs-comment">--服务器未能实现合法的请求</span><br><br>常见状态码：<br><span class="hljs-number">200</span> OK客户端请求成功<br><span class="hljs-number">400</span> Bad Request客户端请求有语法错误<br><span class="hljs-number">401</span> Unauthorized 请求未经授权<br><span class="hljs-number">403</span> Forbidden服务器收到请求，但是拒绝提供服务<br><span class="hljs-number">404</span> <span class="hljs-keyword">Not</span> <span class="hljs-built_in">Found</span>请求资源不存在，e.g. 输入了错误的url<br><span class="hljs-number">500</span> <span class="hljs-type">Internal</span> <span class="hljs-keyword">Server</span> Error 服务器发生不可预期的错误<br><span class="hljs-number">503</span> <span class="hljs-keyword">Server</span> Unavailable 服务器当前不可用，一段时间后可能恢复<br></code></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h5 id="1、读取HTTP请求行的内容-–-sscanf匹配字符"><a href="#1、读取HTTP请求行的内容-–-sscanf匹配字符" class="headerlink" title="1、读取HTTP请求行的内容 – sscanf匹配字符"></a>1、读取HTTP请求行的内容 – sscanf匹配字符</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* s = <span class="hljs-string">&quot;http://www.baidu.com:1234&quot;</span><br><span class="hljs-type">char</span> protocol[<span class="hljs-number">32</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">char</span> host[<span class="hljs-number">128</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">char</span> port[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%[^:]://%[^:]:%[1-9]&quot;</span>, protocol, host, port);<br><span class="hljs-comment">// 结果: protocol=http, host=www.baidu.com, port=1234</span><br><br>[<span class="hljs-number">1</span>] ，表示<span class="hljs-number">1</span>符合条件<br>[<span class="hljs-number">1</span><span class="hljs-number">-9</span>], 表示<span class="hljs-number">1</span><span class="hljs-number">-9</span>符合条件<br>[a,b,d,F]，表示列举的这几个符合<br>[<span class="hljs-number">1</span><span class="hljs-number">-9</span>, a-v]，表示<span class="hljs-number">1</span><span class="hljs-number">-9</span>，a-v符合<br><br>[^<span class="hljs-number">1</span>] ,表示<span class="hljs-number">1</span>不符合，遇到<span class="hljs-number">1</span>即结束<br>[^<span class="hljs-number">1</span><span class="hljs-number">-9</span>], 表示遇到<span class="hljs-number">1</span><span class="hljs-number">-9</span>都结束<br></code></pre></td></tr></table></figure><h5 id="2、目录遍历-–-opendir-readdir-closedir"><a href="#2、目录遍历-–-opendir-readdir-closedir" class="headerlink" title="2、目录遍历 – opendir, readdir, closedir"></a>2、目录遍历 – <code>opendir</code>, <code>readdir</code>, <code>closedir</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;dirent.h&gt;</span></span><br><br><span class="hljs-comment">// 打开目录，返回目录指针 DIR*</span><br><span class="hljs-function">DIR *<span class="hljs-title">opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span></span>;<br><br><span class="hljs-comment">// 读取目录中的文件, 调用一次读取一个文件，返回文件内容的结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span> *<span class="hljs-built_in">readdir</span>(DIR* dirp);<br><br><span class="hljs-comment">// 关闭目录</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">closedir</span><span class="hljs-params">(DIR *dirp)</span></span>; <span class="hljs-comment">//为opendir获取的DIR*</span><br></code></pre></td></tr></table></figure><p>结构体dirent的内容：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span>&#123;<br>    <span class="hljs-type">ino_t</span>d_ino; <span class="hljs-comment">//文件对应的inode</span><br>    <span class="hljs-type">off_t</span>d_off;<span class="hljs-comment">//文件在当前目录中的偏移量</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>d_reclen;<span class="hljs-comment">//文件名字的实际长度</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> d_type;<span class="hljs-comment">//文件的类型</span><br>    <span class="hljs-type">char</span>d_name[<span class="hljs-number">256</span>];<span class="hljs-comment">//文件的名字</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结构体中的文件类型<code>d_type</code>，可以使用的宏值如下;<br><code>DT_BLK</code> : 块设备文件;<br><code>DT_CHR</code> : 字符设备文件;<br><code>DT_DIR</code> ：目录文件;<br><code>DT_FIFO</code> ：管道文件;<br><code>DT_LNK</code> ：软连接文件;<br><code>DT_REG</code> ：普通文件;<br><code>DT_SOCK</code> ：本地套件字文件;<br><code>DT_UNKNOWN</code> ：无法识别的文件类型;</p><p>访问文件目录的实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span>&#123;<br>    <span class="hljs-comment">//1.打开目录</span><br>    DIR* dir = <span class="hljs-built_in">opendir</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span>(dir == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-comment">// 2.遍历目录内容</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span>* fp = <span class="hljs-built_in">readdir</span>(dir);<br>        <span class="hljs-keyword">if</span>(fp == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-keyword">if</span>(pt-&gt;d_type == DT_REG)&#123;<br>            <span class="hljs-type">char</span>* p = <span class="hljs-built_in">strstr</span>(ptr-&gt;d_name, <span class="hljs-string">&quot;.mp3&quot;</span>); <span class="hljs-comment">// strstr返回第一次出现&quot;.mp3&quot;的位置</span><br>            <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">nullptr</span> &amp;&amp; *(p+<span class="hljs-number">4</span>) == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123; <span class="hljs-comment">// 判断该文件是否以.mp3结尾</span><br>                ++count;<br>                cout &lt;&lt; <span class="hljs-string">&quot;filename: &quot;</span> &lt;&lt; fp-&gt;d_name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;目录:&quot;</span> &lt;&lt; argv[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot;中的mp3文件的个数为：&quot;</span> &lt;&lt; count &lt;&lt; endl;<br>    <br>    <span class="hljs-comment">// 3.关闭目录</span><br>    <span class="hljs-built_in">closedir</span>(dir);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、目录遍历-–-scandir"><a href="#3、目录遍历-–-scandir" class="headerlink" title="3、目录遍历 – scandir"></a>3、目录遍历 – <code>scandir</code></h5><p>仅遍历当前层目录内容，不递归遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">scandir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* dirp, <span class="hljs-comment">// 访问的目录路径</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">struct</span> dirent* **namelist, <span class="hljs-comment">// namelist 指向一个指针数组 struct dirent* tmp[]</span></span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span> (*isMp3)(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent *), <span class="hljs-comment">// 过滤当前文件夹中文件的函数,不过滤NULL</span></span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span> (*compar)(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **))</span></span>; <span class="hljs-comment">// 排序函数</span><br></code></pre></td></tr></table></figure><p>排序函数 – compar，一般直接调用Linux提供的 <code>alphasort</code> 或 <code>versionsort</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">alphasort</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **a, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">versionsort</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **a, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent **b)</span></span>;<br></code></pre></td></tr></table></figure><p>判断是否为mp3文件的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isMp3</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> dirent* ptr)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(ptr-&gt;d_type == DT_REG)&#123;<br>        <span class="hljs-type">char</span>* p = <span class="hljs-built_in">strstr</span>(ptr-&gt;d_name, <span class="hljs-string">&quot;.mp3&quot;</span>);<br>        <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; *(p+<span class="hljs-number">4</span>) == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用举例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span>** namelist;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">scandir</span><span class="hljs-params">(dirName, &amp;namelist, <span class="hljs-literal">NULL</span>, alphasort)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i)&#123;<br>    <span class="hljs-type">char</span>* name = namelist[i]-&gt;d_name;<span class="hljs-comment">// 获取文件名</span><br>    <span class="hljs-type">char</span> subPath[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">sprintf</span>(subPath, <span class="hljs-string">&quot;%s/%s&quot;</span>, dirName, name);<span class="hljs-comment">// 获取文件路径</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、判断文件类型"><a href="#4、判断文件类型" class="headerlink" title="4、判断文件类型"></a>4、判断文件类型</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-comment">// 用于描述Linux系统文件属性结构的结构体stat</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stat</span> &#123; <br><span class="hljs-type">mode_t</span>     st_mode;       <span class="hljs-comment">//文件对应的模式，文件，目录等</span><br><span class="hljs-type">ino_t</span>      st_ino;       <span class="hljs-comment">//inode节点号</span><br><span class="hljs-type">dev_t</span>      st_dev;        <span class="hljs-comment">//设备号码</span><br><span class="hljs-type">dev_t</span>      st_rdev;       <span class="hljs-comment">//特殊设备号码</span><br><span class="hljs-type">nlink_t</span>    st_nlink;      <span class="hljs-comment">//文件的连接数</span><br><span class="hljs-type">uid_t</span>      st_uid;        <span class="hljs-comment">//文件所有者</span><br><span class="hljs-type">gid_t</span>      st_gid;        <span class="hljs-comment">//文件所有者对应的组</span><br> <span class="hljs-type">off_t</span>      st_size;       <span class="hljs-comment">//普通文件，对应的文件字节数</span><br><span class="hljs-type">time_t</span>     st_atime;      <span class="hljs-comment">//文件最后被访问的时间</span><br><span class="hljs-type">time_t</span>     st_mtime;      <span class="hljs-comment">//文件内容最后被修改的时间</span><br><span class="hljs-type">time_t</span>     st_ctime;      <span class="hljs-comment">//文件状态改变时间</span><br><span class="hljs-type">blksize_t</span> st_blksize;    <span class="hljs-comment">//文件内容对应的块大小</span><br><span class="hljs-type">blkcnt_t</span>   st_blocks;     <span class="hljs-comment">//伟建内容对应的块数量</span><br>&#125;;<br><br><span class="hljs-comment">// 获取文件属性的函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path, <span class="hljs-keyword">struct</span> stat* struct_stat)</span></span>;  <span class="hljs-comment">// path文件路径, stat结构体地址</span><br><br><span class="hljs-comment">// 常用的判断宏函数</span><br><span class="hljs-built_in">S_ISLNK</span> (st_mode)    判断是否为符号连接<br><span class="hljs-built_in">S_ISREG</span> (st_mode)    是否为一般文件<br><span class="hljs-built_in">S_ISDIR</span> (st_mode)    是否为目录<br><span class="hljs-built_in">S_ISCHR</span> (st_mode)    是否为字符装置文件<br><span class="hljs-built_in">S_ISBLK</span> (st_mode)    是否为先进先出<br><span class="hljs-built_in">S_ISSOCK</span> (st_mode)   是否为socket<br></code></pre></td></tr></table></figure><p>调用举例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stat</span> st;<br><span class="hljs-built_in">stat</span>(path, &amp;st);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">S_ISDIR</span>(st.st_mode))&#123;<br>    cout &lt;&lt; ”是一个文件夹“ &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习</title>
    <link href="/2024/05/17/MySQL/"/>
    <url>/2024/05/17/MySQL/</url>
    
    <content type="html"><![CDATA[<p>基础的MySQL结构和语法</p><span id="more"></span><h4 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h4><p>文本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">varchar(n)#字符串，长度为n<br></code></pre></td></tr></table></figure><p>数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">binary(n)#二进制串，长度为n<br>integer(n)#整数值，长度为p<br>smallint#整数值，长度5<br>int#整数值，长度10<br>bigint#整数值，长度19<br>float(n)#浮点数，长度16，可变长<br></code></pre></td></tr></table></figure><p>时间&#x2F;日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">date#日期，year-mouth-day，可以通过year(date)获取年，月，日<br>time#时间，hour-minute-second，可以通过hour(time)获取时，分，秒<br>timestamp#年，月，日，时，分，秒<br></code></pre></td></tr></table></figure><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>表名：<code>user_profile</code></p><table><thead><tr><th align="center">id</th><th align="center">device_id</th><th align="center">gender</th><th align="center">age</th><th align="center">university</th><th align="center">gpa</th><th align="center">question_cnt</th><th align="center">other</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">213</td><td align="center">male</td><td align="center">21</td><td align="center">东大学</td><td align="center">3.4</td><td align="center">2</td><td align="center">12345,1,http1</td></tr><tr><td align="center">2</td><td align="center">314</td><td align="center">male</td><td align="center">19</td><td align="center">西大学</td><td align="center">3.3</td><td align="center">5</td><td align="center">22345,2,http2</td></tr><tr><td align="center">3</td><td align="center">654</td><td align="center">famale</td><td align="center">20</td><td align="center">南大学</td><td align="center">3.8</td><td align="center">3</td><td align="center">32345,3,http3</td></tr><tr><td align="center">4</td><td align="center">315</td><td align="center">famale</td><td align="center">22</td><td align="center">北大学</td><td align="center">3.7</td><td align="center">1</td><td align="center">42345,4,http4</td></tr><tr><td align="center">5</td><td align="center">543</td><td align="center">male</td><td align="center"></td><td align="center">北大学</td><td align="center">3.5</td><td align="center">10</td><td align="center">523455,http5</td></tr><tr><td align="center">6</td><td align="center">131</td><td align="center">male</td><td align="center">23</td><td align="center">南大学</td><td align="center">3.8</td><td align="center">7</td><td align="center">62345,6,http6</td></tr><tr><td align="center">7</td><td align="center">421</td><td align="center">male</td><td align="center">18</td><td align="center">东大学</td><td align="center">3.9</td><td align="center">6</td><td align="center">72345,7,http7</td></tr></tbody></table><p><code>insert into</code> 表名(字段名1，字段名2，….) <code>value</code>(插入值1，插入值2，…)</p><p><code>delete</code> 删除字段 <code>from</code> 表名</p><p><code>select</code> 查询字段 <code>from</code> 表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select device_id, gender, gpa from user_profile;<br></code></pre></td></tr></table></figure><p><strong>如果不清楚列名，可以使用数字1，2，3…表示对应列号来查询，分组和排序</strong></p><p><code>group by</code> 字段#分组</p><p><code>order by</code> 字段#排序，desc降序，asc升序</p><p><code>limit</code> n#限制条数为n，可结合order by得到最大&#x2F;最小的前n条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select device_id, gender, gpa from user_profile<br>group by university<br>order by gpa limit 1;<br></code></pre></td></tr></table></figure><p><code>where</code> 条件#针对原表数据，可结合<code>in</code>, <code>not in</code>, <code>and</code>, <code>or</code>来进行筛选</p><p><code>having</code>条件#针对非原表数据，例如组合重命名得到的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select device_id, gender, gpa from user_profile<br>where university in (&quot;东大学&quot;，&quot;西大学&quot;) or university not in (&quot;南大学&quot;);<br><br>select avg(question_cnt) as avg_quest from user_profile<br>group by university<br>having avg_quest &gt; 3;<br></code></pre></td></tr></table></figure><p><strong>连接函数：</strong></p><p><code>inner join</code> 表名 <code>on</code> 条件</p><p>#内连接 两个表中都满足条件的数据进行连接</p><p><code>left join</code> 表名 <code>on</code> 条件</p><p>#左连接 左表为基准，找出右表&#x3D;左表的数据，右表没有的数据则为空</p><p><code>right join</code> 表名 <code>on</code> 条件</p><p>#右连接 右表为基准，找出左表&#x3D;右表的数据，左表没有的数据则为空</p><p><code>full join</code> 表名 <code>on</code> 条件</p><p>#全连接，结果等于<code>left join</code> 和 <code>right join</code>的结果合成的表</p><p><code>self join</code> 表名 <code>on</code> 条件</p><p>#自连接，用于不清楚自身表部分数据时的筛选</p><p><code>union</code> </p><p>#联合查询，要求数据表列数一致，查询结果会自动去除重复行，<code>union all</code>不去重</p><p>表名：<code>question_detail</code></p><table><thead><tr><th align="center">id</th><th align="center">device_id</th><th align="center">question_id</th><th align="center">difficult_level</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">213</td><td align="center">111</td><td align="center">hard</td></tr><tr><td align="center">2</td><td align="center">314</td><td align="center">112</td><td align="center">medium</td></tr><tr><td align="center">3</td><td align="center">213</td><td align="center">113</td><td align="center">easy</td></tr><tr><td align="center">4</td><td align="center">315</td><td align="center">114</td><td align="center">hard</td></tr><tr><td align="center">5</td><td align="center">314</td><td align="center">115</td><td align="center">easy</td></tr><tr><td align="center">6</td><td align="center">131</td><td align="center">116</td><td align="center">easy</td></tr><tr><td align="center">7</td><td align="center">213</td><td align="center">117</td><td align="center">medium</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(qd.question_id) / count(distinct qd.device_id) as avg_quest<br>from user_profile as u<br>inner join question_detail as qd<br>on u.device_id = qd.device_id<br>where u.university = &quot;东大学&quot;;<br></code></pre></td></tr></table></figure><p><strong>条件函数：</strong></p><p><code>if(判断语句，满足的语句，不满足的语句)</code> #可嵌套使用if函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select if(age &lt; 20, &quot;20岁以下&quot;, if(age &lt; 22, &quot;20及以上&quot;, &quot;其他&quot;)) as age_cnt, avg(question_cnt) as avg_quest<br>from user_profile<br>group by age_cnt;<br></code></pre></td></tr></table></figure><p><strong>取字符串函数：</strong></p><p><code>locate(substr, str)</code></p><p>#返回<code>substr</code>在<code>str</code>中第一次出现的位置，如果不存在，则返回0</p><p><code>left(str, length)</code></p><p>#从左边开始截取<code>str</code>，<code>length</code>是截取的长度</p><p><code>right(str, length)</code></p><p>#从右边开始截取<code>str</code>，<code>length</code>是截取的长度</p><p><code>substring_index(str,substr, n)</code></p><p>#返回<code>substr</code>在<code>str</code>中第<code>n</code>次出现位置之前的字符串，<code>n</code>为负数则从后数</p><p><code>substring(str, n, m)</code></p><p>#返回<code>str</code>从第<code>n</code>个字符截取到第m个字符</p><p><code>replace(str, str_old, str_new)</code></p><p>#将<code>str</code>中的n字符替换成m字符</p><p><code>length(str)</code></p><p>#计算字符串<code>str</code>的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">取other中的http：<br><br>select right(other, 5) as webname<br>select substring_index(other, &#x27;,&#x27;, -1) as webname<br>select substring(8,5)<br><br>from user_profile;<br></code></pre></td></tr></table></figure><p><strong>其它：</strong></p><p><code>count</code>#统计数量</p><p><code>sum</code>#计算和</p><p><code>avg</code>#平均数量</p><p><code>round</code>(变量名,n)  #保留小数n位</p><p><code>as</code> 新的名字     #重命名</p><p><code>distinct</code> 变量#去重</p><p><code>is null</code>  #判空</p><p><code>like</code>，<code>%</code>，<code>_</code> #搜索指定格式，通配符：%表示0-n个字符，_表示一个字符</p><p><code>ifnull</code>(变量，0)#如果变量为null，则设置为0</p><p>……</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2024/05/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/05/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>梳理所学知识的结构，加深思考；记录当前所遇到的问题和解决方法；在某个时间段回顾重点知识</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开始学习搭建个人博客，参考的博客如下：</p><p>爱扑bug的熊：<a href="https://blog.cuijiacai.com/blog-building/">https://blog.cuijiacai.com/blog-building/</a></p><p>知乎crystal的帖子：<a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p><p>hexo博客：<a href="https://yangyong2021.github.io/2023/09/22/hexo+github%E6%95%99%E7%A8%8B/">https://yangyong2021.github.io/2023/09/22/hexo+github%E6%95%99%E7%A8%8B/</a></p><p>本文主要是记录下在搭建过程中的一些重要知识点，以及遇到的一些问题。</p><h2 id="个人博客搭建：hexo-github"><a href="#个人博客搭建：hexo-github" class="headerlink" title="个人博客搭建：hexo+github"></a>个人博客搭建：hexo+github</h2><h3 id="一、hexo安装和本地网址生成"><a href="#一、hexo安装和本地网址生成" class="headerlink" title="一、hexo安装和本地网址生成"></a>一、hexo安装和本地网址生成</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先下载nodejs，git</span><br>nodejs: https://nodejs.org/en<br><span class="hljs-meta prompt_">#</span><span class="language-bash">nodejs 下载解压完成后，点击运行node.js文件夹中的 Install Additional Tools <span class="hljs-keyword">for</span> Node.js，配置环境</span><br>git: https://git-scm.com/downloads<br><span class="hljs-meta prompt_">#</span><span class="language-bash">git 安装就一直点下一步就好</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后打开git-bash执行下述操作来安装配置hexo</span><br>npm config set registry https://registry.npm.taobao.org #修改下载源，官网源比较慢<br><br>npm install hexo-cli -g #-g全局，安装hexo命令行工具<br><br>hexo init &quot;博客目录&quot;#创建博客目录，会有INFO反馈信息<br><br>cd &quot;博客目录&quot;# 进入博客目录<br><br>npm install # 为该博客安装依赖项，依赖项在package.json文件的dependencies字段可查看<br><br>hexo new post &quot;test&quot;# 会在sourse/_posts/ 目录下生成文件 &#x27;test.md&#x27;，打开编辑，具体格式查看_config.yml文件<br><br>hexo generate# 生成静态HTML文件到 /public 文件夹中<br><br>hexo server# 本地运行server服务预览，打开浏览器搜索 http://localhost:4000 即可预览博客<br></code></pre></td></tr></table></figure><h3 id="博客配置：-config-yml文件内容及对应的含义"><a href="#博客配置：-config-yml文件内容及对应的含义" class="headerlink" title="博客配置：_config.yml文件内容及对应的含义"></a>博客配置：_config.yml文件内容及对应的含义</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Hexo Configuration</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Source: https://github.com/hexojs/hexo/</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Site</span><br>title: Hexo  # 博客标题<br>subtitle:    # 博客副标题<br>description: # 博客描述<br>keywords: # 博客关键字<br>author: John Doe  # 作者<br>language: zh-cn   # 语言 zh-CN中文，en-US英文<br>timezone:    # 网站时区, Hexo默认电脑的时区,也可手动设置 Asia/Shanghai，America/New_York,Japan等<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">URL</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br>url: http://yoursite.com   # 博客右下角share展示的网址，必须http://或https://开头<br>root: #网站根目录，如果网站时子目录http://example.com/blog，则root=/blog/<br>permalink: :year/:month/:day/:title/   # 文章的 永久链接 格式<br><span class="hljs-meta prompt_"># </span><span class="language-bash">链接格式 <span class="hljs-comment"># 对应的具体网址</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># :year/:month/:day/:title/  # 2024/05/15/hello-world/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># :year-:month-:day-:title.html# 2024-05-15-hello-world.html</span></span><br>permalink_defaults:        # 永久链接中各部分的默认值<br>pretty_urls: #用于美化永久链接的展示，网址末尾是否添加 index.html 或 .html<br>  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks<br>  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Directory</span>   <br>source_dir: source     # 资源文件夹，这个文件夹用来存放内容<br>public_dir: public     # 公共文件夹，这个文件夹用于存放生成的站点文件。<br>tag_dir: tags          # 标签文件夹     <br>archive_dir: archives  # 归档文件夹<br>category_dir: categories     # 分类文件夹<br>code_dir: downloads/code     # Include code 文件夹<br>i18n_dir: :lang              # 国际化（i18n）文件夹<br>skip_render:                 # 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Writing</span><br>new_post_name: :title.md  # File name of new posts # 新文章的文件名称<br>default_layout: post      # 预设布局<br>titlecase: false # Transform title into titlecase # 把标题转换为 title case<br>external_link:<br>enable: true # open external links in new tab # 在新标签中打开链接<br>field: site # Apply to the whole site # 将该设置应用到所有网站都另起新标签<br>filename_case: 0          # 把文件名称转换为 (1) 小写或 (2) 大写<br>render_drafts: false      # 是否显示草稿<br>post_asset_folder: false  # 是否启动 Asset 文件夹<br>relative_link: false      # 把链接改为与根目录的相对位址    <br>future: true              # 显示未来的文章<br>syntax_highlighter: highlight.js # 代码块高亮设置，按照该js文件格式<br>highlight:                # 内容中代码块的设置    <br>  enable: true            # 开启代码块高亮<br>  line_number: true       # 显示行数<br>  auto_detect: false      # 如果未指定语言，则启用自动检测<br>  tab_replace:            # 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs<br>  wrap: true  # 将输出使用&lt;figure&gt;和&lt;table&gt;包裹，如果不包裹，则false<br>  hljs: false  # 为所有HTML输出的class加上hljs-前缀<br>prismjs:<br>  preprocess: true  # 浏览器端高亮（false）， 服务端高亮（true）<br>  line_number: true  # 行号显示<br>  tab_replace:   # 将Tab(\t)替换为给定值，默认为两个空格<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Category &amp; Tag</span><br>default_category: uncategorized# 默认分类<br>category_map:       # 分类别名<br>tag_map:            # 标签别名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Date / Time format</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Hexo uses Moment.js to parse and display date</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># You can customize the date format as defined in</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># http://momentjs.com/docs/#/displaying/format/</span></span><br>date_format: YYYY-MM-DD     # 日期格式<br>time_format: HH:mm:ss       # 时间格式<br>updated_option: &#x27;mtime&#x27;# 使用文件最后修改时间<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Pagination</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Set per_page to 0 to disable pagination</span></span><br>per_page: 10           # 每页显示的文章数量（0=关闭分页）<br>pagination_dir: page   # 分页目录 例如：http://example.com/page/1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Extensions</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Plugins: https://hexo.io/plugins/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Themes: https://hexo.io/themes/</span></span><br>theme: landscape   # 主题名称<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Include / Exclude file(s)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br>include:# Hexo默认不包括source/目录下除了_post和_data目录的其它文件和目录，可以用该字段复制添加到source目录下<br>exclude:# Hexo将不包括source/下的这些文件和目录<br>ignore:# Hexo会忽略这些文件和目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Extensions</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Plugins: https://hexo.io/plugins/</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Themes: https://hexo.io/themes/</span></span><br>theme: landscape  #扩展，当前主题名称，值为false时禁用主题<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> 部署部分的设置</span><br>deploy:     <br>  type: &#x27;&#x27; # 类型，常用的git <br>  repo:    # github中的仓库地址<br>  branch:  # github仓库分支<br></code></pre></td></tr></table></figure><h3 id="安装配置中遇到的问题："><a href="#安装配置中遇到的问题：" class="headerlink" title="安装配置中遇到的问题："></a>安装配置中遇到的问题：</h3><p>如果想要修改<code>package.json</code>文件，通过<code>ls</code>命令查看当前文件夹可以看到该文件，直接使用<code>vim</code>进行编辑即可。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">&quot;博客目录&quot;</span><span class="hljs-comment">#进入博客目录</span><br><span class="hljs-keyword">ls</span> -l<span class="hljs-comment">#列表形式展示当前目录下的文件</span><br>vim package.json<span class="hljs-comment">#使用vim编辑器编辑package.json文件</span><br>i<span class="hljs-comment">#insert插入数据</span><br><br>&#123;<br><span class="hljs-string">//</span> <span class="hljs-string">......</span><br>    <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<span class="hljs-string">//</span> 这个部分主要是设置快捷指令的，键值对，左边是自己命名，右边是系统命令<br>        <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;hexo generate&quot;</span>,<br>        <span class="hljs-string">&quot;clean&quot;</span>: <span class="hljs-string">&quot;hexo clean&quot;</span>,<br>        <span class="hljs-string">&quot;deploy&quot;</span>: <span class="hljs-string">&quot;hexo deploy&quot;</span>,<br>        <span class="hljs-string">&quot;server&quot;</span>: <span class="hljs-string">&quot;hexo server&quot;</span><br>      &#125;,<br>    <span class="hljs-string">//</span> <span class="hljs-string">......</span><br>&#125;<br><br>Esc<span class="hljs-comment">#完成输入</span><br><span class="hljs-function">:wq</span><span class="hljs-comment">#保存并退出</span><br></code></pre></td></tr></table></figure><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240515160515919.png"></p><h3 id="二、Git将文件项目上传到Github"><a href="#二、Git将文件项目上传到Github" class="headerlink" title="二、Git将文件项目上传到Github"></a>二、Git将文件项目上传到Github</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd &quot;博客目录&quot;    # 打开git-bash，进入需要打包上传的目录<br>git init# 将该目录变成git能管理的仓库，成功后会显示（master）<br>git add 文件名   # 文件名如果为点”.“，则表示当前目录下所有文件 <br>git commit -m &quot;file first commit&quot;# 把文件提交到仓库，” “为提交相关说明<br>git remote add origin https://github.com/用户名/用户名.github.io.git# 关联到远程仓库，在github中仓库--&gt;code--&gt;HTTPS地址，这个新建的仓库名字必须和用户名相同，且后缀为github.io<br>git branch -M master # 切换当前分支为master<br>git push -u origin main# push到对应的仓库，orign为服务器名，master为分支名<br><br>git log # 查看历史提交信息<br>git reset commitID #通过log查找到的历史提交ID来回退程序<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果直接push报错</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">fatal: The current branch master has no upstream brancn.</span>  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">说明当前分支过多，系统无法确定是哪一个分支，解决方法如下：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git remote <span class="hljs-built_in">rm</span> origin  <span class="hljs-comment"># 删除现在绑定的远程地址</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git remote add origin https://github.com/文件名.git<span class="hljs-comment">#重新绑定</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git branch -M master<span class="hljs-comment"># 切换分支名为master，这个可以自由命名，没有的话push会自动生成</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git push -u origin master <span class="hljs-comment"># 推送到对应的分支，这个需要和branch切换的对应</span></span><br></code></pre></td></tr></table></figure><h3 id="三、部署hexo到GitHub-Pages"><a href="#三、部署hexo到GitHub-Pages" class="headerlink" title="三、部署hexo到GitHub Pages"></a>三、部署hexo到GitHub Pages</h3><p>首先安装<code>hexo-deployer-git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>文件末尾的<code>Deployment</code>部分的<code>deploy</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deploy:<br>  type: git <br>  repository: https://github.com:用户名/用户名.github.io.git # 添加的行，仓库两个用户名必须一致<br>  branch: master# 前面Git上传的分支名<br></code></pre></td></tr></table></figure><p>完成配置后即可进行部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo deploy 或者 hexo d<br></code></pre></td></tr></table></figure><p>在浏览器中输入：<code>https://用户名.github.io</code>即可访问博客啦！！！完成收工~</p><h3 id="常见错误1-–-hexo-d-出错"><a href="#常见错误1-–-hexo-d-出错" class="headerlink" title="常见错误1 – hexo d 出错"></a>常见错误1 – hexo d 出错</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">nothing to commit, working tree clean<br>fatal: unable to access &#x27;https://github.com/Moonswisdom/QinZhi2022.github.io.git/&#x27;: Failed 443 after 21058 ms: Couldn&#x27;t connect to server<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubl<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (C:\Users\12143\Moonlights\node_modules\hexo-deployer-git\wn.js:51:21)<br>    at ChildProcess.emit (node:events:519:28)<br>    at cp.emit (C:\Users\12143\Moonlights\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:294:12)<br></code></pre></td></tr></table></figure><p>说明之前已经部署过了，需要进行清空重置，解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean# 清除之前的部署信息<br>hexo generate# 生成页面<br>hexo deploy# 部署网页<br></code></pre></td></tr></table></figure><p>注意：如果这样还不行，则删除当前目录下的隐藏文件夹<code>.deploy_git/</code>， 可通过<code>ll -a</code>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf .deploy_git/#强制删除，-r递归删除文件夹，-f强制<br>git config --global core.autocrlf false#关闭git自动转换空格符，适用于仅在windows上运行<br></code></pre></td></tr></table></figure><p>然后接着执行解决方法的三个步骤即可。</p><h3 id="常见错误2-–-hexo-图片无法加载"><a href="#常见错误2-–-hexo-图片无法加载" class="headerlink" title="常见错误2 – hexo 图片无法加载"></a>常见错误2 – hexo 图片无法加载</h3><p>先检查当前编辑的<code>md</code>文件是不是在<code>source/_posts/</code>文件夹下，如果是其它位置编辑了再复制到该文件夹下会导致图片路径异常，接着设置Typora的图片保存路径如下。</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240516112050302.png"></p><p>该路径表示相同目录下的同名文件夹中。因此在<code>source/_post</code>文件夹下创建一个和当前<code>md</code>同名的文件夹。</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240516112736625.png"></p><p>把文章中的所有图片重新剪切粘贴一下，在这个文件夹中就会保存所有图片了。</p><p>然后将<code>Typora</code>文件中的图片链接修改为：<code>./文件夹名/图片名</code>，<code>./</code> 表示相对路径，用 <code>.\</code> 会报错。</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240516141757066.png"></p><p>接下来安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install https://github.com/7ym0n/hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>需要从这个地址下载的<code>index.js</code>文件才正确，如果之前下载了其它的，可以先卸载再安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm uninstall hexo-asset-image# 卸载插件<br><br>npm install https://github.com/7ym0n/hexo-asset-image --save # 安装插件<br></code></pre></td></tr></table></figure><p>在运行前将<code>./source/_posts/</code>图片文件夹复制到 <code>./source/</code>下，保证两个路径下的图片文件夹一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>至此，图片显示成功！如果不想显示图片名字，则把方括号中的内容删除如下。</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240516161528218.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
